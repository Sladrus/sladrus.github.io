{"ast":null,"code":"\"use strict\";\n\nvar _inherits = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _regeneratorRuntime = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _createForOfIteratorHelper = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionTCPMTProxyAbridged = exports.TCPMTProxy = void 0;\nvar buffer_1 = require(\"buffer/\");\nvar Connection_1 = require(\"./Connection\");\nvar TCPAbridged_1 = require(\"./TCPAbridged\");\nvar Helpers_1 = require(\"../../Helpers\");\nvar CTR_1 = require(\"../../crypto/CTR\");\nvar MTProxyIO = /*#__PURE__*/function () {\n  function MTProxyIO(connection) {\n    _classCallCheck(this, MTProxyIO);\n    this.header = undefined;\n    this.connection = connection.socket;\n    this._packetClass = connection.PacketCodecClass;\n    this._secret = connection._secret;\n    this._dcId = connection._dcId;\n  }\n  _createClass(MTProxyIO, [{\n    key: \"initHeader\",\n    value: function () {\n      var _initHeader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var secret, isDD, keywords, random, ok, _iterator, _step, key, randomReversed, encryptKey, encryptIv, decryptKey, decryptIv, encryptor, decryptor, dcIdBytes;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              secret = this._secret;\n              isDD = secret.length == 17 && secret[0] == 0xdd;\n              secret = isDD ? secret.slice(1) : secret;\n              if (!(secret.length != 16)) {\n                _context.next = 5;\n                break;\n              }\n              throw new Error(\"MTProxy secret must be a hex-string representing 16 bytes\");\n            case 5:\n              keywords = [buffer_1.Buffer.from(\"50567247\", \"hex\"), buffer_1.Buffer.from(\"474554\", \"hex\"), buffer_1.Buffer.from(\"504f5354\", \"hex\"), buffer_1.Buffer.from(\"eeeeeeee\", \"hex\")];\n            case 6:\n              if (!true) {\n                _context.next = 32;\n                break;\n              }\n              random = (0, Helpers_1.generateRandomBytes)(64);\n              if (!(random[0] !== 0xef && !random.slice(4, 8).equals(buffer_1.Buffer.alloc(4)))) {\n                _context.next = 30;\n                break;\n              }\n              ok = true;\n              _iterator = _createForOfIteratorHelper(keywords);\n              _context.prev = 11;\n              _iterator.s();\n            case 13:\n              if ((_step = _iterator.n()).done) {\n                _context.next = 20;\n                break;\n              }\n              key = _step.value;\n              if (!key.equals(random.slice(0, 4))) {\n                _context.next = 18;\n                break;\n              }\n              ok = false;\n              return _context.abrupt(\"break\", 20);\n            case 18:\n              _context.next = 13;\n              break;\n            case 20:\n              _context.next = 25;\n              break;\n            case 22:\n              _context.prev = 22;\n              _context.t0 = _context[\"catch\"](11);\n              _iterator.e(_context.t0);\n            case 25:\n              _context.prev = 25;\n              _iterator.f();\n              return _context.finish(25);\n            case 28:\n              if (!ok) {\n                _context.next = 30;\n                break;\n              }\n              return _context.abrupt(\"break\", 32);\n            case 30:\n              _context.next = 6;\n              break;\n            case 32:\n              random = random.toJSON().data;\n              randomReversed = buffer_1.Buffer.from(random.slice(8, 56)).reverse(); // Encryption has \"continuous buffer\" enabled\n              _context.next = 36;\n              return (0, Helpers_1.sha256)(buffer_1.Buffer.concat([buffer_1.Buffer.from(random.slice(8, 40)), secret]));\n            case 36:\n              encryptKey = _context.sent;\n              encryptIv = buffer_1.Buffer.from(random.slice(40, 56));\n              _context.next = 40;\n              return (0, Helpers_1.sha256)(buffer_1.Buffer.concat([buffer_1.Buffer.from(randomReversed.slice(0, 32)), secret]));\n            case 40:\n              decryptKey = _context.sent;\n              decryptIv = buffer_1.Buffer.from(randomReversed.slice(32, 48));\n              encryptor = new CTR_1.CTR(encryptKey, encryptIv);\n              decryptor = new CTR_1.CTR(decryptKey, decryptIv);\n              random = buffer_1.Buffer.concat([buffer_1.Buffer.from(random.slice(0, 56)), this._packetClass.obfuscateTag, buffer_1.Buffer.from(random.slice(60))]);\n              dcIdBytes = buffer_1.Buffer.alloc(2);\n              dcIdBytes.writeInt8(this._dcId, 0);\n              random = buffer_1.Buffer.concat([buffer_1.Buffer.from(random.slice(0, 60)), dcIdBytes, buffer_1.Buffer.from(random.slice(62))]);\n              random = buffer_1.Buffer.concat([buffer_1.Buffer.from(random.slice(0, 56)), buffer_1.Buffer.from(encryptor.encrypt(random).slice(56, 64)), buffer_1.Buffer.from(random.slice(64))]);\n              this.header = random;\n              this._encrypt = encryptor;\n              this._decrypt = decryptor;\n            case 52:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[11, 22, 25, 28]]);\n      }));\n      function initHeader() {\n        return _initHeader.apply(this, arguments);\n      }\n      return initHeader;\n    }()\n  }, {\n    key: \"read\",\n    value: function () {\n      var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(n) {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.connection.readExactly(n);\n            case 2:\n              data = _context2.sent;\n              return _context2.abrupt(\"return\", this._decrypt.encrypt(data));\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function read(_x) {\n        return _read.apply(this, arguments);\n      }\n      return read;\n    }()\n  }, {\n    key: \"write\",\n    value: function write(data) {\n      this.connection.write(this._encrypt.encrypt(data));\n    }\n  }]);\n  return MTProxyIO;\n}();\nvar TCPMTProxy = /*#__PURE__*/function (_Connection_1$Obfusca) {\n  _inherits(TCPMTProxy, _Connection_1$Obfusca);\n  var _super = _createSuper(TCPMTProxy);\n  function TCPMTProxy(_ref) {\n    var _this;\n    var ip = _ref.ip,\n      port = _ref.port,\n      dcId = _ref.dcId,\n      loggers = _ref.loggers,\n      proxy = _ref.proxy,\n      socket = _ref.socket,\n      testServers = _ref.testServers;\n    _classCallCheck(this, TCPMTProxy);\n    _this = _super.call(this, {\n      ip: proxy.ip,\n      port: proxy.port,\n      dcId: dcId,\n      loggers: loggers,\n      socket: socket,\n      proxy: proxy,\n      testServers: testServers\n    });\n    _this.ObfuscatedIO = MTProxyIO;\n    if (!proxy.MTProxy) {\n      throw new Error(\"This connection only supports MPTProxies\");\n    }\n    if (!proxy.secret) {\n      throw new Error(\"You need to provide the secret for the MTProxy\");\n    }\n    if (proxy.secret && proxy.secret.match(/^[0-9a-f]+$/i)) {\n      // probably hex\n      _this._secret = buffer_1.Buffer.from(proxy.secret, \"hex\");\n    } else {\n      // probably b64\n      _this._secret = buffer_1.Buffer.from(proxy.secret, \"base64\");\n    }\n    return _this;\n  }\n  return _createClass(TCPMTProxy);\n}(Connection_1.ObfuscatedConnection);\nexports.TCPMTProxy = TCPMTProxy;\nvar ConnectionTCPMTProxyAbridged = /*#__PURE__*/function (_TCPMTProxy) {\n  _inherits(ConnectionTCPMTProxyAbridged, _TCPMTProxy);\n  var _super2 = _createSuper(ConnectionTCPMTProxyAbridged);\n  function ConnectionTCPMTProxyAbridged() {\n    var _this2;\n    _classCallCheck(this, ConnectionTCPMTProxyAbridged);\n    _this2 = _super2.apply(this, arguments);\n    _this2.PacketCodecClass = TCPAbridged_1.AbridgedPacketCodec;\n    return _this2;\n  }\n  return _createClass(ConnectionTCPMTProxyAbridged);\n}(TCPMTProxy);\nexports.ConnectionTCPMTProxyAbridged = ConnectionTCPMTProxyAbridged;","map":{"version":3,"names":["Object","defineProperty","exports","value","ConnectionTCPMTProxyAbridged","TCPMTProxy","buffer_1","require","Connection_1","TCPAbridged_1","Helpers_1","CTR_1","MTProxyIO","connection","header","undefined","socket","_packetClass","PacketCodecClass","_secret","_dcId","secret","isDD","length","slice","Error","keywords","Buffer","from","random","generateRandomBytes","equals","alloc","ok","key","toJSON","data","randomReversed","reverse","sha256","concat","encryptKey","encryptIv","decryptKey","decryptIv","encryptor","CTR","decryptor","obfuscateTag","dcIdBytes","writeInt8","encrypt","_encrypt","_decrypt","n","readExactly","write","ip","port","dcId","loggers","proxy","testServers","ObfuscatedIO","MTProxy","match","ObfuscatedConnection","arguments","AbridgedPacketCodec"],"sources":["C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/telegram/network/connection/TCPMTProxy.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ConnectionTCPMTProxyAbridged = exports.TCPMTProxy = void 0;\r\nconst buffer_1 = require(\"buffer/\");\r\nconst Connection_1 = require(\"./Connection\");\r\nconst TCPAbridged_1 = require(\"./TCPAbridged\");\r\nconst Helpers_1 = require(\"../../Helpers\");\r\nconst CTR_1 = require(\"../../crypto/CTR\");\r\nclass MTProxyIO {\r\n    constructor(connection) {\r\n        this.header = undefined;\r\n        this.connection = connection.socket;\r\n        this._packetClass =\r\n            connection.PacketCodecClass;\r\n        this._secret = connection._secret;\r\n        this._dcId = connection._dcId;\r\n    }\r\n    async initHeader() {\r\n        let secret = this._secret;\r\n        const isDD = secret.length == 17 && secret[0] == 0xdd;\r\n        secret = isDD ? secret.slice(1) : secret;\r\n        if (secret.length != 16) {\r\n            throw new Error(\"MTProxy secret must be a hex-string representing 16 bytes\");\r\n        }\r\n        const keywords = [\r\n            buffer_1.Buffer.from(\"50567247\", \"hex\"),\r\n            buffer_1.Buffer.from(\"474554\", \"hex\"),\r\n            buffer_1.Buffer.from(\"504f5354\", \"hex\"),\r\n            buffer_1.Buffer.from(\"eeeeeeee\", \"hex\"),\r\n        ];\r\n        let random;\r\n        // eslint-disable-next-line no-constant-condition\r\n        while (true) {\r\n            random = (0, Helpers_1.generateRandomBytes)(64);\r\n            if (random[0] !== 0xef &&\r\n                !random.slice(4, 8).equals(buffer_1.Buffer.alloc(4))) {\r\n                let ok = true;\r\n                for (const key of keywords) {\r\n                    if (key.equals(random.slice(0, 4))) {\r\n                        ok = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (ok) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        random = random.toJSON().data;\r\n        const randomReversed = buffer_1.Buffer.from(random.slice(8, 56)).reverse();\r\n        // Encryption has \"continuous buffer\" enabled\r\n        const encryptKey = await (0, Helpers_1.sha256)(buffer_1.Buffer.concat([buffer_1.Buffer.from(random.slice(8, 40)), secret]));\r\n        const encryptIv = buffer_1.Buffer.from(random.slice(40, 56));\r\n        const decryptKey = await (0, Helpers_1.sha256)(buffer_1.Buffer.concat([buffer_1.Buffer.from(randomReversed.slice(0, 32)), secret]));\r\n        const decryptIv = buffer_1.Buffer.from(randomReversed.slice(32, 48));\r\n        const encryptor = new CTR_1.CTR(encryptKey, encryptIv);\r\n        const decryptor = new CTR_1.CTR(decryptKey, decryptIv);\r\n        random = buffer_1.Buffer.concat([\r\n            buffer_1.Buffer.from(random.slice(0, 56)),\r\n            this._packetClass.obfuscateTag,\r\n            buffer_1.Buffer.from(random.slice(60)),\r\n        ]);\r\n        const dcIdBytes = buffer_1.Buffer.alloc(2);\r\n        dcIdBytes.writeInt8(this._dcId, 0);\r\n        random = buffer_1.Buffer.concat([\r\n            buffer_1.Buffer.from(random.slice(0, 60)),\r\n            dcIdBytes,\r\n            buffer_1.Buffer.from(random.slice(62)),\r\n        ]);\r\n        random = buffer_1.Buffer.concat([\r\n            buffer_1.Buffer.from(random.slice(0, 56)),\r\n            buffer_1.Buffer.from(encryptor.encrypt(random).slice(56, 64)),\r\n            buffer_1.Buffer.from(random.slice(64)),\r\n        ]);\r\n        this.header = random;\r\n        this._encrypt = encryptor;\r\n        this._decrypt = decryptor;\r\n    }\r\n    async read(n) {\r\n        const data = await this.connection.readExactly(n);\r\n        return this._decrypt.encrypt(data);\r\n    }\r\n    write(data) {\r\n        this.connection.write(this._encrypt.encrypt(data));\r\n    }\r\n}\r\nclass TCPMTProxy extends Connection_1.ObfuscatedConnection {\r\n    constructor({ ip, port, dcId, loggers, proxy, socket, testServers, }) {\r\n        super({\r\n            ip: proxy.ip,\r\n            port: proxy.port,\r\n            dcId: dcId,\r\n            loggers: loggers,\r\n            socket: socket,\r\n            proxy: proxy,\r\n            testServers: testServers,\r\n        });\r\n        this.ObfuscatedIO = MTProxyIO;\r\n        if (!proxy.MTProxy) {\r\n            throw new Error(\"This connection only supports MPTProxies\");\r\n        }\r\n        if (!proxy.secret) {\r\n            throw new Error(\"You need to provide the secret for the MTProxy\");\r\n        }\r\n        if (proxy.secret && proxy.secret.match(/^[0-9a-f]+$/i)) {\r\n            // probably hex\r\n            this._secret = buffer_1.Buffer.from(proxy.secret, \"hex\");\r\n        }\r\n        else {\r\n            // probably b64\r\n            this._secret = buffer_1.Buffer.from(proxy.secret, \"base64\");\r\n        }\r\n    }\r\n}\r\nexports.TCPMTProxy = TCPMTProxy;\r\nclass ConnectionTCPMTProxyAbridged extends TCPMTProxy {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.PacketCodecClass = TCPAbridged_1.AbridgedPacketCodec;\r\n    }\r\n}\r\nexports.ConnectionTCPMTProxyAbridged = ConnectionTCPMTProxyAbridged;\r\n"],"mappings":"AAAA,YAAY;;AAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACbA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,4BAA4B,GAAGF,OAAO,CAACG,UAAU,GAAG,KAAK,CAAC;AAClE,IAAMC,QAAQ,GAAGC,OAAO,CAAC,SAAS,CAAC;AACnC,IAAMC,YAAY,GAAGD,OAAO,CAAC,cAAc,CAAC;AAC5C,IAAME,aAAa,GAAGF,OAAO,CAAC,eAAe,CAAC;AAC9C,IAAMG,SAAS,GAAGH,OAAO,CAAC,eAAe,CAAC;AAC1C,IAAMI,KAAK,GAAGJ,OAAO,CAAC,kBAAkB,CAAC;AAAC,IACpCK,SAAS;EACX,mBAAYC,UAAU,EAAE;IAAA;IACpB,IAAI,CAACC,MAAM,GAAGC,SAAS;IACvB,IAAI,CAACF,UAAU,GAAGA,UAAU,CAACG,MAAM;IACnC,IAAI,CAACC,YAAY,GACbJ,UAAU,CAACK,gBAAgB;IAC/B,IAAI,CAACC,OAAO,GAAGN,UAAU,CAACM,OAAO;IACjC,IAAI,CAACC,KAAK,GAAGP,UAAU,CAACO,KAAK;EACjC;EAAC;IAAA;IAAA;MAAA,6EACD;QAAA;QAAA;UAAA;YAAA;cACQC,MAAM,GAAG,IAAI,CAACF,OAAO;cACnBG,IAAI,GAAGD,MAAM,CAACE,MAAM,IAAI,EAAE,IAAIF,MAAM,CAAC,CAAC,CAAC,IAAI,IAAI;cACrDA,MAAM,GAAGC,IAAI,GAAGD,MAAM,CAACG,KAAK,CAAC,CAAC,CAAC,GAAGH,MAAM;cAAC,MACrCA,MAAM,CAACE,MAAM,IAAI,EAAE;gBAAA;gBAAA;cAAA;cAAA,MACb,IAAIE,KAAK,CAAC,2DAA2D,CAAC;YAAA;cAE1EC,QAAQ,GAAG,CACbpB,QAAQ,CAACqB,MAAM,CAACC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,EACvCtB,QAAQ,CAACqB,MAAM,CAACC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,EACrCtB,QAAQ,CAACqB,MAAM,CAACC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,EACvCtB,QAAQ,CAACqB,MAAM,CAACC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAC1C;YAAA;cAAA,KAGM,IAAI;gBAAA;gBAAA;cAAA;cACPC,MAAM,GAAG,CAAC,CAAC,EAAEnB,SAAS,CAACoB,mBAAmB,EAAE,EAAE,CAAC;cAAC,MAC5CD,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,IAClB,CAACA,MAAM,CAACL,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACO,MAAM,CAACzB,QAAQ,CAACqB,MAAM,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC;gBAAA;gBAAA;cAAA;cAChDC,EAAE,GAAG,IAAI;cAAA,uCACKP,QAAQ;cAAA;cAAA;YAAA;cAAA;gBAAA;gBAAA;cAAA;cAAfQ,GAAG;cAAA,KACNA,GAAG,CAACH,MAAM,CAACF,MAAM,CAACL,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAAA;gBAAA;cAAA;cAC9BS,EAAE,GAAG,KAAK;cAAC;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA;cAAA,KAIfA,EAAE;gBAAA;gBAAA;cAAA;cAAA;YAAA;cAAA;cAAA;YAAA;cAKdJ,MAAM,GAAGA,MAAM,CAACM,MAAM,EAAE,CAACC,IAAI;cACvBC,cAAc,GAAG/B,QAAQ,CAACqB,MAAM,CAACC,IAAI,CAACC,MAAM,CAACL,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAACc,OAAO,EAAE,EAC1E;cAAA;cAAA,OACyB,CAAC,CAAC,EAAE5B,SAAS,CAAC6B,MAAM,EAAEjC,QAAQ,CAACqB,MAAM,CAACa,MAAM,CAAC,CAAClC,QAAQ,CAACqB,MAAM,CAACC,IAAI,CAACC,MAAM,CAACL,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAEH,MAAM,CAAC,CAAC,CAAC;YAAA;cAArHoB,UAAU;cACVC,SAAS,GAAGpC,QAAQ,CAACqB,MAAM,CAACC,IAAI,CAACC,MAAM,CAACL,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;cAAA;cAAA,OACnC,CAAC,CAAC,EAAEd,SAAS,CAAC6B,MAAM,EAAEjC,QAAQ,CAACqB,MAAM,CAACa,MAAM,CAAC,CAAClC,QAAQ,CAACqB,MAAM,CAACC,IAAI,CAACS,cAAc,CAACb,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAEH,MAAM,CAAC,CAAC,CAAC;YAAA;cAA7HsB,UAAU;cACVC,SAAS,GAAGtC,QAAQ,CAACqB,MAAM,CAACC,IAAI,CAACS,cAAc,CAACb,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;cAC9DqB,SAAS,GAAG,IAAIlC,KAAK,CAACmC,GAAG,CAACL,UAAU,EAAEC,SAAS,CAAC;cAChDK,SAAS,GAAG,IAAIpC,KAAK,CAACmC,GAAG,CAACH,UAAU,EAAEC,SAAS,CAAC;cACtDf,MAAM,GAAGvB,QAAQ,CAACqB,MAAM,CAACa,MAAM,CAAC,CAC5BlC,QAAQ,CAACqB,MAAM,CAACC,IAAI,CAACC,MAAM,CAACL,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EACzC,IAAI,CAACP,YAAY,CAAC+B,YAAY,EAC9B1C,QAAQ,CAACqB,MAAM,CAACC,IAAI,CAACC,MAAM,CAACL,KAAK,CAAC,EAAE,CAAC,CAAC,CACzC,CAAC;cACIyB,SAAS,GAAG3C,QAAQ,CAACqB,MAAM,CAACK,KAAK,CAAC,CAAC,CAAC;cAC1CiB,SAAS,CAACC,SAAS,CAAC,IAAI,CAAC9B,KAAK,EAAE,CAAC,CAAC;cAClCS,MAAM,GAAGvB,QAAQ,CAACqB,MAAM,CAACa,MAAM,CAAC,CAC5BlC,QAAQ,CAACqB,MAAM,CAACC,IAAI,CAACC,MAAM,CAACL,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EACzCyB,SAAS,EACT3C,QAAQ,CAACqB,MAAM,CAACC,IAAI,CAACC,MAAM,CAACL,KAAK,CAAC,EAAE,CAAC,CAAC,CACzC,CAAC;cACFK,MAAM,GAAGvB,QAAQ,CAACqB,MAAM,CAACa,MAAM,CAAC,CAC5BlC,QAAQ,CAACqB,MAAM,CAACC,IAAI,CAACC,MAAM,CAACL,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EACzClB,QAAQ,CAACqB,MAAM,CAACC,IAAI,CAACiB,SAAS,CAACM,OAAO,CAACtB,MAAM,CAAC,CAACL,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAC7DlB,QAAQ,CAACqB,MAAM,CAACC,IAAI,CAACC,MAAM,CAACL,KAAK,CAAC,EAAE,CAAC,CAAC,CACzC,CAAC;cACF,IAAI,CAACV,MAAM,GAAGe,MAAM;cACpB,IAAI,CAACuB,QAAQ,GAAGP,SAAS;cACzB,IAAI,CAACQ,QAAQ,GAAGN,SAAS;YAAC;YAAA;cAAA;UAAA;QAAA;MAAA,CAC7B;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,uEACD,kBAAWO,CAAC;QAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OACW,IAAI,CAACzC,UAAU,CAAC0C,WAAW,CAACD,CAAC,CAAC;YAAA;cAA3ClB,IAAI;cAAA,kCACH,IAAI,CAACiB,QAAQ,CAACF,OAAO,CAACf,IAAI,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CACrC;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA,OACD,eAAMA,IAAI,EAAE;MACR,IAAI,CAACvB,UAAU,CAAC2C,KAAK,CAAC,IAAI,CAACJ,QAAQ,CAACD,OAAO,CAACf,IAAI,CAAC,CAAC;IACtD;EAAC;EAAA;AAAA;AAAA,IAEC/B,UAAU;EAAA;EAAA;EACZ,0BAAsE;IAAA;IAAA,IAAxDoD,EAAE,QAAFA,EAAE;MAAEC,IAAI,QAAJA,IAAI;MAAEC,IAAI,QAAJA,IAAI;MAAEC,OAAO,QAAPA,OAAO;MAAEC,KAAK,QAALA,KAAK;MAAE7C,MAAM,QAANA,MAAM;MAAE8C,WAAW,QAAXA,WAAW;IAAA;IAC7D,0BAAM;MACFL,EAAE,EAAEI,KAAK,CAACJ,EAAE;MACZC,IAAI,EAAEG,KAAK,CAACH,IAAI;MAChBC,IAAI,EAAEA,IAAI;MACVC,OAAO,EAAEA,OAAO;MAChB5C,MAAM,EAAEA,MAAM;MACd6C,KAAK,EAAEA,KAAK;MACZC,WAAW,EAAEA;IACjB,CAAC;IACD,MAAKC,YAAY,GAAGnD,SAAS;IAC7B,IAAI,CAACiD,KAAK,CAACG,OAAO,EAAE;MAChB,MAAM,IAAIvC,KAAK,CAAC,0CAA0C,CAAC;IAC/D;IACA,IAAI,CAACoC,KAAK,CAACxC,MAAM,EAAE;MACf,MAAM,IAAII,KAAK,CAAC,gDAAgD,CAAC;IACrE;IACA,IAAIoC,KAAK,CAACxC,MAAM,IAAIwC,KAAK,CAACxC,MAAM,CAAC4C,KAAK,CAAC,cAAc,CAAC,EAAE;MACpD;MACA,MAAK9C,OAAO,GAAGb,QAAQ,CAACqB,MAAM,CAACC,IAAI,CAACiC,KAAK,CAACxC,MAAM,EAAE,KAAK,CAAC;IAC5D,CAAC,MACI;MACD;MACA,MAAKF,OAAO,GAAGb,QAAQ,CAACqB,MAAM,CAACC,IAAI,CAACiC,KAAK,CAACxC,MAAM,EAAE,QAAQ,CAAC;IAC/D;IAAC;EACL;EAAC;AAAA,EA1BoBb,YAAY,CAAC0D,oBAAoB;AA4B1DhE,OAAO,CAACG,UAAU,GAAGA,UAAU;AAAC,IAC1BD,4BAA4B;EAAA;EAAA;EAC9B,wCAAc;IAAA;IAAA;IACV,6BAAS+D,SAAS;IAClB,OAAKjD,gBAAgB,GAAGT,aAAa,CAAC2D,mBAAmB;IAAC;EAC9D;EAAC;AAAA,EAJsC/D,UAAU;AAMrDH,OAAO,CAACE,4BAA4B,GAAGA,4BAA4B"},"metadata":{},"sourceType":"script","externalDependencies":[]}