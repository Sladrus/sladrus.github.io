{"ast":null,"code":"\"use strict\";\n\n/*\r\n * Imported from https://github.com/spalt08/cryptography/blob/master/packages/aes/src/utils/words.ts\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.xor = exports.getWords = exports.s2i = void 0;\nfunction s2i(str, pos) {\n  return str.charCodeAt(pos) << 24 ^ str.charCodeAt(pos + 1) << 16 ^ str.charCodeAt(pos + 2) << 8 ^ str.charCodeAt(pos + 3);\n}\nexports.s2i = s2i;\n/**\r\n * Helper function for transforming string key to Uint32Array\r\n */\nfunction getWords(key) {\n  if (key instanceof Uint32Array) {\n    return key;\n  }\n  if (typeof key === \"string\") {\n    if (key.length % 4 !== 0) for (var i = key.length % 4; i <= 4; i++) key += \"\\0x00\";\n    var buf = new Uint32Array(key.length / 4);\n    for (var _i = 0; _i < key.length; _i += 4) buf[_i / 4] = s2i(key, _i);\n    return buf;\n  }\n  if (key instanceof Uint8Array) {\n    var _buf = new Uint32Array(key.length / 4);\n    for (var _i2 = 0; _i2 < key.length; _i2 += 4) {\n      _buf[_i2 / 4] = key[_i2] << 24 ^ key[_i2 + 1] << 16 ^ key[_i2 + 2] << 8 ^ key[_i2 + 3];\n    }\n    return _buf;\n  }\n  throw new Error(\"Unable to create 32-bit words\");\n}\nexports.getWords = getWords;\nfunction xor(left, right) {\n  var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : left;\n  for (var i = 0; i < left.length; i++) to[i] = left[i] ^ right[i];\n}\nexports.xor = xor;","map":{"version":3,"names":["Object","defineProperty","exports","value","xor","getWords","s2i","str","pos","charCodeAt","key","Uint32Array","length","i","buf","Uint8Array","Error","left","right","to"],"sources":["C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/telegram/crypto/words.js"],"sourcesContent":["\"use strict\";\r\n/*\r\n * Imported from https://github.com/spalt08/cryptography/blob/master/packages/aes/src/utils/words.ts\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.xor = exports.getWords = exports.s2i = void 0;\r\nfunction s2i(str, pos) {\r\n    return ((str.charCodeAt(pos) << 24) ^\r\n        (str.charCodeAt(pos + 1) << 16) ^\r\n        (str.charCodeAt(pos + 2) << 8) ^\r\n        str.charCodeAt(pos + 3));\r\n}\r\nexports.s2i = s2i;\r\n/**\r\n * Helper function for transforming string key to Uint32Array\r\n */\r\nfunction getWords(key) {\r\n    if (key instanceof Uint32Array) {\r\n        return key;\r\n    }\r\n    if (typeof key === \"string\") {\r\n        if (key.length % 4 !== 0)\r\n            for (let i = key.length % 4; i <= 4; i++)\r\n                key += \"\\0x00\";\r\n        const buf = new Uint32Array(key.length / 4);\r\n        for (let i = 0; i < key.length; i += 4)\r\n            buf[i / 4] = s2i(key, i);\r\n        return buf;\r\n    }\r\n    if (key instanceof Uint8Array) {\r\n        const buf = new Uint32Array(key.length / 4);\r\n        for (let i = 0; i < key.length; i += 4) {\r\n            buf[i / 4] =\r\n                (key[i] << 24) ^\r\n                    (key[i + 1] << 16) ^\r\n                    (key[i + 2] << 8) ^\r\n                    key[i + 3];\r\n        }\r\n        return buf;\r\n    }\r\n    throw new Error(\"Unable to create 32-bit words\");\r\n}\r\nexports.getWords = getWords;\r\nfunction xor(left, right, to = left) {\r\n    for (let i = 0; i < left.length; i++)\r\n        to[i] = left[i] ^ right[i];\r\n}\r\nexports.xor = xor;\r\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,GAAG,GAAGF,OAAO,CAACG,QAAQ,GAAGH,OAAO,CAACI,GAAG,GAAG,KAAK,CAAC;AACrD,SAASA,GAAG,CAACC,GAAG,EAAEC,GAAG,EAAE;EACnB,OAASD,GAAG,CAACE,UAAU,CAACD,GAAG,CAAC,IAAI,EAAE,GAC7BD,GAAG,CAACE,UAAU,CAACD,GAAG,GAAG,CAAC,CAAC,IAAI,EAAG,GAC9BD,GAAG,CAACE,UAAU,CAACD,GAAG,GAAG,CAAC,CAAC,IAAI,CAAE,GAC9BD,GAAG,CAACE,UAAU,CAACD,GAAG,GAAG,CAAC,CAAC;AAC/B;AACAN,OAAO,CAACI,GAAG,GAAGA,GAAG;AACjB;AACA;AACA;AACA,SAASD,QAAQ,CAACK,GAAG,EAAE;EACnB,IAAIA,GAAG,YAAYC,WAAW,EAAE;IAC5B,OAAOD,GAAG;EACd;EACA,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IACzB,IAAIA,GAAG,CAACE,MAAM,GAAG,CAAC,KAAK,CAAC,EACpB,KAAK,IAAIC,CAAC,GAAGH,GAAG,CAACE,MAAM,GAAG,CAAC,EAAEC,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EACpCH,GAAG,IAAI,OAAO;IACtB,IAAMI,GAAG,GAAG,IAAIH,WAAW,CAACD,GAAG,CAACE,MAAM,GAAG,CAAC,CAAC;IAC3C,KAAK,IAAIC,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAGH,GAAG,CAACE,MAAM,EAAEC,EAAC,IAAI,CAAC,EAClCC,GAAG,CAACD,EAAC,GAAG,CAAC,CAAC,GAAGP,GAAG,CAACI,GAAG,EAAEG,EAAC,CAAC;IAC5B,OAAOC,GAAG;EACd;EACA,IAAIJ,GAAG,YAAYK,UAAU,EAAE;IAC3B,IAAMD,IAAG,GAAG,IAAIH,WAAW,CAACD,GAAG,CAACE,MAAM,GAAG,CAAC,CAAC;IAC3C,KAAK,IAAIC,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAGH,GAAG,CAACE,MAAM,EAAEC,GAAC,IAAI,CAAC,EAAE;MACpCC,IAAG,CAACD,GAAC,GAAG,CAAC,CAAC,GACLH,GAAG,CAACG,GAAC,CAAC,IAAI,EAAE,GACRH,GAAG,CAACG,GAAC,GAAG,CAAC,CAAC,IAAI,EAAG,GACjBH,GAAG,CAACG,GAAC,GAAG,CAAC,CAAC,IAAI,CAAE,GACjBH,GAAG,CAACG,GAAC,GAAG,CAAC,CAAC;IACtB;IACA,OAAOC,IAAG;EACd;EACA,MAAM,IAAIE,KAAK,CAAC,+BAA+B,CAAC;AACpD;AACAd,OAAO,CAACG,QAAQ,GAAGA,QAAQ;AAC3B,SAASD,GAAG,CAACa,IAAI,EAAEC,KAAK,EAAa;EAAA,IAAXC,EAAE,uEAAGF,IAAI;EAC/B,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGI,IAAI,CAACL,MAAM,EAAEC,CAAC,EAAE,EAChCM,EAAE,CAACN,CAAC,CAAC,GAAGI,IAAI,CAACJ,CAAC,CAAC,GAAGK,KAAK,CAACL,CAAC,CAAC;AAClC;AACAX,OAAO,CAACE,GAAG,GAAGA,GAAG"},"metadata":{},"sourceType":"script","externalDependencies":[]}