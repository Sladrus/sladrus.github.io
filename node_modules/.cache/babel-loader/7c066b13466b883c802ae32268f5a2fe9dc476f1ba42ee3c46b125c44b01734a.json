{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _regeneratorRuntime = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TelegramBaseClient = void 0;\nvar __1 = require(\"../\");\nvar Helpers_1 = require(\"../Helpers\");\nvar connection_1 = require(\"../network/connection\");\nvar sessions_1 = require(\"../sessions\");\nvar extensions_1 = require(\"../extensions\");\nvar tl_1 = require(\"../tl\");\nvar os_1 = __importDefault(require(\"./os\"));\nvar entityCache_1 = require(\"../entityCache\");\nvar markdown_1 = require(\"../extensions/markdown\");\nvar network_1 = require(\"../network\");\nvar AllTLObjects_1 = require(\"../tl/AllTLObjects\");\nvar TCPMTProxy_1 = require(\"../network/connection/TCPMTProxy\");\nvar async_mutex_1 = require(\"async-mutex\");\nvar Logger_1 = require(\"../extensions/Logger\");\nvar platform_1 = require(\"../platform\");\nvar EXPORTED_SENDER_RECONNECT_TIMEOUT = 1000; // 1 sec\nvar EXPORTED_SENDER_RELEASE_TIMEOUT = 30000; // 30 sec\nvar DEFAULT_DC_ID = 4;\nvar DEFAULT_IPV4_IP = platform_1.isNode ? \"149.154.167.91\" : \"vesta.web.telegram.org\";\nvar DEFAULT_IPV6_IP = \"2001:067c:04e8:f004:0000:0000:0000:000a\";\nvar clientParamsDefault = {\n  connection: platform_1.isNode ? connection_1.ConnectionTCPFull : connection_1.ConnectionTCPObfuscated,\n  networkSocket: platform_1.isNode ? extensions_1.PromisedNetSockets : extensions_1.PromisedWebSockets,\n  useIPV6: false,\n  timeout: 10,\n  requestRetries: 5,\n  connectionRetries: Infinity,\n  retryDelay: 1000,\n  downloadRetries: 5,\n  autoReconnect: true,\n  sequentialUpdates: false,\n  floodSleepThreshold: 60,\n  deviceModel: \"\",\n  systemVersion: \"\",\n  appVersion: \"\",\n  langCode: \"en\",\n  systemLangCode: \"en\",\n  _securityChecks: true,\n  useWSS: platform_1.isBrowser ? window.location.protocol == \"https:\" : false,\n  testServers: false\n};\nvar TelegramBaseClient = /*#__PURE__*/function () {\n  function TelegramBaseClient(session, apiId, apiHash, clientParams) {\n    _classCallCheck(this, TelegramBaseClient);\n    var _a;\n    /** The current gramJS version. */\n    this.__version__ = __1.version;\n    /** @hidden */\n    this._ALBUMS = new Map();\n    /** @hidden */\n    this._exportedSenderPromises = new Map();\n    /** @hidden */\n    this._exportedSenderReleaseTimeouts = new Map();\n    clientParams = Object.assign(Object.assign({}, clientParamsDefault), clientParams);\n    if (!apiId || !apiHash) {\n      throw new Error(\"Your API ID or Hash cannot be empty or undefined\");\n    }\n    if (clientParams.baseLogger) {\n      this._log = clientParams.baseLogger;\n    } else {\n      this._log = new extensions_1.Logger();\n    }\n    this._log.info(\"Running gramJS version \" + __1.version);\n    if (session && typeof session == \"string\") {\n      session = new sessions_1.StoreSession(session);\n    }\n    if (!(session instanceof sessions_1.Session)) {\n      throw new Error(\"Only StringSession and StoreSessions are supported currently :( \");\n    }\n    this._floodSleepThreshold = clientParams.floodSleepThreshold;\n    this.session = session;\n    this.apiId = apiId;\n    this.apiHash = apiHash;\n    this._useIPV6 = clientParams.useIPV6;\n    this._requestRetries = clientParams.requestRetries;\n    this._downloadRetries = clientParams.downloadRetries;\n    this._connectionRetries = clientParams.connectionRetries;\n    this._retryDelay = clientParams.retryDelay || 0;\n    this._timeout = clientParams.timeout;\n    this._autoReconnect = clientParams.autoReconnect;\n    this._proxy = clientParams.proxy;\n    this._semaphore = new async_mutex_1.Semaphore(clientParams.maxConcurrentDownloads || 1);\n    this.testServers = clientParams.testServers || false;\n    this.networkSocket = clientParams.networkSocket || extensions_1.PromisedNetSockets;\n    if (!(clientParams.connection instanceof Function)) {\n      throw new Error(\"Connection should be a class not an instance\");\n    }\n    this._connection = clientParams.connection;\n    var initProxy;\n    if ((_a = this._proxy) === null || _a === void 0 ? void 0 : _a.MTProxy) {\n      this._connection = TCPMTProxy_1.ConnectionTCPMTProxyAbridged;\n      initProxy = new tl_1.Api.InputClientProxy({\n        address: this._proxy.ip,\n        port: this._proxy.port\n      });\n    }\n    this._initRequest = new tl_1.Api.InitConnection({\n      apiId: this.apiId,\n      deviceModel: clientParams.deviceModel || os_1.default.type().toString() || \"Unknown\",\n      systemVersion: clientParams.systemVersion || os_1.default.release().toString() || \"1.0\",\n      appVersion: clientParams.appVersion || \"1.0\",\n      langCode: clientParams.langCode,\n      langPack: \"\",\n      systemLangCode: clientParams.systemLangCode,\n      proxy: initProxy\n    });\n    this._eventBuilders = [];\n    this._floodWaitedRequests = {};\n    this._borrowedSenderPromises = {};\n    this._bot = undefined;\n    this._selfInputPeer = undefined;\n    this.useWSS = clientParams.useWSS;\n    this._securityChecks = !!clientParams.securityChecks;\n    if (this.useWSS && this._proxy) {\n      throw new Error(\"Cannot use SSL with proxies. You need to disable the useWSS client param in TelegramClient\");\n    }\n    this._entityCache = new entityCache_1.EntityCache();\n    // These will be set later\n    this._config = undefined;\n    this._loopStarted = false;\n    this._reconnecting = false;\n    this._destroyed = false;\n    // parse mode\n    this._parseMode = markdown_1.MarkdownParser;\n  }\n  _createClass(TelegramBaseClient, [{\n    key: \"floodSleepThreshold\",\n    get: function get() {\n      return this._floodSleepThreshold;\n    },\n    set: function set(value) {\n      this._floodSleepThreshold = Math.min(value || 0, 24 * 60 * 60);\n    }\n  }, {\n    key: \"maxConcurrentDownloads\",\n    set: function set(value) {\n      // @ts-ignore\n      this._semaphore._value = value;\n    }\n    // region connecting\n  }, {\n    key: \"_initSession\",\n    value: function () {\n      var _initSession2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.session.load();\n            case 2:\n              if (!this.session.serverAddress) {\n                this.session.setDC(DEFAULT_DC_ID, this._useIPV6 ? DEFAULT_IPV6_IP : DEFAULT_IPV4_IP, this.useWSS ? 443 : 80);\n              } else {\n                this._useIPV6 = this.session.serverAddress.includes(\":\");\n              }\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function _initSession() {\n        return _initSession2.apply(this, arguments);\n      }\n      return _initSession;\n    }()\n  }, {\n    key: \"connected\",\n    get: function get() {\n      return this._sender && this._sender.isConnected();\n    }\n  }, {\n    key: \"disconnect\",\n    value: function () {\n      var _disconnect2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this._disconnect();\n            case 2:\n              _context2.next = 4;\n              return Promise.all(Object.values(this._exportedSenderPromises).map(function (promise) {\n                return promise && promise.then(function (sender) {\n                  if (sender) {\n                    return sender.disconnect();\n                  }\n                  return undefined;\n                });\n              }));\n            case 4:\n              this._exportedSenderPromises = new Map();\n              // TODO cancel hanging promises\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function disconnect() {\n        return _disconnect2.apply(this, arguments);\n      }\n      return disconnect;\n    }()\n  }, {\n    key: \"disconnected\",\n    get: function get() {\n      return !this._sender || this._sender._disconnected;\n    }\n  }, {\n    key: \"_disconnect\",\n    value: function () {\n      var _disconnect3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var _a;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return (_a = this._sender) === null || _a === void 0 ? void 0 : _a.disconnect();\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function _disconnect() {\n        return _disconnect3.apply(this, arguments);\n      }\n      return _disconnect;\n    }()\n    /**\r\n     * Disconnects all senders and removes all handlers\r\n     * Disconnect is safer as it will not remove your event handlers\r\n     */\n  }, {\n    key: \"destroy\",\n    value: function () {\n      var _destroy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              this._destroyed = true;\n              _context4.next = 3;\n              return Promise.all([this.disconnect()].concat(_toConsumableArray(Object.values(this._borrowedSenderPromises).map(function (promise) {\n                return promise.then(function (sender) {\n                  return sender.disconnect();\n                });\n              }))));\n            case 3:\n              this._eventBuilders = [];\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function destroy() {\n        return _destroy.apply(this, arguments);\n      }\n      return destroy;\n    }() /** @hidden */\n  }, {\n    key: \"_authKeyCallback\",\n    value: function () {\n      var _authKeyCallback2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(authKey, dcId) {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              this.session.setAuthKey(authKey, dcId);\n              _context5.next = 3;\n              return this.session.save();\n            case 3:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function _authKeyCallback(_x, _x2) {\n        return _authKeyCallback2.apply(this, arguments);\n      }\n      return _authKeyCallback;\n    }() /** @hidden */\n  }, {\n    key: \"_cleanupExportedSender\",\n    value: function () {\n      var _cleanupExportedSender2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(dcId) {\n        var sender;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              if (this.session.dcId !== dcId) {\n                this.session.setAuthKey(undefined, dcId);\n              }\n              _context6.next = 3;\n              return this._exportedSenderPromises.get(dcId);\n            case 3:\n              sender = _context6.sent;\n              this._exportedSenderPromises.delete(dcId);\n              _context6.next = 7;\n              return sender === null || sender === void 0 ? void 0 : sender.disconnect();\n            case 7:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function _cleanupExportedSender(_x3) {\n        return _cleanupExportedSender2.apply(this, arguments);\n      }\n      return _cleanupExportedSender;\n    }() /** @hidden */\n  }, {\n    key: \"_connectSender\",\n    value: function () {\n      var _connectSender2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(sender, dcId) {\n        var dc, auth, req;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return this.getDC(dcId, !!sender.authKey.getKey());\n            case 2:\n              dc = _context7.sent;\n            case 3:\n              if (!true) {\n                _context7.next = 35;\n                break;\n              }\n              _context7.prev = 4;\n              _context7.next = 7;\n              return sender.connect(new this._connection({\n                ip: dc.ipAddress,\n                port: dc.port,\n                dcId: dcId,\n                loggers: this._log,\n                proxy: this._proxy,\n                testServers: this.testServers,\n                socket: this.networkSocket\n              }));\n            case 7:\n              if (!(this.session.dcId !== dcId && !sender._authenticated)) {\n                _context7.next = 17;\n                break;\n              }\n              this._log.info(\"Exporting authorization for data center \".concat(dc.ipAddress, \" with layer \").concat(AllTLObjects_1.LAYER));\n              _context7.next = 11;\n              return this.invoke(new tl_1.Api.auth.ExportAuthorization({\n                dcId: dcId\n              }));\n            case 11:\n              auth = _context7.sent;\n              this._initRequest.query = new tl_1.Api.auth.ImportAuthorization({\n                id: auth.id,\n                bytes: auth.bytes\n              });\n              req = new tl_1.Api.InvokeWithLayer({\n                layer: AllTLObjects_1.LAYER,\n                query: this._initRequest\n              });\n              _context7.next = 16;\n              return sender.send(req);\n            case 16:\n              sender._authenticated = true;\n            case 17:\n              sender.dcId = dcId;\n              sender.userDisconnected = false;\n              return _context7.abrupt(\"return\", sender);\n            case 22:\n              _context7.prev = 22;\n              _context7.t0 = _context7[\"catch\"](4);\n              if (!(_context7.t0.errorMessage === \"DC_ID_INVALID\")) {\n                _context7.next = 28;\n                break;\n              }\n              sender._authenticated = true;\n              sender.userDisconnected = false;\n              return _context7.abrupt(\"return\", sender);\n            case 28:\n              if (this._log.canSend(Logger_1.LogLevel.ERROR)) {\n                console.error(_context7.t0);\n              }\n              _context7.next = 31;\n              return (0, Helpers_1.sleep)(1000);\n            case 31:\n              _context7.next = 33;\n              return sender.disconnect();\n            case 33:\n              _context7.next = 3;\n              break;\n            case 35:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this, [[4, 22]]);\n      }));\n      function _connectSender(_x4, _x5) {\n        return _connectSender2.apply(this, arguments);\n      }\n      return _connectSender;\n    }() /** @hidden */\n  }, {\n    key: \"_borrowExportedSender\",\n    value: function () {\n      var _borrowExportedSender2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(dcId, shouldReconnect, existingSender) {\n        var _this = this;\n        var sender;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              if (!this._exportedSenderPromises.get(dcId) || shouldReconnect) {\n                this._exportedSenderPromises.set(dcId, this._connectSender(existingSender || this._createExportedSender(dcId), dcId));\n              }\n              _context8.prev = 1;\n              _context8.next = 4;\n              return this._exportedSenderPromises.get(dcId);\n            case 4:\n              sender = _context8.sent;\n              if (sender.isConnected()) {\n                _context8.next = 13;\n                break;\n              }\n              if (!sender.isConnecting) {\n                _context8.next = 12;\n                break;\n              }\n              _context8.next = 9;\n              return (0, Helpers_1.sleep)(EXPORTED_SENDER_RECONNECT_TIMEOUT);\n            case 9:\n              return _context8.abrupt(\"return\", this._borrowExportedSender(dcId, false, sender));\n            case 12:\n              return _context8.abrupt(\"return\", this._borrowExportedSender(dcId, true, sender));\n            case 13:\n              _context8.next = 19;\n              break;\n            case 15:\n              _context8.prev = 15;\n              _context8.t0 = _context8[\"catch\"](1);\n              if (this._log.canSend(Logger_1.LogLevel.ERROR)) {\n                console.error(_context8.t0);\n              }\n              return _context8.abrupt(\"return\", this._borrowExportedSender(dcId, true));\n            case 19:\n              if (this._exportedSenderReleaseTimeouts.get(dcId)) {\n                clearTimeout(this._exportedSenderReleaseTimeouts.get(dcId));\n                this._exportedSenderReleaseTimeouts.delete(dcId);\n              }\n              this._exportedSenderReleaseTimeouts.set(dcId, setTimeout(function () {\n                _this._exportedSenderReleaseTimeouts.delete(dcId);\n                sender.disconnect();\n              }, EXPORTED_SENDER_RELEASE_TIMEOUT));\n              return _context8.abrupt(\"return\", sender);\n            case 22:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this, [[1, 15]]);\n      }));\n      function _borrowExportedSender(_x6, _x7, _x8) {\n        return _borrowExportedSender2.apply(this, arguments);\n      }\n      return _borrowExportedSender;\n    }() /** @hidden */\n  }, {\n    key: \"_createExportedSender\",\n    value: function _createExportedSender(dcId) {\n      return new network_1.MTProtoSender(this.session.getAuthKey(dcId), {\n        logger: this._log,\n        dcId: dcId,\n        retries: this._connectionRetries,\n        delay: this._retryDelay,\n        autoReconnect: this._autoReconnect,\n        connectTimeout: this._timeout,\n        authKeyCallback: this._authKeyCallback.bind(this),\n        isMainSender: dcId === this.session.dcId,\n        onConnectionBreak: this._cleanupExportedSender.bind(this),\n        client: this,\n        securityChecks: this._securityChecks\n      });\n    }\n    /** @hidden */\n  }, {\n    key: \"getSender\",\n    value: function getSender(dcId) {\n      return dcId ? this._borrowExportedSender(dcId) : Promise.resolve(this._sender);\n    }\n    // endregion\n  }, {\n    key: \"getDC\",\n    value: function () {\n      var _getDC = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(dcId, download) {\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              throw new Error(\"Cannot be called from here!\");\n            case 1:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9);\n      }));\n      function getDC(_x9, _x10) {\n        return _getDC.apply(this, arguments);\n      }\n      return getDC;\n    }()\n  }, {\n    key: \"invoke\",\n    value: function invoke(request) {\n      throw new Error(\"Cannot be called from here!\");\n    }\n  }, {\n    key: \"setLogLevel\",\n    value: function setLogLevel(level) {\n      this._log.setLevel(level);\n    }\n  }, {\n    key: \"logger\",\n    get: function get() {\n      return this._log;\n    }\n  }]);\n  return TelegramBaseClient;\n}();\nexports.TelegramBaseClient = TelegramBaseClient;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","TelegramBaseClient","__1","require","Helpers_1","connection_1","sessions_1","extensions_1","tl_1","os_1","entityCache_1","markdown_1","network_1","AllTLObjects_1","TCPMTProxy_1","async_mutex_1","Logger_1","platform_1","EXPORTED_SENDER_RECONNECT_TIMEOUT","EXPORTED_SENDER_RELEASE_TIMEOUT","DEFAULT_DC_ID","DEFAULT_IPV4_IP","isNode","DEFAULT_IPV6_IP","clientParamsDefault","connection","ConnectionTCPFull","ConnectionTCPObfuscated","networkSocket","PromisedNetSockets","PromisedWebSockets","useIPV6","timeout","requestRetries","connectionRetries","Infinity","retryDelay","downloadRetries","autoReconnect","sequentialUpdates","floodSleepThreshold","deviceModel","systemVersion","appVersion","langCode","systemLangCode","_securityChecks","useWSS","isBrowser","window","location","protocol","testServers","session","apiId","apiHash","clientParams","_a","__version__","version","_ALBUMS","Map","_exportedSenderPromises","_exportedSenderReleaseTimeouts","assign","Error","baseLogger","_log","Logger","info","StoreSession","Session","_floodSleepThreshold","_useIPV6","_requestRetries","_downloadRetries","_connectionRetries","_retryDelay","_timeout","_autoReconnect","_proxy","proxy","_semaphore","Semaphore","maxConcurrentDownloads","Function","_connection","initProxy","MTProxy","ConnectionTCPMTProxyAbridged","Api","InputClientProxy","address","ip","port","_initRequest","InitConnection","default","type","toString","release","langPack","_eventBuilders","_floodWaitedRequests","_borrowedSenderPromises","_bot","undefined","_selfInputPeer","securityChecks","_entityCache","EntityCache","_config","_loopStarted","_reconnecting","_destroyed","_parseMode","MarkdownParser","Math","min","_value","load","serverAddress","setDC","includes","_sender","isConnected","_disconnect","Promise","all","values","map","promise","then","sender","disconnect","_disconnected","authKey","dcId","setAuthKey","save","get","delete","getDC","getKey","dc","connect","ipAddress","loggers","socket","_authenticated","LAYER","invoke","auth","ExportAuthorization","query","ImportAuthorization","id","bytes","req","InvokeWithLayer","layer","send","userDisconnected","errorMessage","canSend","LogLevel","ERROR","console","error","sleep","shouldReconnect","existingSender","set","_connectSender","_createExportedSender","isConnecting","_borrowExportedSender","clearTimeout","setTimeout","MTProtoSender","getAuthKey","logger","retries","delay","connectTimeout","authKeyCallback","_authKeyCallback","bind","isMainSender","onConnectionBreak","_cleanupExportedSender","client","resolve","download","request","level","setLevel"],"sources":["C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/telegram/client/telegramBaseClient.js"],"sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TelegramBaseClient = void 0;\r\nconst __1 = require(\"../\");\r\nconst Helpers_1 = require(\"../Helpers\");\r\nconst connection_1 = require(\"../network/connection\");\r\nconst sessions_1 = require(\"../sessions\");\r\nconst extensions_1 = require(\"../extensions\");\r\nconst tl_1 = require(\"../tl\");\r\nconst os_1 = __importDefault(require(\"./os\"));\r\nconst entityCache_1 = require(\"../entityCache\");\r\nconst markdown_1 = require(\"../extensions/markdown\");\r\nconst network_1 = require(\"../network\");\r\nconst AllTLObjects_1 = require(\"../tl/AllTLObjects\");\r\nconst TCPMTProxy_1 = require(\"../network/connection/TCPMTProxy\");\r\nconst async_mutex_1 = require(\"async-mutex\");\r\nconst Logger_1 = require(\"../extensions/Logger\");\r\nconst platform_1 = require(\"../platform\");\r\nconst EXPORTED_SENDER_RECONNECT_TIMEOUT = 1000; // 1 sec\r\nconst EXPORTED_SENDER_RELEASE_TIMEOUT = 30000; // 30 sec\r\nconst DEFAULT_DC_ID = 4;\r\nconst DEFAULT_IPV4_IP = platform_1.isNode ? \"149.154.167.91\" : \"vesta.web.telegram.org\";\r\nconst DEFAULT_IPV6_IP = \"2001:067c:04e8:f004:0000:0000:0000:000a\";\r\nconst clientParamsDefault = {\r\n    connection: platform_1.isNode ? connection_1.ConnectionTCPFull : connection_1.ConnectionTCPObfuscated,\r\n    networkSocket: platform_1.isNode ? extensions_1.PromisedNetSockets : extensions_1.PromisedWebSockets,\r\n    useIPV6: false,\r\n    timeout: 10,\r\n    requestRetries: 5,\r\n    connectionRetries: Infinity,\r\n    retryDelay: 1000,\r\n    downloadRetries: 5,\r\n    autoReconnect: true,\r\n    sequentialUpdates: false,\r\n    floodSleepThreshold: 60,\r\n    deviceModel: \"\",\r\n    systemVersion: \"\",\r\n    appVersion: \"\",\r\n    langCode: \"en\",\r\n    systemLangCode: \"en\",\r\n    _securityChecks: true,\r\n    useWSS: platform_1.isBrowser ? window.location.protocol == \"https:\" : false,\r\n    testServers: false,\r\n};\r\nclass TelegramBaseClient {\r\n    constructor(session, apiId, apiHash, clientParams) {\r\n        var _a;\r\n        /** The current gramJS version. */\r\n        this.__version__ = __1.version;\r\n        /** @hidden */\r\n        this._ALBUMS = new Map();\r\n        /** @hidden */\r\n        this._exportedSenderPromises = new Map();\r\n        /** @hidden */\r\n        this._exportedSenderReleaseTimeouts = new Map();\r\n        clientParams = Object.assign(Object.assign({}, clientParamsDefault), clientParams);\r\n        if (!apiId || !apiHash) {\r\n            throw new Error(\"Your API ID or Hash cannot be empty or undefined\");\r\n        }\r\n        if (clientParams.baseLogger) {\r\n            this._log = clientParams.baseLogger;\r\n        }\r\n        else {\r\n            this._log = new extensions_1.Logger();\r\n        }\r\n        this._log.info(\"Running gramJS version \" + __1.version);\r\n        if (session && typeof session == \"string\") {\r\n            session = new sessions_1.StoreSession(session);\r\n        }\r\n        if (!(session instanceof sessions_1.Session)) {\r\n            throw new Error(\"Only StringSession and StoreSessions are supported currently :( \");\r\n        }\r\n        this._floodSleepThreshold = clientParams.floodSleepThreshold;\r\n        this.session = session;\r\n        this.apiId = apiId;\r\n        this.apiHash = apiHash;\r\n        this._useIPV6 = clientParams.useIPV6;\r\n        this._requestRetries = clientParams.requestRetries;\r\n        this._downloadRetries = clientParams.downloadRetries;\r\n        this._connectionRetries = clientParams.connectionRetries;\r\n        this._retryDelay = clientParams.retryDelay || 0;\r\n        this._timeout = clientParams.timeout;\r\n        this._autoReconnect = clientParams.autoReconnect;\r\n        this._proxy = clientParams.proxy;\r\n        this._semaphore = new async_mutex_1.Semaphore(clientParams.maxConcurrentDownloads || 1);\r\n        this.testServers = clientParams.testServers || false;\r\n        this.networkSocket = clientParams.networkSocket || extensions_1.PromisedNetSockets;\r\n        if (!(clientParams.connection instanceof Function)) {\r\n            throw new Error(\"Connection should be a class not an instance\");\r\n        }\r\n        this._connection = clientParams.connection;\r\n        let initProxy;\r\n        if ((_a = this._proxy) === null || _a === void 0 ? void 0 : _a.MTProxy) {\r\n            this._connection = TCPMTProxy_1.ConnectionTCPMTProxyAbridged;\r\n            initProxy = new tl_1.Api.InputClientProxy({\r\n                address: this._proxy.ip,\r\n                port: this._proxy.port,\r\n            });\r\n        }\r\n        this._initRequest = new tl_1.Api.InitConnection({\r\n            apiId: this.apiId,\r\n            deviceModel: clientParams.deviceModel || os_1.default.type().toString() || \"Unknown\",\r\n            systemVersion: clientParams.systemVersion || os_1.default.release().toString() || \"1.0\",\r\n            appVersion: clientParams.appVersion || \"1.0\",\r\n            langCode: clientParams.langCode,\r\n            langPack: \"\",\r\n            systemLangCode: clientParams.systemLangCode,\r\n            proxy: initProxy,\r\n        });\r\n        this._eventBuilders = [];\r\n        this._floodWaitedRequests = {};\r\n        this._borrowedSenderPromises = {};\r\n        this._bot = undefined;\r\n        this._selfInputPeer = undefined;\r\n        this.useWSS = clientParams.useWSS;\r\n        this._securityChecks = !!clientParams.securityChecks;\r\n        if (this.useWSS && this._proxy) {\r\n            throw new Error(\"Cannot use SSL with proxies. You need to disable the useWSS client param in TelegramClient\");\r\n        }\r\n        this._entityCache = new entityCache_1.EntityCache();\r\n        // These will be set later\r\n        this._config = undefined;\r\n        this._loopStarted = false;\r\n        this._reconnecting = false;\r\n        this._destroyed = false;\r\n        // parse mode\r\n        this._parseMode = markdown_1.MarkdownParser;\r\n    }\r\n    get floodSleepThreshold() {\r\n        return this._floodSleepThreshold;\r\n    }\r\n    set floodSleepThreshold(value) {\r\n        this._floodSleepThreshold = Math.min(value || 0, 24 * 60 * 60);\r\n    }\r\n    set maxConcurrentDownloads(value) {\r\n        // @ts-ignore\r\n        this._semaphore._value = value;\r\n    }\r\n    // region connecting\r\n    async _initSession() {\r\n        await this.session.load();\r\n        if (!this.session.serverAddress) {\r\n            this.session.setDC(DEFAULT_DC_ID, this._useIPV6 ? DEFAULT_IPV6_IP : DEFAULT_IPV4_IP, this.useWSS ? 443 : 80);\r\n        }\r\n        else {\r\n            this._useIPV6 = this.session.serverAddress.includes(\":\");\r\n        }\r\n    }\r\n    get connected() {\r\n        return this._sender && this._sender.isConnected();\r\n    }\r\n    async disconnect() {\r\n        await this._disconnect();\r\n        await Promise.all(Object.values(this._exportedSenderPromises).map((promise) => {\r\n            return (promise &&\r\n                promise.then((sender) => {\r\n                    if (sender) {\r\n                        return sender.disconnect();\r\n                    }\r\n                    return undefined;\r\n                }));\r\n        }));\r\n        this._exportedSenderPromises = new Map();\r\n        // TODO cancel hanging promises\r\n    }\r\n    get disconnected() {\r\n        return !this._sender || this._sender._disconnected;\r\n    }\r\n    async _disconnect() {\r\n        var _a;\r\n        await ((_a = this._sender) === null || _a === void 0 ? void 0 : _a.disconnect());\r\n    }\r\n    /**\r\n     * Disconnects all senders and removes all handlers\r\n     * Disconnect is safer as it will not remove your event handlers\r\n     */\r\n    async destroy() {\r\n        this._destroyed = true;\r\n        await Promise.all([\r\n            this.disconnect(),\r\n            ...Object.values(this._borrowedSenderPromises).map((promise) => {\r\n                return promise.then((sender) => sender.disconnect());\r\n            }),\r\n        ]);\r\n        this._eventBuilders = [];\r\n    }\r\n    /** @hidden */\r\n    async _authKeyCallback(authKey, dcId) {\r\n        this.session.setAuthKey(authKey, dcId);\r\n        await this.session.save();\r\n    }\r\n    /** @hidden */\r\n    async _cleanupExportedSender(dcId) {\r\n        if (this.session.dcId !== dcId) {\r\n            this.session.setAuthKey(undefined, dcId);\r\n        }\r\n        let sender = await this._exportedSenderPromises.get(dcId);\r\n        this._exportedSenderPromises.delete(dcId);\r\n        await (sender === null || sender === void 0 ? void 0 : sender.disconnect());\r\n    }\r\n    /** @hidden */\r\n    async _connectSender(sender, dcId) {\r\n        // if we don't already have an auth key we want to use normal DCs not -1\r\n        const dc = await this.getDC(dcId, !!sender.authKey.getKey());\r\n        while (true) {\r\n            try {\r\n                await sender.connect(new this._connection({\r\n                    ip: dc.ipAddress,\r\n                    port: dc.port,\r\n                    dcId: dcId,\r\n                    loggers: this._log,\r\n                    proxy: this._proxy,\r\n                    testServers: this.testServers,\r\n                    socket: this.networkSocket,\r\n                }));\r\n                if (this.session.dcId !== dcId && !sender._authenticated) {\r\n                    this._log.info(`Exporting authorization for data center ${dc.ipAddress} with layer ${AllTLObjects_1.LAYER}`);\r\n                    const auth = await this.invoke(new tl_1.Api.auth.ExportAuthorization({ dcId: dcId }));\r\n                    this._initRequest.query = new tl_1.Api.auth.ImportAuthorization({\r\n                        id: auth.id,\r\n                        bytes: auth.bytes,\r\n                    });\r\n                    const req = new tl_1.Api.InvokeWithLayer({\r\n                        layer: AllTLObjects_1.LAYER,\r\n                        query: this._initRequest,\r\n                    });\r\n                    await sender.send(req);\r\n                    sender._authenticated = true;\r\n                }\r\n                sender.dcId = dcId;\r\n                sender.userDisconnected = false;\r\n                return sender;\r\n            }\r\n            catch (err) {\r\n                if (err.errorMessage === \"DC_ID_INVALID\") {\r\n                    sender._authenticated = true;\r\n                    sender.userDisconnected = false;\r\n                    return sender;\r\n                }\r\n                if (this._log.canSend(Logger_1.LogLevel.ERROR)) {\r\n                    console.error(err);\r\n                }\r\n                await (0, Helpers_1.sleep)(1000);\r\n                await sender.disconnect();\r\n            }\r\n        }\r\n    }\r\n    /** @hidden */\r\n    async _borrowExportedSender(dcId, shouldReconnect, existingSender) {\r\n        if (!this._exportedSenderPromises.get(dcId) || shouldReconnect) {\r\n            this._exportedSenderPromises.set(dcId, this._connectSender(existingSender || this._createExportedSender(dcId), dcId));\r\n        }\r\n        let sender;\r\n        try {\r\n            sender = await this._exportedSenderPromises.get(dcId);\r\n            if (!sender.isConnected()) {\r\n                if (sender.isConnecting) {\r\n                    await (0, Helpers_1.sleep)(EXPORTED_SENDER_RECONNECT_TIMEOUT);\r\n                    return this._borrowExportedSender(dcId, false, sender);\r\n                }\r\n                else {\r\n                    return this._borrowExportedSender(dcId, true, sender);\r\n                }\r\n            }\r\n        }\r\n        catch (err) {\r\n            if (this._log.canSend(Logger_1.LogLevel.ERROR)) {\r\n                console.error(err);\r\n            }\r\n            return this._borrowExportedSender(dcId, true);\r\n        }\r\n        if (this._exportedSenderReleaseTimeouts.get(dcId)) {\r\n            clearTimeout(this._exportedSenderReleaseTimeouts.get(dcId));\r\n            this._exportedSenderReleaseTimeouts.delete(dcId);\r\n        }\r\n        this._exportedSenderReleaseTimeouts.set(dcId, setTimeout(() => {\r\n            this._exportedSenderReleaseTimeouts.delete(dcId);\r\n            sender.disconnect();\r\n        }, EXPORTED_SENDER_RELEASE_TIMEOUT));\r\n        return sender;\r\n    }\r\n    /** @hidden */\r\n    _createExportedSender(dcId) {\r\n        return new network_1.MTProtoSender(this.session.getAuthKey(dcId), {\r\n            logger: this._log,\r\n            dcId,\r\n            retries: this._connectionRetries,\r\n            delay: this._retryDelay,\r\n            autoReconnect: this._autoReconnect,\r\n            connectTimeout: this._timeout,\r\n            authKeyCallback: this._authKeyCallback.bind(this),\r\n            isMainSender: dcId === this.session.dcId,\r\n            onConnectionBreak: this._cleanupExportedSender.bind(this),\r\n            client: this,\r\n            securityChecks: this._securityChecks,\r\n        });\r\n    }\r\n    /** @hidden */\r\n    getSender(dcId) {\r\n        return dcId\r\n            ? this._borrowExportedSender(dcId)\r\n            : Promise.resolve(this._sender);\r\n    }\r\n    // endregion\r\n    async getDC(dcId, download) {\r\n        throw new Error(\"Cannot be called from here!\");\r\n    }\r\n    invoke(request) {\r\n        throw new Error(\"Cannot be called from here!\");\r\n    }\r\n    setLogLevel(level) {\r\n        this._log.setLevel(level);\r\n    }\r\n    get logger() {\r\n        return this._log;\r\n    }\r\n}\r\nexports.TelegramBaseClient = TelegramBaseClient;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}