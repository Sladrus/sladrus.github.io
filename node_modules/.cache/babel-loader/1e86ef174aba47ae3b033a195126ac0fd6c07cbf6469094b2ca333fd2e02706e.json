{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createForOfIteratorHelper = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HTMLParser = void 0;\nvar htmlparser2_1 = require(\"htmlparser2\");\nvar tl_1 = require(\"../tl\");\nvar index_1 = require(\"../index\");\nvar HTMLToTelegramParser = /*#__PURE__*/function () {\n  function HTMLToTelegramParser() {\n    _classCallCheck(this, HTMLToTelegramParser);\n    this.text = \"\";\n    this.entities = [];\n    this._buildingEntities = new Map();\n    this._openTags = [];\n    this._openTagsMeta = [];\n  }\n  _createClass(HTMLToTelegramParser, [{\n    key: \"onopentag\",\n    value: function onopentag(name, attributes) {\n      /*\r\n       * This fires when a new tag is opened.\r\n       *\r\n       * If you don't need an aggregated `attributes` object,\r\n       * have a look at the `onopentagname` and `onattribute` events.\r\n       */\n      this._openTags.unshift(name);\n      this._openTagsMeta.unshift(undefined);\n      var EntityType;\n      var args = {};\n      if (name == \"strong\" || name == \"b\") {\n        EntityType = tl_1.Api.MessageEntityBold;\n      } else if (name == \"spoiler\") {\n        EntityType = tl_1.Api.MessageEntitySpoiler;\n      } else if (name == \"em\" || name == \"i\") {\n        EntityType = tl_1.Api.MessageEntityItalic;\n      } else if (name == \"u\") {\n        EntityType = tl_1.Api.MessageEntityUnderline;\n      } else if (name == \"del\" || name == \"s\") {\n        EntityType = tl_1.Api.MessageEntityStrike;\n      } else if (name == \"blockquote\") {\n        EntityType = tl_1.Api.MessageEntityBlockquote;\n      } else if (name == \"code\") {\n        var pre = this._buildingEntities.get(\"pre\");\n        if (pre && pre instanceof tl_1.Api.MessageEntityPre) {\n          try {\n            pre.language = attributes.class.slice(\"language-\".length, attributes.class.length);\n          } catch (e) {\n            // no language block\n          }\n        } else {\n          EntityType = tl_1.Api.MessageEntityCode;\n        }\n      } else if (name == \"pre\") {\n        EntityType = tl_1.Api.MessageEntityPre;\n        args[\"language\"] = \"\";\n      } else if (name == \"a\") {\n        var url = attributes.href;\n        if (!url) {\n          return;\n        }\n        if (url.startsWith(\"mailto:\")) {\n          url = url.slice(\"mailto:\".length, url.length);\n          EntityType = tl_1.Api.MessageEntityEmail;\n        } else {\n          EntityType = tl_1.Api.MessageEntityTextUrl;\n          args[\"url\"] = url;\n          url = undefined;\n        }\n        this._openTagsMeta.shift();\n        this._openTagsMeta.unshift(url);\n      }\n      if (EntityType && !this._buildingEntities.has(name)) {\n        this._buildingEntities.set(name, new EntityType(Object.assign({\n          offset: this.text.length,\n          length: 0\n        }, args)));\n      }\n    }\n  }, {\n    key: \"ontext\",\n    value: function ontext(text) {\n      var previousTag = this._openTags.length > 0 ? this._openTags[0] : \"\";\n      if (previousTag == \"a\") {\n        var url = this._openTagsMeta[0];\n        if (url) {\n          text = url;\n        }\n      }\n      var _iterator = _createForOfIteratorHelper(this._buildingEntities),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n            tag = _step$value[0],\n            entity = _step$value[1];\n          entity.length += text.length;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      this.text += text;\n    }\n  }, {\n    key: \"onclosetag\",\n    value: function onclosetag(tagname) {\n      this._openTagsMeta.shift();\n      this._openTags.shift();\n      var entity = this._buildingEntities.get(tagname);\n      if (entity) {\n        this._buildingEntities.delete(tagname);\n        this.entities.push(entity);\n      }\n    }\n  }, {\n    key: \"onattribute\",\n    value: function onattribute(name, value, quote) {}\n  }, {\n    key: \"oncdataend\",\n    value: function oncdataend() {}\n  }, {\n    key: \"oncdatastart\",\n    value: function oncdatastart() {}\n  }, {\n    key: \"oncomment\",\n    value: function oncomment(data) {}\n  }, {\n    key: \"oncommentend\",\n    value: function oncommentend() {}\n  }, {\n    key: \"onend\",\n    value: function onend() {}\n  }, {\n    key: \"onerror\",\n    value: function onerror(error) {}\n  }, {\n    key: \"onopentagname\",\n    value: function onopentagname(name) {}\n  }, {\n    key: \"onparserinit\",\n    value: function onparserinit(parser) {}\n  }, {\n    key: \"onprocessinginstruction\",\n    value: function onprocessinginstruction(name, data) {}\n  }, {\n    key: \"onreset\",\n    value: function onreset() {}\n  }]);\n  return HTMLToTelegramParser;\n}();\nvar HTMLParser = /*#__PURE__*/function () {\n  function HTMLParser() {\n    _classCallCheck(this, HTMLParser);\n  }\n  _createClass(HTMLParser, null, [{\n    key: \"parse\",\n    value: function parse(html) {\n      if (!html) {\n        return [html, []];\n      }\n      var handler = new HTMLToTelegramParser();\n      var parser = new htmlparser2_1.Parser(handler);\n      parser.write(html);\n      parser.end();\n      var text = index_1.helpers.stripText(handler.text, handler.entities);\n      return [text, handler.entities];\n    }\n  }, {\n    key: \"unparse\",\n    value: function unparse(text, entities) {\n      var _offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var _length = arguments.length > 3 ? arguments[3] : undefined;\n      if (!text || !entities || !entities.length) {\n        return text;\n      }\n      if (_length == undefined) {\n        _length = text.length;\n      }\n      var html = [];\n      var lastOffset = 0;\n      for (var i = 0; i < entities.length; i++) {\n        var entity = entities[i];\n        if (entity.offset >= _offset + _length) {\n          break;\n        }\n        var relativeOffset = entity.offset - _offset;\n        if (relativeOffset > lastOffset) {\n          html.push(text.slice(lastOffset, relativeOffset));\n        } else if (relativeOffset < lastOffset) {\n          continue;\n        }\n        var skipEntity = false;\n        var length = entity.length;\n        var entityText = this.unparse(text.slice(relativeOffset, relativeOffset + length), entities.slice(i + 1, entities.length), entity.offset, length);\n        if (entity instanceof tl_1.Api.MessageEntityBold) {\n          html.push(\"<strong>\".concat(entityText, \"</strong>\"));\n        } else if (entity instanceof tl_1.Api.MessageEntitySpoiler) {\n          html.push(\"<spoiler>\".concat(entityText, \"</spoiler>\"));\n        } else if (entity instanceof tl_1.Api.MessageEntityItalic) {\n          html.push(\"<em>\".concat(entityText, \"</em>\"));\n        } else if (entity instanceof tl_1.Api.MessageEntityCode) {\n          html.push(\"<code>\".concat(entityText, \"</code>\"));\n        } else if (entity instanceof tl_1.Api.MessageEntityUnderline) {\n          html.push(\"<u>\".concat(entityText, \"</u>\"));\n        } else if (entity instanceof tl_1.Api.MessageEntityStrike) {\n          html.push(\"<del>\".concat(entityText, \"</del>\"));\n        } else if (entity instanceof tl_1.Api.MessageEntityBlockquote) {\n          html.push(\"<blockquote>\".concat(entityText, \"</blockquote>\"));\n        } else if (entity instanceof tl_1.Api.MessageEntityPre) {\n          if (entity.language) {\n            html.push(\"<pre>\\n<code class=\\\"language-\".concat(entity.language, \"\\\">\\n    \").concat(entityText, \"\\n</code>\\n</pre>\"));\n          } else {\n            html.push(\"<pre></pre><code>\".concat(entityText, \"</code><pre>\"));\n          }\n        } else if (entity instanceof tl_1.Api.MessageEntityEmail) {\n          html.push(\"<a href=\\\"mailto:\".concat(entityText, \"\\\">\").concat(entityText, \"</a>\"));\n        } else if (entity instanceof tl_1.Api.MessageEntityUrl) {\n          html.push(\"<a href=\\\"\".concat(entityText, \"\\\">\").concat(entityText, \"</a>\"));\n        } else if (entity instanceof tl_1.Api.MessageEntityTextUrl) {\n          html.push(\"<a href=\\\"\".concat(entity.url, \"\\\">\").concat(entityText, \"</a>\"));\n        } else if (entity instanceof tl_1.Api.MessageEntityMentionName) {\n          html.push(\"<a href=\\\"tg://user?id=\".concat(entity.userId, \"\\\">\").concat(entityText, \"</a>\"));\n        } else {\n          skipEntity = true;\n        }\n        lastOffset = relativeOffset + (skipEntity ? 0 : length);\n      }\n      html.push(text.slice(lastOffset, text.length));\n      return html.join(\"\");\n    }\n  }]);\n  return HTMLParser;\n}();\nexports.HTMLParser = HTMLParser;","map":{"version":3,"names":["Object","defineProperty","exports","value","HTMLParser","htmlparser2_1","require","tl_1","index_1","HTMLToTelegramParser","text","entities","_buildingEntities","Map","_openTags","_openTagsMeta","name","attributes","unshift","undefined","EntityType","args","Api","MessageEntityBold","MessageEntitySpoiler","MessageEntityItalic","MessageEntityUnderline","MessageEntityStrike","MessageEntityBlockquote","pre","get","MessageEntityPre","language","class","slice","length","e","MessageEntityCode","url","href","startsWith","MessageEntityEmail","MessageEntityTextUrl","shift","has","set","assign","offset","previousTag","tag","entity","tagname","delete","push","quote","data","error","parser","html","handler","Parser","write","end","helpers","stripText","_offset","_length","lastOffset","i","relativeOffset","skipEntity","entityText","unparse","MessageEntityUrl","MessageEntityMentionName","userId","join"],"sources":["C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/telegram/extensions/html.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.HTMLParser = void 0;\r\nconst htmlparser2_1 = require(\"htmlparser2\");\r\nconst tl_1 = require(\"../tl\");\r\nconst index_1 = require(\"../index\");\r\nclass HTMLToTelegramParser {\r\n    constructor() {\r\n        this.text = \"\";\r\n        this.entities = [];\r\n        this._buildingEntities = new Map();\r\n        this._openTags = [];\r\n        this._openTagsMeta = [];\r\n    }\r\n    onopentag(name, attributes) {\r\n        /*\r\n         * This fires when a new tag is opened.\r\n         *\r\n         * If you don't need an aggregated `attributes` object,\r\n         * have a look at the `onopentagname` and `onattribute` events.\r\n         */\r\n        this._openTags.unshift(name);\r\n        this._openTagsMeta.unshift(undefined);\r\n        let EntityType;\r\n        const args = {};\r\n        if (name == \"strong\" || name == \"b\") {\r\n            EntityType = tl_1.Api.MessageEntityBold;\r\n        }\r\n        else if (name == \"spoiler\") {\r\n            EntityType = tl_1.Api.MessageEntitySpoiler;\r\n        }\r\n        else if (name == \"em\" || name == \"i\") {\r\n            EntityType = tl_1.Api.MessageEntityItalic;\r\n        }\r\n        else if (name == \"u\") {\r\n            EntityType = tl_1.Api.MessageEntityUnderline;\r\n        }\r\n        else if (name == \"del\" || name == \"s\") {\r\n            EntityType = tl_1.Api.MessageEntityStrike;\r\n        }\r\n        else if (name == \"blockquote\") {\r\n            EntityType = tl_1.Api.MessageEntityBlockquote;\r\n        }\r\n        else if (name == \"code\") {\r\n            const pre = this._buildingEntities.get(\"pre\");\r\n            if (pre && pre instanceof tl_1.Api.MessageEntityPre) {\r\n                try {\r\n                    pre.language = attributes.class.slice(\"language-\".length, attributes.class.length);\r\n                }\r\n                catch (e) {\r\n                    // no language block\r\n                }\r\n            }\r\n            else {\r\n                EntityType = tl_1.Api.MessageEntityCode;\r\n            }\r\n        }\r\n        else if (name == \"pre\") {\r\n            EntityType = tl_1.Api.MessageEntityPre;\r\n            args[\"language\"] = \"\";\r\n        }\r\n        else if (name == \"a\") {\r\n            let url = attributes.href;\r\n            if (!url) {\r\n                return;\r\n            }\r\n            if (url.startsWith(\"mailto:\")) {\r\n                url = url.slice(\"mailto:\".length, url.length);\r\n                EntityType = tl_1.Api.MessageEntityEmail;\r\n            }\r\n            else {\r\n                EntityType = tl_1.Api.MessageEntityTextUrl;\r\n                args[\"url\"] = url;\r\n                url = undefined;\r\n            }\r\n            this._openTagsMeta.shift();\r\n            this._openTagsMeta.unshift(url);\r\n        }\r\n        if (EntityType && !this._buildingEntities.has(name)) {\r\n            this._buildingEntities.set(name, new EntityType(Object.assign({ offset: this.text.length, length: 0 }, args)));\r\n        }\r\n    }\r\n    ontext(text) {\r\n        const previousTag = this._openTags.length > 0 ? this._openTags[0] : \"\";\r\n        if (previousTag == \"a\") {\r\n            const url = this._openTagsMeta[0];\r\n            if (url) {\r\n                text = url;\r\n            }\r\n        }\r\n        for (let [tag, entity] of this._buildingEntities) {\r\n            entity.length += text.length;\r\n        }\r\n        this.text += text;\r\n    }\r\n    onclosetag(tagname) {\r\n        this._openTagsMeta.shift();\r\n        this._openTags.shift();\r\n        const entity = this._buildingEntities.get(tagname);\r\n        if (entity) {\r\n            this._buildingEntities.delete(tagname);\r\n            this.entities.push(entity);\r\n        }\r\n    }\r\n    onattribute(name, value, quote) { }\r\n    oncdataend() { }\r\n    oncdatastart() { }\r\n    oncomment(data) { }\r\n    oncommentend() { }\r\n    onend() { }\r\n    onerror(error) { }\r\n    onopentagname(name) { }\r\n    onparserinit(parser) { }\r\n    onprocessinginstruction(name, data) { }\r\n    onreset() { }\r\n}\r\nclass HTMLParser {\r\n    static parse(html) {\r\n        if (!html) {\r\n            return [html, []];\r\n        }\r\n        const handler = new HTMLToTelegramParser();\r\n        const parser = new htmlparser2_1.Parser(handler);\r\n        parser.write(html);\r\n        parser.end();\r\n        const text = index_1.helpers.stripText(handler.text, handler.entities);\r\n        return [text, handler.entities];\r\n    }\r\n    static unparse(text, entities, _offset = 0, _length) {\r\n        if (!text || !entities || !entities.length) {\r\n            return text;\r\n        }\r\n        if (_length == undefined) {\r\n            _length = text.length;\r\n        }\r\n        const html = [];\r\n        let lastOffset = 0;\r\n        for (let i = 0; i < entities.length; i++) {\r\n            const entity = entities[i];\r\n            if (entity.offset >= _offset + _length) {\r\n                break;\r\n            }\r\n            let relativeOffset = entity.offset - _offset;\r\n            if (relativeOffset > lastOffset) {\r\n                html.push(text.slice(lastOffset, relativeOffset));\r\n            }\r\n            else if (relativeOffset < lastOffset) {\r\n                continue;\r\n            }\r\n            let skipEntity = false;\r\n            let length = entity.length;\r\n            let entityText = this.unparse(text.slice(relativeOffset, relativeOffset + length), entities.slice(i + 1, entities.length), entity.offset, length);\r\n            if (entity instanceof tl_1.Api.MessageEntityBold) {\r\n                html.push(`<strong>${entityText}</strong>`);\r\n            }\r\n            else if (entity instanceof tl_1.Api.MessageEntitySpoiler) {\r\n                html.push(`<spoiler>${entityText}</spoiler>`);\r\n            }\r\n            else if (entity instanceof tl_1.Api.MessageEntityItalic) {\r\n                html.push(`<em>${entityText}</em>`);\r\n            }\r\n            else if (entity instanceof tl_1.Api.MessageEntityCode) {\r\n                html.push(`<code>${entityText}</code>`);\r\n            }\r\n            else if (entity instanceof tl_1.Api.MessageEntityUnderline) {\r\n                html.push(`<u>${entityText}</u>`);\r\n            }\r\n            else if (entity instanceof tl_1.Api.MessageEntityStrike) {\r\n                html.push(`<del>${entityText}</del>`);\r\n            }\r\n            else if (entity instanceof tl_1.Api.MessageEntityBlockquote) {\r\n                html.push(`<blockquote>${entityText}</blockquote>`);\r\n            }\r\n            else if (entity instanceof tl_1.Api.MessageEntityPre) {\r\n                if (entity.language) {\r\n                    html.push(`<pre>\r\n<code class=\"language-${entity.language}\">\r\n    ${entityText}\r\n</code>\r\n</pre>`);\r\n                }\r\n                else {\r\n                    html.push(`<pre></pre><code>${entityText}</code><pre>`);\r\n                }\r\n            }\r\n            else if (entity instanceof tl_1.Api.MessageEntityEmail) {\r\n                html.push(`<a href=\"mailto:${entityText}\">${entityText}</a>`);\r\n            }\r\n            else if (entity instanceof tl_1.Api.MessageEntityUrl) {\r\n                html.push(`<a href=\"${entityText}\">${entityText}</a>`);\r\n            }\r\n            else if (entity instanceof tl_1.Api.MessageEntityTextUrl) {\r\n                html.push(`<a href=\"${entity.url}\">${entityText}</a>`);\r\n            }\r\n            else if (entity instanceof tl_1.Api.MessageEntityMentionName) {\r\n                html.push(`<a href=\"tg://user?id=${entity.userId}\">${entityText}</a>`);\r\n            }\r\n            else {\r\n                skipEntity = true;\r\n            }\r\n            lastOffset = relativeOffset + (skipEntity ? 0 : length);\r\n        }\r\n        html.push(text.slice(lastOffset, text.length));\r\n        return html.join(\"\");\r\n    }\r\n}\r\nexports.HTMLParser = HTMLParser;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}