{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _createForOfIteratorHelper = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.doAuthentication = void 0;\nvar buffer_1 = require(\"buffer/\");\nvar Helpers_1 = require(\"../Helpers\");\nvar tl_1 = require(\"../tl\");\nvar errors_1 = require(\"../errors\");\nvar Factorizator_1 = require(\"../crypto/Factorizator\");\nvar RSA_1 = require(\"../crypto/RSA\");\nvar IGE_1 = require(\"../crypto/IGE\");\nvar big_integer_1 = __importDefault(require(\"big-integer\"));\nvar extensions_1 = require(\"../extensions\");\nvar AuthKey_1 = require(\"../crypto/AuthKey\");\nvar RETRIES = 20;\nfunction doAuthentication(_x, _x2) {\n  return _doAuthentication.apply(this, arguments);\n}\nfunction _doAuthentication() {\n  _doAuthentication = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(sender, log) {\n    var bytes, nonce, resPQ, pq, _Factorizator_1$Facto, p, q, pBuffer, qBuffer, newNonce, pqInnerData, targetFingerprint, targetKey, _iterator, _step, fingerprint, padding, dataWithPadding, dataPadReversed, encryptedData, i, tempKey, shaDigestKeyWithData, dataWithHash, _ige, aesEncrypted, tempKeyXor, keyAesEncrypted, keyAesEncryptedInt, encryptedDataBuffer, serverDhParams, sh, nnh, _yield, key, iv, ige, plainTextAnswer, reader, serverDhInner, dhPrime, ga, timeOffset, b, gb, gab, clientDhInner, clientDdhInnerHashed, clientDhEncrypted, dhGen, nonceTypes, nonceTypesString, name, authKey, nonceNumber, newNonceHash, dhHash;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          // Step 1 sending: PQ Request, endianness doesn't matter since it's random\n          bytes = (0, Helpers_1.generateRandomBytes)(16);\n          nonce = (0, Helpers_1.readBigIntFromBuffer)(bytes, false, true);\n          _context.next = 4;\n          return sender.send(new tl_1.Api.ReqPqMulti({\n            nonce: nonce\n          }));\n        case 4:\n          resPQ = _context.sent;\n          log.debug(\"Starting authKey generation step 1\");\n          if (resPQ instanceof tl_1.Api.ResPQ) {\n            _context.next = 8;\n            break;\n          }\n          throw new errors_1.SecurityError(\"Step 1 answer was \".concat(resPQ));\n        case 8:\n          if (!resPQ.nonce.neq(nonce)) {\n            _context.next = 10;\n            break;\n          }\n          throw new errors_1.SecurityError(\"Step 1 invalid nonce from server\");\n        case 10:\n          pq = (0, Helpers_1.readBigIntFromBuffer)(resPQ.pq, false, true);\n          log.debug(\"Finished authKey generation step 1\");\n          // Step 2 sending: DH Exchange\n          _Factorizator_1$Facto = Factorizator_1.Factorizator.factorize(pq), p = _Factorizator_1$Facto.p, q = _Factorizator_1$Facto.q;\n          pBuffer = (0, Helpers_1.getByteArray)(p);\n          qBuffer = (0, Helpers_1.getByteArray)(q);\n          bytes = (0, Helpers_1.generateRandomBytes)(32);\n          newNonce = (0, Helpers_1.readBigIntFromBuffer)(bytes, true, true);\n          pqInnerData = new tl_1.Api.PQInnerData({\n            pq: (0, Helpers_1.getByteArray)(pq),\n            p: pBuffer,\n            q: qBuffer,\n            nonce: resPQ.nonce,\n            serverNonce: resPQ.serverNonce,\n            newNonce: newNonce\n          }).getBytes();\n          if (!(pqInnerData.length > 144)) {\n            _context.next = 20;\n            break;\n          }\n          throw new errors_1.SecurityError(\"Step 1 invalid nonce from server\");\n        case 20:\n          _iterator = _createForOfIteratorHelper(resPQ.serverPublicKeyFingerprints);\n          _context.prev = 21;\n          _iterator.s();\n        case 23:\n          if ((_step = _iterator.n()).done) {\n            _context.next = 31;\n            break;\n          }\n          fingerprint = _step.value;\n          targetKey = RSA_1._serverKeys.get(fingerprint.toString());\n          if (!(targetKey !== undefined)) {\n            _context.next = 29;\n            break;\n          }\n          targetFingerprint = fingerprint;\n          return _context.abrupt(\"break\", 31);\n        case 29:\n          _context.next = 23;\n          break;\n        case 31:\n          _context.next = 36;\n          break;\n        case 33:\n          _context.prev = 33;\n          _context.t0 = _context[\"catch\"](21);\n          _iterator.e(_context.t0);\n        case 36:\n          _context.prev = 36;\n          _iterator.f();\n          return _context.finish(36);\n        case 39:\n          if (!(targetFingerprint === undefined || targetKey === undefined)) {\n            _context.next = 41;\n            break;\n          }\n          throw new errors_1.SecurityError(\"Step 2 could not find a valid key for fingerprints\");\n        case 41:\n          // Value should be padded to be made 192 exactly\n          padding = (0, Helpers_1.generateRandomBytes)(192 - pqInnerData.length);\n          dataWithPadding = buffer_1.Buffer.concat([pqInnerData, padding]);\n          dataPadReversed = buffer_1.Buffer.from(dataWithPadding).reverse();\n          i = 0;\n        case 45:\n          if (!(i < RETRIES)) {\n            _context.next = 70;\n            break;\n          }\n          tempKey = (0, Helpers_1.generateRandomBytes)(32);\n          _context.next = 49;\n          return (0, Helpers_1.sha256)(buffer_1.Buffer.concat([tempKey, dataWithPadding]));\n        case 49:\n          shaDigestKeyWithData = _context.sent;\n          dataWithHash = buffer_1.Buffer.concat([dataPadReversed, shaDigestKeyWithData]);\n          _ige = new IGE_1.IGE(tempKey, buffer_1.Buffer.alloc(32));\n          aesEncrypted = _ige.encryptIge(dataWithHash);\n          _context.t1 = (0, Helpers_1.bufferXor);\n          _context.t2 = tempKey;\n          _context.next = 57;\n          return (0, Helpers_1.sha256)(aesEncrypted);\n        case 57:\n          _context.t3 = _context.sent;\n          tempKeyXor = (0, _context.t1)(_context.t2, _context.t3);\n          keyAesEncrypted = buffer_1.Buffer.concat([tempKeyXor, aesEncrypted]);\n          keyAesEncryptedInt = (0, Helpers_1.readBigIntFromBuffer)(keyAesEncrypted, false, false);\n          if (!keyAesEncryptedInt.greaterOrEquals(targetKey.n)) {\n            _context.next = 64;\n            break;\n          }\n          log.debug(\"Aes key greater than RSA. retrying\");\n          return _context.abrupt(\"continue\", 67);\n        case 64:\n          encryptedDataBuffer = (0, Helpers_1.modExp)(keyAesEncryptedInt, (0, big_integer_1.default)(targetKey.e), targetKey.n);\n          encryptedData = (0, Helpers_1.readBufferFromBigInt)(encryptedDataBuffer, 256, false, false);\n          return _context.abrupt(\"break\", 70);\n        case 67:\n          i++;\n          _context.next = 45;\n          break;\n        case 70:\n          if (!(encryptedData === undefined)) {\n            _context.next = 72;\n            break;\n          }\n          throw new errors_1.SecurityError(\"Step 2 could create a secure encrypted key\");\n        case 72:\n          log.debug(\"Step 2 : Generated a secure aes encrypted data\");\n          _context.next = 75;\n          return sender.send(new tl_1.Api.ReqDHParams({\n            nonce: resPQ.nonce,\n            serverNonce: resPQ.serverNonce,\n            p: pBuffer,\n            q: qBuffer,\n            publicKeyFingerprint: targetFingerprint,\n            encryptedData: encryptedData\n          }));\n        case 75:\n          serverDhParams = _context.sent;\n          if (serverDhParams instanceof tl_1.Api.ServerDHParamsOk || serverDhParams instanceof tl_1.Api.ServerDHParamsFail) {\n            _context.next = 78;\n            break;\n          }\n          throw new Error(\"Step 2.1 answer was \".concat(serverDhParams));\n        case 78:\n          if (!serverDhParams.nonce.neq(resPQ.nonce)) {\n            _context.next = 80;\n            break;\n          }\n          throw new errors_1.SecurityError(\"Step 2 invalid nonce from server\");\n        case 80:\n          if (!serverDhParams.serverNonce.neq(resPQ.serverNonce)) {\n            _context.next = 82;\n            break;\n          }\n          throw new errors_1.SecurityError(\"Step 2 invalid server nonce from server\");\n        case 82:\n          if (!(serverDhParams instanceof tl_1.Api.ServerDHParamsFail)) {\n            _context.next = 89;\n            break;\n          }\n          _context.next = 85;\n          return (0, Helpers_1.sha1)((0, Helpers_1.toSignedLittleBuffer)(newNonce, 32).slice(4, 20));\n        case 85:\n          sh = _context.sent;\n          nnh = (0, Helpers_1.readBigIntFromBuffer)(sh, true, true);\n          if (!serverDhParams.newNonceHash.neq(nnh)) {\n            _context.next = 89;\n            break;\n          }\n          throw new errors_1.SecurityError(\"Step 2 invalid DH fail nonce from server\");\n        case 89:\n          if (serverDhParams instanceof tl_1.Api.ServerDHParamsOk) {\n            _context.next = 91;\n            break;\n          }\n          throw new Error(\"Step 2.2 answer was \".concat(serverDhParams));\n        case 91:\n          log.debug(\"Finished authKey generation step 2\");\n          log.debug(\"Starting authKey generation step 3\");\n          // Step 3 sending: Complete DH Exchange\n          _context.next = 95;\n          return (0, Helpers_1.generateKeyDataFromNonce)(resPQ.serverNonce, newNonce);\n        case 95:\n          _yield = _context.sent;\n          key = _yield.key;\n          iv = _yield.iv;\n          if (!(serverDhParams.encryptedAnswer.length % 16 !== 0)) {\n            _context.next = 100;\n            break;\n          }\n          throw new errors_1.SecurityError(\"Step 3 AES block size mismatch\");\n        case 100:\n          ige = new IGE_1.IGE(key, iv);\n          plainTextAnswer = ige.decryptIge(serverDhParams.encryptedAnswer);\n          reader = new extensions_1.BinaryReader(plainTextAnswer);\n          reader.read(20); // hash sum\n          serverDhInner = reader.tgReadObject();\n          if (serverDhInner instanceof tl_1.Api.ServerDHInnerData) {\n            _context.next = 107;\n            break;\n          }\n          throw new Error(\"Step 3 answer was \".concat(serverDhInner));\n        case 107:\n          if (!serverDhInner.nonce.neq(resPQ.nonce)) {\n            _context.next = 109;\n            break;\n          }\n          throw new errors_1.SecurityError(\"Step 3 Invalid nonce in encrypted answer\");\n        case 109:\n          if (!serverDhInner.serverNonce.neq(resPQ.serverNonce)) {\n            _context.next = 111;\n            break;\n          }\n          throw new errors_1.SecurityError(\"Step 3 Invalid server nonce in encrypted answer\");\n        case 111:\n          dhPrime = (0, Helpers_1.readBigIntFromBuffer)(serverDhInner.dhPrime, false, false);\n          ga = (0, Helpers_1.readBigIntFromBuffer)(serverDhInner.gA, false, false);\n          timeOffset = serverDhInner.serverTime - Math.floor(new Date().getTime() / 1000);\n          b = (0, Helpers_1.readBigIntFromBuffer)((0, Helpers_1.generateRandomBytes)(256), false, false);\n          gb = (0, Helpers_1.modExp)((0, big_integer_1.default)(serverDhInner.g), b, dhPrime);\n          gab = (0, Helpers_1.modExp)(ga, b, dhPrime); // Prepare client DH Inner Data\n          clientDhInner = new tl_1.Api.ClientDHInnerData({\n            nonce: resPQ.nonce,\n            serverNonce: resPQ.serverNonce,\n            retryId: big_integer_1.default.zero,\n            gB: (0, Helpers_1.getByteArray)(gb, false)\n          }).getBytes();\n          _context.t4 = buffer_1.Buffer;\n          _context.next = 121;\n          return (0, Helpers_1.sha1)(clientDhInner);\n        case 121:\n          _context.t5 = _context.sent;\n          _context.t6 = clientDhInner;\n          _context.t7 = [_context.t5, _context.t6];\n          clientDdhInnerHashed = _context.t4.concat.call(_context.t4, _context.t7);\n          // Encryption\n          clientDhEncrypted = ige.encryptIge(clientDdhInnerHashed);\n          _context.next = 128;\n          return sender.send(new tl_1.Api.SetClientDHParams({\n            nonce: resPQ.nonce,\n            serverNonce: resPQ.serverNonce,\n            encryptedData: clientDhEncrypted\n          }));\n        case 128:\n          dhGen = _context.sent;\n          nonceTypes = [tl_1.Api.DhGenOk, tl_1.Api.DhGenRetry, tl_1.Api.DhGenFail]; // TS being weird again.\n          nonceTypesString = [\"DhGenOk\", \"DhGenRetry\", \"DhGenFail\"];\n          if (dhGen instanceof nonceTypes[0] || dhGen instanceof nonceTypes[1] || dhGen instanceof nonceTypes[2]) {\n            _context.next = 133;\n            break;\n          }\n          throw new Error(\"Step 3.1 answer was \".concat(dhGen));\n        case 133:\n          name = dhGen.constructor.name;\n          if (!dhGen.nonce.neq(resPQ.nonce)) {\n            _context.next = 136;\n            break;\n          }\n          throw new errors_1.SecurityError(\"Step 3 invalid \".concat(name, \" nonce from server\"));\n        case 136:\n          if (!dhGen.serverNonce.neq(resPQ.serverNonce)) {\n            _context.next = 138;\n            break;\n          }\n          throw new errors_1.SecurityError(\"Step 3 invalid \".concat(name, \" server nonce from server\"));\n        case 138:\n          authKey = new AuthKey_1.AuthKey();\n          _context.next = 141;\n          return authKey.setKey((0, Helpers_1.getByteArray)(gab));\n        case 141:\n          nonceNumber = 1 + nonceTypesString.indexOf(dhGen.className);\n          _context.next = 144;\n          return authKey.calcNewNonceHash(newNonce, nonceNumber);\n        case 144:\n          newNonceHash = _context.sent;\n          // @ts-ignore\n          dhHash = dhGen[\"newNonceHash\".concat(nonceNumber)];\n          if (!dhHash.neq(newNonceHash)) {\n            _context.next = 148;\n            break;\n          }\n          throw new errors_1.SecurityError(\"Step 3 invalid new nonce hash\");\n        case 148:\n          if (dhGen instanceof tl_1.Api.DhGenOk) {\n            _context.next = 150;\n            break;\n          }\n          throw new Error(\"Step 3.2 answer was \".concat(dhGen));\n        case 150:\n          log.debug(\"Finished authKey generation step 3\");\n          return _context.abrupt(\"return\", {\n            authKey: authKey,\n            timeOffset: timeOffset\n          });\n        case 152:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[21, 33, 36, 39]]);\n  }));\n  return _doAuthentication.apply(this, arguments);\n}\nexports.doAuthentication = doAuthentication;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","doAuthentication","buffer_1","require","Helpers_1","tl_1","errors_1","Factorizator_1","RSA_1","IGE_1","big_integer_1","extensions_1","AuthKey_1","RETRIES","sender","log","bytes","generateRandomBytes","nonce","readBigIntFromBuffer","send","Api","ReqPqMulti","resPQ","debug","ResPQ","SecurityError","neq","pq","Factorizator","factorize","p","q","pBuffer","getByteArray","qBuffer","newNonce","pqInnerData","PQInnerData","serverNonce","getBytes","length","serverPublicKeyFingerprints","fingerprint","targetKey","_serverKeys","get","toString","undefined","targetFingerprint","padding","dataWithPadding","Buffer","concat","dataPadReversed","from","reverse","i","tempKey","sha256","shaDigestKeyWithData","dataWithHash","ige","IGE","alloc","aesEncrypted","encryptIge","bufferXor","tempKeyXor","keyAesEncrypted","keyAesEncryptedInt","greaterOrEquals","n","encryptedDataBuffer","modExp","default","e","encryptedData","readBufferFromBigInt","ReqDHParams","publicKeyFingerprint","serverDhParams","ServerDHParamsOk","ServerDHParamsFail","Error","sha1","toSignedLittleBuffer","slice","sh","nnh","newNonceHash","generateKeyDataFromNonce","key","iv","encryptedAnswer","plainTextAnswer","decryptIge","reader","BinaryReader","read","serverDhInner","tgReadObject","ServerDHInnerData","dhPrime","ga","gA","timeOffset","serverTime","Math","floor","Date","getTime","b","gb","g","gab","clientDhInner","ClientDHInnerData","retryId","zero","gB","clientDdhInnerHashed","clientDhEncrypted","SetClientDHParams","dhGen","nonceTypes","DhGenOk","DhGenRetry","DhGenFail","nonceTypesString","name","constructor","authKey","AuthKey","setKey","nonceNumber","indexOf","className","calcNewNonceHash","dhHash"],"sources":["C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/telegram/network/Authenticator.js"],"sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.doAuthentication = void 0;\r\nconst buffer_1 = require(\"buffer/\");\r\nconst Helpers_1 = require(\"../Helpers\");\r\nconst tl_1 = require(\"../tl\");\r\nconst errors_1 = require(\"../errors\");\r\nconst Factorizator_1 = require(\"../crypto/Factorizator\");\r\nconst RSA_1 = require(\"../crypto/RSA\");\r\nconst IGE_1 = require(\"../crypto/IGE\");\r\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\r\nconst extensions_1 = require(\"../extensions\");\r\nconst AuthKey_1 = require(\"../crypto/AuthKey\");\r\nconst RETRIES = 20;\r\nasync function doAuthentication(sender, log) {\r\n    // Step 1 sending: PQ Request, endianness doesn't matter since it's random\r\n    let bytes = (0, Helpers_1.generateRandomBytes)(16);\r\n    const nonce = (0, Helpers_1.readBigIntFromBuffer)(bytes, false, true);\r\n    const resPQ = await sender.send(new tl_1.Api.ReqPqMulti({ nonce }));\r\n    log.debug(\"Starting authKey generation step 1\");\r\n    if (!(resPQ instanceof tl_1.Api.ResPQ)) {\r\n        throw new errors_1.SecurityError(`Step 1 answer was ${resPQ}`);\r\n    }\r\n    if (resPQ.nonce.neq(nonce)) {\r\n        throw new errors_1.SecurityError(\"Step 1 invalid nonce from server\");\r\n    }\r\n    const pq = (0, Helpers_1.readBigIntFromBuffer)(resPQ.pq, false, true);\r\n    log.debug(\"Finished authKey generation step 1\");\r\n    // Step 2 sending: DH Exchange\r\n    const { p, q } = Factorizator_1.Factorizator.factorize(pq);\r\n    const pBuffer = (0, Helpers_1.getByteArray)(p);\r\n    const qBuffer = (0, Helpers_1.getByteArray)(q);\r\n    bytes = (0, Helpers_1.generateRandomBytes)(32);\r\n    const newNonce = (0, Helpers_1.readBigIntFromBuffer)(bytes, true, true);\r\n    const pqInnerData = new tl_1.Api.PQInnerData({\r\n        pq: (0, Helpers_1.getByteArray)(pq),\r\n        p: pBuffer,\r\n        q: qBuffer,\r\n        nonce: resPQ.nonce,\r\n        serverNonce: resPQ.serverNonce,\r\n        newNonce,\r\n    }).getBytes();\r\n    if (pqInnerData.length > 144) {\r\n        throw new errors_1.SecurityError(\"Step 1 invalid nonce from server\");\r\n    }\r\n    let targetFingerprint;\r\n    let targetKey;\r\n    for (const fingerprint of resPQ.serverPublicKeyFingerprints) {\r\n        targetKey = RSA_1._serverKeys.get(fingerprint.toString());\r\n        if (targetKey !== undefined) {\r\n            targetFingerprint = fingerprint;\r\n            break;\r\n        }\r\n    }\r\n    if (targetFingerprint === undefined || targetKey === undefined) {\r\n        throw new errors_1.SecurityError(\"Step 2 could not find a valid key for fingerprints\");\r\n    }\r\n    // Value should be padded to be made 192 exactly\r\n    const padding = (0, Helpers_1.generateRandomBytes)(192 - pqInnerData.length);\r\n    const dataWithPadding = buffer_1.Buffer.concat([pqInnerData, padding]);\r\n    const dataPadReversed = buffer_1.Buffer.from(dataWithPadding).reverse();\r\n    let encryptedData;\r\n    for (let i = 0; i < RETRIES; i++) {\r\n        const tempKey = (0, Helpers_1.generateRandomBytes)(32);\r\n        const shaDigestKeyWithData = await (0, Helpers_1.sha256)(buffer_1.Buffer.concat([tempKey, dataWithPadding]));\r\n        const dataWithHash = buffer_1.Buffer.concat([\r\n            dataPadReversed,\r\n            shaDigestKeyWithData,\r\n        ]);\r\n        const ige = new IGE_1.IGE(tempKey, buffer_1.Buffer.alloc(32));\r\n        const aesEncrypted = ige.encryptIge(dataWithHash);\r\n        const tempKeyXor = (0, Helpers_1.bufferXor)(tempKey, await (0, Helpers_1.sha256)(aesEncrypted));\r\n        const keyAesEncrypted = buffer_1.Buffer.concat([tempKeyXor, aesEncrypted]);\r\n        const keyAesEncryptedInt = (0, Helpers_1.readBigIntFromBuffer)(keyAesEncrypted, false, false);\r\n        if (keyAesEncryptedInt.greaterOrEquals(targetKey.n)) {\r\n            log.debug(\"Aes key greater than RSA. retrying\");\r\n            continue;\r\n        }\r\n        const encryptedDataBuffer = (0, Helpers_1.modExp)(keyAesEncryptedInt, (0, big_integer_1.default)(targetKey.e), targetKey.n);\r\n        encryptedData = (0, Helpers_1.readBufferFromBigInt)(encryptedDataBuffer, 256, false, false);\r\n        break;\r\n    }\r\n    if (encryptedData === undefined) {\r\n        throw new errors_1.SecurityError(\"Step 2 could create a secure encrypted key\");\r\n    }\r\n    log.debug(\"Step 2 : Generated a secure aes encrypted data\");\r\n    const serverDhParams = await sender.send(new tl_1.Api.ReqDHParams({\r\n        nonce: resPQ.nonce,\r\n        serverNonce: resPQ.serverNonce,\r\n        p: pBuffer,\r\n        q: qBuffer,\r\n        publicKeyFingerprint: targetFingerprint,\r\n        encryptedData,\r\n    }));\r\n    if (!(serverDhParams instanceof tl_1.Api.ServerDHParamsOk ||\r\n        serverDhParams instanceof tl_1.Api.ServerDHParamsFail)) {\r\n        throw new Error(`Step 2.1 answer was ${serverDhParams}`);\r\n    }\r\n    if (serverDhParams.nonce.neq(resPQ.nonce)) {\r\n        throw new errors_1.SecurityError(\"Step 2 invalid nonce from server\");\r\n    }\r\n    if (serverDhParams.serverNonce.neq(resPQ.serverNonce)) {\r\n        throw new errors_1.SecurityError(\"Step 2 invalid server nonce from server\");\r\n    }\r\n    if (serverDhParams instanceof tl_1.Api.ServerDHParamsFail) {\r\n        const sh = await (0, Helpers_1.sha1)((0, Helpers_1.toSignedLittleBuffer)(newNonce, 32).slice(4, 20));\r\n        const nnh = (0, Helpers_1.readBigIntFromBuffer)(sh, true, true);\r\n        if (serverDhParams.newNonceHash.neq(nnh)) {\r\n            throw new errors_1.SecurityError(\"Step 2 invalid DH fail nonce from server\");\r\n        }\r\n    }\r\n    if (!(serverDhParams instanceof tl_1.Api.ServerDHParamsOk)) {\r\n        throw new Error(`Step 2.2 answer was ${serverDhParams}`);\r\n    }\r\n    log.debug(\"Finished authKey generation step 2\");\r\n    log.debug(\"Starting authKey generation step 3\");\r\n    // Step 3 sending: Complete DH Exchange\r\n    const { key, iv } = await (0, Helpers_1.generateKeyDataFromNonce)(resPQ.serverNonce, newNonce);\r\n    if (serverDhParams.encryptedAnswer.length % 16 !== 0) {\r\n        // See PR#453\r\n        throw new errors_1.SecurityError(\"Step 3 AES block size mismatch\");\r\n    }\r\n    const ige = new IGE_1.IGE(key, iv);\r\n    const plainTextAnswer = ige.decryptIge(serverDhParams.encryptedAnswer);\r\n    const reader = new extensions_1.BinaryReader(plainTextAnswer);\r\n    reader.read(20); // hash sum\r\n    const serverDhInner = reader.tgReadObject();\r\n    if (!(serverDhInner instanceof tl_1.Api.ServerDHInnerData)) {\r\n        throw new Error(`Step 3 answer was ${serverDhInner}`);\r\n    }\r\n    if (serverDhInner.nonce.neq(resPQ.nonce)) {\r\n        throw new errors_1.SecurityError(\"Step 3 Invalid nonce in encrypted answer\");\r\n    }\r\n    if (serverDhInner.serverNonce.neq(resPQ.serverNonce)) {\r\n        throw new errors_1.SecurityError(\"Step 3 Invalid server nonce in encrypted answer\");\r\n    }\r\n    const dhPrime = (0, Helpers_1.readBigIntFromBuffer)(serverDhInner.dhPrime, false, false);\r\n    const ga = (0, Helpers_1.readBigIntFromBuffer)(serverDhInner.gA, false, false);\r\n    const timeOffset = serverDhInner.serverTime - Math.floor(new Date().getTime() / 1000);\r\n    const b = (0, Helpers_1.readBigIntFromBuffer)((0, Helpers_1.generateRandomBytes)(256), false, false);\r\n    const gb = (0, Helpers_1.modExp)((0, big_integer_1.default)(serverDhInner.g), b, dhPrime);\r\n    const gab = (0, Helpers_1.modExp)(ga, b, dhPrime);\r\n    // Prepare client DH Inner Data\r\n    const clientDhInner = new tl_1.Api.ClientDHInnerData({\r\n        nonce: resPQ.nonce,\r\n        serverNonce: resPQ.serverNonce,\r\n        retryId: big_integer_1.default.zero,\r\n        gB: (0, Helpers_1.getByteArray)(gb, false),\r\n    }).getBytes();\r\n    const clientDdhInnerHashed = buffer_1.Buffer.concat([\r\n        await (0, Helpers_1.sha1)(clientDhInner),\r\n        clientDhInner,\r\n    ]);\r\n    // Encryption\r\n    const clientDhEncrypted = ige.encryptIge(clientDdhInnerHashed);\r\n    const dhGen = await sender.send(new tl_1.Api.SetClientDHParams({\r\n        nonce: resPQ.nonce,\r\n        serverNonce: resPQ.serverNonce,\r\n        encryptedData: clientDhEncrypted,\r\n    }));\r\n    const nonceTypes = [tl_1.Api.DhGenOk, tl_1.Api.DhGenRetry, tl_1.Api.DhGenFail];\r\n    // TS being weird again.\r\n    const nonceTypesString = [\"DhGenOk\", \"DhGenRetry\", \"DhGenFail\"];\r\n    if (!(dhGen instanceof nonceTypes[0] ||\r\n        dhGen instanceof nonceTypes[1] ||\r\n        dhGen instanceof nonceTypes[2])) {\r\n        throw new Error(`Step 3.1 answer was ${dhGen}`);\r\n    }\r\n    const { name } = dhGen.constructor;\r\n    if (dhGen.nonce.neq(resPQ.nonce)) {\r\n        throw new errors_1.SecurityError(`Step 3 invalid ${name} nonce from server`);\r\n    }\r\n    if (dhGen.serverNonce.neq(resPQ.serverNonce)) {\r\n        throw new errors_1.SecurityError(`Step 3 invalid ${name} server nonce from server`);\r\n    }\r\n    const authKey = new AuthKey_1.AuthKey();\r\n    await authKey.setKey((0, Helpers_1.getByteArray)(gab));\r\n    const nonceNumber = 1 + nonceTypesString.indexOf(dhGen.className);\r\n    const newNonceHash = await authKey.calcNewNonceHash(newNonce, nonceNumber);\r\n    // @ts-ignore\r\n    const dhHash = dhGen[`newNonceHash${nonceNumber}`];\r\n    if (dhHash.neq(newNonceHash)) {\r\n        throw new errors_1.SecurityError(\"Step 3 invalid new nonce hash\");\r\n    }\r\n    if (!(dhGen instanceof tl_1.Api.DhGenOk)) {\r\n        throw new Error(`Step 3.2 answer was ${dhGen}`);\r\n    }\r\n    log.debug(\"Finished authKey generation step 3\");\r\n    return { authKey, timeOffset };\r\n}\r\nexports.doAuthentication = doAuthentication;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}