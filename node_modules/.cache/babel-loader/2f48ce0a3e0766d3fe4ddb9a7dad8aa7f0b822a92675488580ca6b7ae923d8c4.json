{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NewMessageEvent = exports.NewMessage = void 0;\nvar common_1 = require(\"./common\");\nvar tl_1 = require(\"../tl\");\nvar Logger_1 = require(\"../extensions/Logger\");\n/**\r\n * Occurs whenever a new text message or a message with media arrives.\r\n * @example\r\n * ```ts\r\n * async function eventPrint(event: NewMessageEvent) {\r\n * const message = event.message;\r\n *\r\n *   // Checks if it's a private message (from user or bot)\r\n *   if (event.isPrivate){\r\n *       // prints sender id\r\n *       console.log(message.senderId);\r\n *       // read message\r\n *       if (message.text == \"hello\"){\r\n *           const sender = await message.getSender();\r\n *           console.log(\"sender is\",sender);\r\n *           await client.sendMessage(sender,{\r\n *               message:`hi your id is ${message.senderId}`\r\n *           });\r\n *       }\r\n *   }\r\n * }\r\n * // adds an event handler for new messages\r\n * client.addEventHandler(eventPrint, new NewMessage({}));\r\n * ```\r\n */\nvar NewMessage = /*#__PURE__*/function (_common_1$EventBuilde) {\n  _inherits(NewMessage, _common_1$EventBuilde);\n  var _super = _createSuper(NewMessage);\n  function NewMessage() {\n    var _this;\n    var newMessageParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, NewMessage);\n    var chats = newMessageParams.chats,\n      func = newMessageParams.func,\n      incoming = newMessageParams.incoming,\n      outgoing = newMessageParams.outgoing,\n      fromUsers = newMessageParams.fromUsers,\n      forwards = newMessageParams.forwards,\n      pattern = newMessageParams.pattern,\n      _newMessageParams$bla = newMessageParams.blacklistChats,\n      blacklistChats = _newMessageParams$bla === void 0 ? false : _newMessageParams$bla;\n    if (incoming && outgoing) {\n      incoming = outgoing = undefined;\n    } else if (incoming != undefined && outgoing == undefined) {\n      outgoing = !incoming;\n    } else if (outgoing != undefined && incoming == undefined) {\n      incoming = !outgoing;\n    } else if (outgoing == false && incoming == false) {\n      throw new Error(\"Don't create an event handler if you don't want neither incoming nor outgoing!\");\n    }\n    _this = _super.call(this, {\n      chats: chats,\n      blacklistChats: blacklistChats,\n      func: func\n    });\n    _this.incoming = incoming;\n    _this.outgoing = outgoing;\n    _this.fromUsers = fromUsers;\n    _this.forwards = forwards;\n    _this.pattern = pattern;\n    _this._noCheck = [incoming, outgoing, chats, pattern, fromUsers, forwards, func].every(function (v) {\n      return v == undefined;\n    });\n    return _this;\n  }\n  _createClass(NewMessage, [{\n    key: \"_resolve\",\n    value: function () {\n      var _resolve2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(client) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _get(_getPrototypeOf(NewMessage.prototype), \"_resolve\", this).call(this, client);\n            case 2:\n              _context.next = 4;\n              return (0, common_1._intoIdSet)(client, this.fromUsers);\n            case 4:\n              this.fromUsers = _context.sent;\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function _resolve(_x) {\n        return _resolve2.apply(this, arguments);\n      }\n      return _resolve;\n    }()\n  }, {\n    key: \"build\",\n    value: function build(update, callback, selfId) {\n      if (update instanceof tl_1.Api.UpdateNewMessage || update instanceof tl_1.Api.UpdateNewChannelMessage) {\n        if (!(update.message instanceof tl_1.Api.Message)) {\n          return undefined;\n        }\n        var event = new NewMessageEvent(update.message, update);\n        this.addAttributes(event);\n        return event;\n      } else if (update instanceof tl_1.Api.UpdateShortMessage) {\n        return new NewMessageEvent(new tl_1.Api.Message({\n          out: update.out,\n          mentioned: update.mentioned,\n          mediaUnread: update.mediaUnread,\n          silent: update.silent,\n          id: update.id,\n          peerId: new tl_1.Api.PeerUser({\n            userId: update.userId\n          }),\n          fromId: new tl_1.Api.PeerUser({\n            userId: update.out ? selfId : update.userId\n          }),\n          message: update.message,\n          date: update.date,\n          fwdFrom: update.fwdFrom,\n          viaBotId: update.viaBotId,\n          replyTo: update.replyTo,\n          entities: update.entities,\n          ttlPeriod: update.ttlPeriod\n        }), update);\n      } else if (update instanceof tl_1.Api.UpdateShortChatMessage) {\n        return new NewMessageEvent(new tl_1.Api.Message({\n          out: update.out,\n          mentioned: update.mentioned,\n          mediaUnread: update.mediaUnread,\n          silent: update.silent,\n          id: update.id,\n          peerId: new tl_1.Api.PeerChat({\n            chatId: update.chatId\n          }),\n          fromId: new tl_1.Api.PeerUser({\n            userId: update.out ? selfId : update.fromId\n          }),\n          message: update.message,\n          date: update.date,\n          fwdFrom: update.fwdFrom,\n          viaBotId: update.viaBotId,\n          replyTo: update.replyTo,\n          entities: update.entities,\n          ttlPeriod: update.ttlPeriod\n        }), update);\n      }\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(event) {\n      var _a;\n      if (this._noCheck) {\n        return event;\n      }\n      if (this.incoming && event.message.out) {\n        return;\n      }\n      if (this.outgoing && !event.message.out) {\n        return;\n      }\n      if (this.forwards != undefined) {\n        if (this.forwards != !!event.message.fwdFrom) {\n          return;\n        }\n      }\n      if (this.fromUsers != undefined) {\n        if (!event.message.senderId || !this.fromUsers.includes(event.message.senderId.toString())) {\n          return;\n        }\n      }\n      if (this.pattern) {\n        var match = (_a = event.message.message) === null || _a === void 0 ? void 0 : _a.match(this.pattern);\n        if (!match) {\n          return;\n        }\n        event.message.patternMatch = match;\n      }\n      return _get(_getPrototypeOf(NewMessage.prototype), \"filter\", this).call(this, event);\n    }\n  }, {\n    key: \"addAttributes\",\n    value: function addAttributes(update) {\n      //update.patternMatch =\n    }\n  }]);\n  return NewMessage;\n}(common_1.EventBuilder);\nexports.NewMessage = NewMessage;\nvar NewMessageEvent = /*#__PURE__*/function (_common_1$EventCommon) {\n  _inherits(NewMessageEvent, _common_1$EventCommon);\n  var _super2 = _createSuper(NewMessageEvent);\n  function NewMessageEvent(message, originalUpdate) {\n    var _this2;\n    _classCallCheck(this, NewMessageEvent);\n    _this2 = _super2.call(this, {\n      msgId: message.id,\n      chatPeer: message.peerId,\n      broadcast: message.post\n    });\n    _this2.originalUpdate = originalUpdate;\n    _this2.message = message;\n    return _this2;\n  }\n  _createClass(NewMessageEvent, [{\n    key: \"_setClient\",\n    value: function _setClient(client) {\n      _get(_getPrototypeOf(NewMessageEvent.prototype), \"_setClient\", this).call(this, client);\n      var m = this.message;\n      try {\n        // todo make sure this never fails\n        m._finishInit(client, this.originalUpdate._entities || new Map(), undefined);\n      } catch (e) {\n        client._log.error(\"Got error while trying to finish init message with id \" + m.id);\n        if (client._log.canSend(Logger_1.LogLevel.ERROR)) {\n          console.error(e);\n        }\n      }\n    }\n  }]);\n  return NewMessageEvent;\n}(common_1.EventCommon);\nexports.NewMessageEvent = NewMessageEvent;","map":{"version":3,"names":["Object","defineProperty","exports","value","NewMessageEvent","NewMessage","common_1","require","tl_1","Logger_1","newMessageParams","chats","func","incoming","outgoing","fromUsers","forwards","pattern","blacklistChats","undefined","Error","_noCheck","every","v","client","_intoIdSet","update","callback","selfId","Api","UpdateNewMessage","UpdateNewChannelMessage","message","Message","event","addAttributes","UpdateShortMessage","out","mentioned","mediaUnread","silent","id","peerId","PeerUser","userId","fromId","date","fwdFrom","viaBotId","replyTo","entities","ttlPeriod","UpdateShortChatMessage","PeerChat","chatId","_a","senderId","includes","toString","match","patternMatch","EventBuilder","originalUpdate","msgId","chatPeer","broadcast","post","m","_finishInit","_entities","Map","e","_log","error","canSend","LogLevel","ERROR","console","EventCommon"],"sources":["C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/telegram/events/NewMessage.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NewMessageEvent = exports.NewMessage = void 0;\r\nconst common_1 = require(\"./common\");\r\nconst tl_1 = require(\"../tl\");\r\nconst Logger_1 = require(\"../extensions/Logger\");\r\n/**\r\n * Occurs whenever a new text message or a message with media arrives.\r\n * @example\r\n * ```ts\r\n * async function eventPrint(event: NewMessageEvent) {\r\n * const message = event.message;\r\n *\r\n *   // Checks if it's a private message (from user or bot)\r\n *   if (event.isPrivate){\r\n *       // prints sender id\r\n *       console.log(message.senderId);\r\n *       // read message\r\n *       if (message.text == \"hello\"){\r\n *           const sender = await message.getSender();\r\n *           console.log(\"sender is\",sender);\r\n *           await client.sendMessage(sender,{\r\n *               message:`hi your id is ${message.senderId}`\r\n *           });\r\n *       }\r\n *   }\r\n * }\r\n * // adds an event handler for new messages\r\n * client.addEventHandler(eventPrint, new NewMessage({}));\r\n * ```\r\n */\r\nclass NewMessage extends common_1.EventBuilder {\r\n    constructor(newMessageParams = {}) {\r\n        let { chats, func, incoming, outgoing, fromUsers, forwards, pattern, blacklistChats = false, } = newMessageParams;\r\n        if (incoming && outgoing) {\r\n            incoming = outgoing = undefined;\r\n        }\r\n        else if (incoming != undefined && outgoing == undefined) {\r\n            outgoing = !incoming;\r\n        }\r\n        else if (outgoing != undefined && incoming == undefined) {\r\n            incoming = !outgoing;\r\n        }\r\n        else if (outgoing == false && incoming == false) {\r\n            throw new Error(\"Don't create an event handler if you don't want neither incoming nor outgoing!\");\r\n        }\r\n        super({ chats, blacklistChats, func });\r\n        this.incoming = incoming;\r\n        this.outgoing = outgoing;\r\n        this.fromUsers = fromUsers;\r\n        this.forwards = forwards;\r\n        this.pattern = pattern;\r\n        this._noCheck = [\r\n            incoming,\r\n            outgoing,\r\n            chats,\r\n            pattern,\r\n            fromUsers,\r\n            forwards,\r\n            func,\r\n        ].every((v) => v == undefined);\r\n    }\r\n    async _resolve(client) {\r\n        await super._resolve(client);\r\n        this.fromUsers = await (0, common_1._intoIdSet)(client, this.fromUsers);\r\n    }\r\n    build(update, callback, selfId) {\r\n        if (update instanceof tl_1.Api.UpdateNewMessage ||\r\n            update instanceof tl_1.Api.UpdateNewChannelMessage) {\r\n            if (!(update.message instanceof tl_1.Api.Message)) {\r\n                return undefined;\r\n            }\r\n            const event = new NewMessageEvent(update.message, update);\r\n            this.addAttributes(event);\r\n            return event;\r\n        }\r\n        else if (update instanceof tl_1.Api.UpdateShortMessage) {\r\n            return new NewMessageEvent(new tl_1.Api.Message({\r\n                out: update.out,\r\n                mentioned: update.mentioned,\r\n                mediaUnread: update.mediaUnread,\r\n                silent: update.silent,\r\n                id: update.id,\r\n                peerId: new tl_1.Api.PeerUser({ userId: update.userId }),\r\n                fromId: new tl_1.Api.PeerUser({\r\n                    userId: update.out ? selfId : update.userId,\r\n                }),\r\n                message: update.message,\r\n                date: update.date,\r\n                fwdFrom: update.fwdFrom,\r\n                viaBotId: update.viaBotId,\r\n                replyTo: update.replyTo,\r\n                entities: update.entities,\r\n                ttlPeriod: update.ttlPeriod,\r\n            }), update);\r\n        }\r\n        else if (update instanceof tl_1.Api.UpdateShortChatMessage) {\r\n            return new NewMessageEvent(new tl_1.Api.Message({\r\n                out: update.out,\r\n                mentioned: update.mentioned,\r\n                mediaUnread: update.mediaUnread,\r\n                silent: update.silent,\r\n                id: update.id,\r\n                peerId: new tl_1.Api.PeerChat({ chatId: update.chatId }),\r\n                fromId: new tl_1.Api.PeerUser({\r\n                    userId: update.out ? selfId : update.fromId,\r\n                }),\r\n                message: update.message,\r\n                date: update.date,\r\n                fwdFrom: update.fwdFrom,\r\n                viaBotId: update.viaBotId,\r\n                replyTo: update.replyTo,\r\n                entities: update.entities,\r\n                ttlPeriod: update.ttlPeriod,\r\n            }), update);\r\n        }\r\n    }\r\n    filter(event) {\r\n        var _a;\r\n        if (this._noCheck) {\r\n            return event;\r\n        }\r\n        if (this.incoming && event.message.out) {\r\n            return;\r\n        }\r\n        if (this.outgoing && !event.message.out) {\r\n            return;\r\n        }\r\n        if (this.forwards != undefined) {\r\n            if (this.forwards != !!event.message.fwdFrom) {\r\n                return;\r\n            }\r\n        }\r\n        if (this.fromUsers != undefined) {\r\n            if (!event.message.senderId ||\r\n                !this.fromUsers.includes(event.message.senderId.toString())) {\r\n                return;\r\n            }\r\n        }\r\n        if (this.pattern) {\r\n            const match = (_a = event.message.message) === null || _a === void 0 ? void 0 : _a.match(this.pattern);\r\n            if (!match) {\r\n                return;\r\n            }\r\n            event.message.patternMatch = match;\r\n        }\r\n        return super.filter(event);\r\n    }\r\n    addAttributes(update) {\r\n        //update.patternMatch =\r\n    }\r\n}\r\nexports.NewMessage = NewMessage;\r\nclass NewMessageEvent extends common_1.EventCommon {\r\n    constructor(message, originalUpdate) {\r\n        super({\r\n            msgId: message.id,\r\n            chatPeer: message.peerId,\r\n            broadcast: message.post,\r\n        });\r\n        this.originalUpdate = originalUpdate;\r\n        this.message = message;\r\n    }\r\n    _setClient(client) {\r\n        super._setClient(client);\r\n        const m = this.message;\r\n        try {\r\n            // todo make sure this never fails\r\n            m._finishInit(client, this.originalUpdate._entities || new Map(), undefined);\r\n        }\r\n        catch (e) {\r\n            client._log.error(\"Got error while trying to finish init message with id \" + m.id);\r\n            if (client._log.canSend(Logger_1.LogLevel.ERROR)) {\r\n                console.error(e);\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.NewMessageEvent = NewMessageEvent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}