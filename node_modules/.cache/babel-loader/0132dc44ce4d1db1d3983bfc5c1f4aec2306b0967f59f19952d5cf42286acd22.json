{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BinaryReader = void 0;\nvar errors_1 = require(\"../errors\");\nvar core_1 = require(\"../tl/core\");\nvar AllTLObjects_1 = require(\"../tl/AllTLObjects\");\nvar Helpers_1 = require(\"../Helpers\");\nvar BinaryReader = /*#__PURE__*/function () {\n  /**\r\n   * Small utility class to read binary data.\r\n   * @param data {Buffer}\r\n   */\n  function BinaryReader(data) {\n    _classCallCheck(this, BinaryReader);\n    this.stream = data;\n    this._last = undefined;\n    this.offset = 0;\n  }\n  // region Reading\n  // \"All numbers are written as little endian.\"\n  // https://core.telegram.org/mtproto\n  /**\r\n   * Reads a single byte value.\r\n   */\n  _createClass(BinaryReader, [{\n    key: \"readByte\",\n    value: function readByte() {\n      return this.read(1)[0];\n    }\n    /**\r\n     * Reads an integer (4 bytes or 32 bits) value.\r\n     * @param signed {Boolean}\r\n     */\n  }, {\n    key: \"readInt\",\n    value: function readInt() {\n      var signed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var res;\n      if (signed) {\n        res = this.stream.readInt32LE(this.offset);\n      } else {\n        res = this.stream.readUInt32LE(this.offset);\n      }\n      this.offset += 4;\n      return res;\n    }\n    /**\r\n     * Reads a long integer (8 bytes or 64 bits) value.\r\n     * @param signed\r\n     * @returns {BigInteger}\r\n     */\n  }, {\n    key: \"readLong\",\n    value: function readLong() {\n      var signed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      return this.readLargeInt(64, signed);\n    }\n    /**\r\n     * Reads a real floating point (4 bytes) value.\r\n     * @returns {number}\r\n     */\n  }, {\n    key: \"readFloat\",\n    value: function readFloat() {\n      return this.read(4).readFloatLE(0);\n    }\n    /**\r\n     * Reads a real floating point (8 bytes) value.\r\n     * @returns {BigInteger}\r\n     */\n  }, {\n    key: \"readDouble\",\n    value: function readDouble() {\n      // was this a bug ? it should have been <d\n      return this.read(8).readDoubleLE(0);\n    }\n    /**\r\n     * Reads a n-bits long integer value.\r\n     * @param bits\r\n     * @param signed {Boolean}\r\n     */\n  }, {\n    key: \"readLargeInt\",\n    value: function readLargeInt(bits) {\n      var signed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var buffer = this.read(Math.floor(bits / 8));\n      return (0, Helpers_1.readBigIntFromBuffer)(buffer, true, signed);\n    }\n    /**\r\n     * Read the given amount of bytes, or -1 to read all remaining.\r\n     * @param length {number}\r\n     * @param checkLength {boolean} whether to check if the length overflows or not.\r\n     */\n  }, {\n    key: \"read\",\n    value: function read() {\n      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n      var checkLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (length === -1) {\n        length = this.stream.length - this.offset;\n      }\n      var result = this.stream.slice(this.offset, this.offset + length);\n      this.offset += length;\n      if (checkLength && result.length !== length) {\n        throw Error(\"No more data left to read (need \".concat(length, \", got \").concat(result.length, \": \").concat(result, \"); last read \").concat(this._last));\n      }\n      this._last = result;\n      return result;\n    }\n    /**\r\n     * Gets the byte array representing the current buffer as a whole.\r\n     * @returns {Buffer}\r\n     */\n  }, {\n    key: \"getBuffer\",\n    value: function getBuffer() {\n      return this.stream;\n    }\n    // endregion\n    // region Telegram custom reading\n    /**\r\n     * Reads a Telegram-encoded byte array, without the need of\r\n     * specifying its length.\r\n     * @returns {Buffer}\r\n     */\n  }, {\n    key: \"tgReadBytes\",\n    value: function tgReadBytes() {\n      var firstByte = this.readByte();\n      var padding;\n      var length;\n      if (firstByte === 254) {\n        length = this.readByte() | this.readByte() << 8 | this.readByte() << 16;\n        padding = length % 4;\n      } else {\n        length = firstByte;\n        padding = (length + 1) % 4;\n      }\n      var data = this.read(length);\n      if (padding > 0) {\n        padding = 4 - padding;\n        this.read(padding);\n      }\n      return data;\n    }\n    /**\r\n     * Reads a Telegram-encoded string.\r\n     * @returns {string}\r\n     */\n  }, {\n    key: \"tgReadString\",\n    value: function tgReadString() {\n      return this.tgReadBytes().toString(\"utf-8\");\n    }\n    /**\r\n     * Reads a Telegram boolean value.\r\n     * @returns {boolean}\r\n     */\n  }, {\n    key: \"tgReadBool\",\n    value: function tgReadBool() {\n      var value = this.readInt(false);\n      if (value === 0x997275b5) {\n        // boolTrue\n        return true;\n      } else if (value === 0xbc799737) {\n        // boolFalse\n        return false;\n      } else {\n        throw new Error(\"Invalid boolean code \".concat(value.toString(16)));\n      }\n    }\n    /**\r\n     * Reads and converts Unix time (used by Telegram)\r\n     * into a Javascript {Date} object.\r\n     * @returns {Date}\r\n     */\n  }, {\n    key: \"tgReadDate\",\n    value: function tgReadDate() {\n      var value = this.readInt();\n      return new Date(value * 1000);\n    }\n    /**\r\n     * Reads a Telegram object.\r\n     */\n  }, {\n    key: \"tgReadObject\",\n    value: function tgReadObject() {\n      var constructorId = this.readInt(false);\n      var clazz = AllTLObjects_1.tlobjects[constructorId];\n      if (clazz === undefined) {\n        /**\r\n         * The class was undefined, but there's still a\r\n         * chance of it being a manually parsed value like bool!\r\n         */\n        var value = constructorId;\n        if (value === 0x997275b5) {\n          // boolTrue\n          return true;\n        } else if (value === 0xbc799737) {\n          // boolFalse\n          return false;\n        } else if (value === 0x1cb5c415) {\n          // Vector\n          var temp = [];\n          var length = this.readInt();\n          for (var i = 0; i < length; i++) {\n            temp.push(this.tgReadObject());\n          }\n          return temp;\n        }\n        clazz = core_1.coreObjects.get(constructorId);\n        if (clazz === undefined) {\n          // If there was still no luck, give up\n          this.seek(-4); // Go back\n          var pos = this.tellPosition();\n          var error = new errors_1.TypeNotFoundError(constructorId, this.read());\n          this.setPosition(pos);\n          throw error;\n        }\n      }\n      return clazz.fromReader(this);\n    }\n    /**\r\n     * Reads a vector (a list) of Telegram objects.\r\n     * @returns {[Buffer]}\r\n     */\n  }, {\n    key: \"tgReadVector\",\n    value: function tgReadVector() {\n      if (this.readInt(false) !== 0x1cb5c415) {\n        throw new Error(\"Invalid constructor code, vector was expected\");\n      }\n      var count = this.readInt();\n      var temp = [];\n      for (var i = 0; i < count; i++) {\n        temp.push(this.tgReadObject());\n      }\n      return temp;\n    }\n    // endregion\n    // region Position related\n    /**\r\n     * Tells the current position on the stream.\r\n     * @returns {number}\r\n     */\n  }, {\n    key: \"tellPosition\",\n    value: function tellPosition() {\n      return this.offset;\n    }\n    /**\r\n     * Sets the current position on the stream.\r\n     * @param position\r\n     */\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(position) {\n      this.offset = position;\n    }\n    /**\r\n     * Seeks the stream position given an offset from the current position.\r\n     * The offset may be negative.\r\n     * @param offset\r\n     */\n  }, {\n    key: \"seek\",\n    value: function seek(offset) {\n      this.offset += offset;\n    }\n  }]);\n  return BinaryReader;\n}();\nexports.BinaryReader = BinaryReader;","map":{"version":3,"names":["Object","defineProperty","exports","value","BinaryReader","errors_1","require","core_1","AllTLObjects_1","Helpers_1","data","stream","_last","undefined","offset","read","signed","res","readInt32LE","readUInt32LE","readLargeInt","readFloatLE","readDoubleLE","bits","buffer","Math","floor","readBigIntFromBuffer","length","checkLength","result","slice","Error","firstByte","readByte","padding","tgReadBytes","toString","readInt","Date","constructorId","clazz","tlobjects","temp","i","push","tgReadObject","coreObjects","get","seek","pos","tellPosition","error","TypeNotFoundError","setPosition","fromReader","count","position"],"sources":["C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/telegram/extensions/BinaryReader.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.BinaryReader = void 0;\r\nconst errors_1 = require(\"../errors\");\r\nconst core_1 = require(\"../tl/core\");\r\nconst AllTLObjects_1 = require(\"../tl/AllTLObjects\");\r\nconst Helpers_1 = require(\"../Helpers\");\r\nclass BinaryReader {\r\n    /**\r\n     * Small utility class to read binary data.\r\n     * @param data {Buffer}\r\n     */\r\n    constructor(data) {\r\n        this.stream = data;\r\n        this._last = undefined;\r\n        this.offset = 0;\r\n    }\r\n    // region Reading\r\n    // \"All numbers are written as little endian.\"\r\n    // https://core.telegram.org/mtproto\r\n    /**\r\n     * Reads a single byte value.\r\n     */\r\n    readByte() {\r\n        return this.read(1)[0];\r\n    }\r\n    /**\r\n     * Reads an integer (4 bytes or 32 bits) value.\r\n     * @param signed {Boolean}\r\n     */\r\n    readInt(signed = true) {\r\n        let res;\r\n        if (signed) {\r\n            res = this.stream.readInt32LE(this.offset);\r\n        }\r\n        else {\r\n            res = this.stream.readUInt32LE(this.offset);\r\n        }\r\n        this.offset += 4;\r\n        return res;\r\n    }\r\n    /**\r\n     * Reads a long integer (8 bytes or 64 bits) value.\r\n     * @param signed\r\n     * @returns {BigInteger}\r\n     */\r\n    readLong(signed = true) {\r\n        return this.readLargeInt(64, signed);\r\n    }\r\n    /**\r\n     * Reads a real floating point (4 bytes) value.\r\n     * @returns {number}\r\n     */\r\n    readFloat() {\r\n        return this.read(4).readFloatLE(0);\r\n    }\r\n    /**\r\n     * Reads a real floating point (8 bytes) value.\r\n     * @returns {BigInteger}\r\n     */\r\n    readDouble() {\r\n        // was this a bug ? it should have been <d\r\n        return this.read(8).readDoubleLE(0);\r\n    }\r\n    /**\r\n     * Reads a n-bits long integer value.\r\n     * @param bits\r\n     * @param signed {Boolean}\r\n     */\r\n    readLargeInt(bits, signed = true) {\r\n        const buffer = this.read(Math.floor(bits / 8));\r\n        return (0, Helpers_1.readBigIntFromBuffer)(buffer, true, signed);\r\n    }\r\n    /**\r\n     * Read the given amount of bytes, or -1 to read all remaining.\r\n     * @param length {number}\r\n     * @param checkLength {boolean} whether to check if the length overflows or not.\r\n     */\r\n    read(length = -1, checkLength = true) {\r\n        if (length === -1) {\r\n            length = this.stream.length - this.offset;\r\n        }\r\n        const result = this.stream.slice(this.offset, this.offset + length);\r\n        this.offset += length;\r\n        if (checkLength && result.length !== length) {\r\n            throw Error(`No more data left to read (need ${length}, got ${result.length}: ${result}); last read ${this._last}`);\r\n        }\r\n        this._last = result;\r\n        return result;\r\n    }\r\n    /**\r\n     * Gets the byte array representing the current buffer as a whole.\r\n     * @returns {Buffer}\r\n     */\r\n    getBuffer() {\r\n        return this.stream;\r\n    }\r\n    // endregion\r\n    // region Telegram custom reading\r\n    /**\r\n     * Reads a Telegram-encoded byte array, without the need of\r\n     * specifying its length.\r\n     * @returns {Buffer}\r\n     */\r\n    tgReadBytes() {\r\n        const firstByte = this.readByte();\r\n        let padding;\r\n        let length;\r\n        if (firstByte === 254) {\r\n            length =\r\n                this.readByte() |\r\n                    (this.readByte() << 8) |\r\n                    (this.readByte() << 16);\r\n            padding = length % 4;\r\n        }\r\n        else {\r\n            length = firstByte;\r\n            padding = (length + 1) % 4;\r\n        }\r\n        const data = this.read(length);\r\n        if (padding > 0) {\r\n            padding = 4 - padding;\r\n            this.read(padding);\r\n        }\r\n        return data;\r\n    }\r\n    /**\r\n     * Reads a Telegram-encoded string.\r\n     * @returns {string}\r\n     */\r\n    tgReadString() {\r\n        return this.tgReadBytes().toString(\"utf-8\");\r\n    }\r\n    /**\r\n     * Reads a Telegram boolean value.\r\n     * @returns {boolean}\r\n     */\r\n    tgReadBool() {\r\n        const value = this.readInt(false);\r\n        if (value === 0x997275b5) {\r\n            // boolTrue\r\n            return true;\r\n        }\r\n        else if (value === 0xbc799737) {\r\n            // boolFalse\r\n            return false;\r\n        }\r\n        else {\r\n            throw new Error(`Invalid boolean code ${value.toString(16)}`);\r\n        }\r\n    }\r\n    /**\r\n     * Reads and converts Unix time (used by Telegram)\r\n     * into a Javascript {Date} object.\r\n     * @returns {Date}\r\n     */\r\n    tgReadDate() {\r\n        const value = this.readInt();\r\n        return new Date(value * 1000);\r\n    }\r\n    /**\r\n     * Reads a Telegram object.\r\n     */\r\n    tgReadObject() {\r\n        const constructorId = this.readInt(false);\r\n        let clazz = AllTLObjects_1.tlobjects[constructorId];\r\n        if (clazz === undefined) {\r\n            /**\r\n             * The class was undefined, but there's still a\r\n             * chance of it being a manually parsed value like bool!\r\n             */\r\n            const value = constructorId;\r\n            if (value === 0x997275b5) {\r\n                // boolTrue\r\n                return true;\r\n            }\r\n            else if (value === 0xbc799737) {\r\n                // boolFalse\r\n                return false;\r\n            }\r\n            else if (value === 0x1cb5c415) {\r\n                // Vector\r\n                const temp = [];\r\n                const length = this.readInt();\r\n                for (let i = 0; i < length; i++) {\r\n                    temp.push(this.tgReadObject());\r\n                }\r\n                return temp;\r\n            }\r\n            clazz = core_1.coreObjects.get(constructorId);\r\n            if (clazz === undefined) {\r\n                // If there was still no luck, give up\r\n                this.seek(-4); // Go back\r\n                const pos = this.tellPosition();\r\n                const error = new errors_1.TypeNotFoundError(constructorId, this.read());\r\n                this.setPosition(pos);\r\n                throw error;\r\n            }\r\n        }\r\n        return clazz.fromReader(this);\r\n    }\r\n    /**\r\n     * Reads a vector (a list) of Telegram objects.\r\n     * @returns {[Buffer]}\r\n     */\r\n    tgReadVector() {\r\n        if (this.readInt(false) !== 0x1cb5c415) {\r\n            throw new Error(\"Invalid constructor code, vector was expected\");\r\n        }\r\n        const count = this.readInt();\r\n        const temp = [];\r\n        for (let i = 0; i < count; i++) {\r\n            temp.push(this.tgReadObject());\r\n        }\r\n        return temp;\r\n    }\r\n    // endregion\r\n    // region Position related\r\n    /**\r\n     * Tells the current position on the stream.\r\n     * @returns {number}\r\n     */\r\n    tellPosition() {\r\n        return this.offset;\r\n    }\r\n    /**\r\n     * Sets the current position on the stream.\r\n     * @param position\r\n     */\r\n    setPosition(position) {\r\n        this.offset = position;\r\n    }\r\n    /**\r\n     * Seeks the stream position given an offset from the current position.\r\n     * The offset may be negative.\r\n     * @param offset\r\n     */\r\n    seek(offset) {\r\n        this.offset += offset;\r\n    }\r\n}\r\nexports.BinaryReader = BinaryReader;\r\n"],"mappings":"AAAA,YAAY;;AAAC;AAAA;AACbA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,YAAY,GAAG,KAAK,CAAC;AAC7B,IAAMC,QAAQ,GAAGC,OAAO,CAAC,WAAW,CAAC;AACrC,IAAMC,MAAM,GAAGD,OAAO,CAAC,YAAY,CAAC;AACpC,IAAME,cAAc,GAAGF,OAAO,CAAC,oBAAoB,CAAC;AACpD,IAAMG,SAAS,GAAGH,OAAO,CAAC,YAAY,CAAC;AAAC,IAClCF,YAAY;EACd;AACJ;AACA;AACA;EACI,sBAAYM,IAAI,EAAE;IAAA;IACd,IAAI,CAACC,MAAM,GAAGD,IAAI;IAClB,IAAI,CAACE,KAAK,GAAGC,SAAS;IACtB,IAAI,CAACC,MAAM,GAAG,CAAC;EACnB;EACA;EACA;EACA;EACA;AACJ;AACA;EAFI;IAAA;IAAA,OAGA,oBAAW;MACP,OAAO,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1B;IACA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,OAIA,mBAAuB;MAAA,IAAfC,MAAM,uEAAG,IAAI;MACjB,IAAIC,GAAG;MACP,IAAID,MAAM,EAAE;QACRC,GAAG,GAAG,IAAI,CAACN,MAAM,CAACO,WAAW,CAAC,IAAI,CAACJ,MAAM,CAAC;MAC9C,CAAC,MACI;QACDG,GAAG,GAAG,IAAI,CAACN,MAAM,CAACQ,YAAY,CAAC,IAAI,CAACL,MAAM,CAAC;MAC/C;MACA,IAAI,CAACA,MAAM,IAAI,CAAC;MAChB,OAAOG,GAAG;IACd;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,oBAAwB;MAAA,IAAfD,MAAM,uEAAG,IAAI;MAClB,OAAO,IAAI,CAACI,YAAY,CAAC,EAAE,EAAEJ,MAAM,CAAC;IACxC;IACA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,OAIA,qBAAY;MACR,OAAO,IAAI,CAACD,IAAI,CAAC,CAAC,CAAC,CAACM,WAAW,CAAC,CAAC,CAAC;IACtC;IACA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,OAIA,sBAAa;MACT;MACA,OAAO,IAAI,CAACN,IAAI,CAAC,CAAC,CAAC,CAACO,YAAY,CAAC,CAAC,CAAC;IACvC;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,sBAAaC,IAAI,EAAiB;MAAA,IAAfP,MAAM,uEAAG,IAAI;MAC5B,IAAMQ,MAAM,GAAG,IAAI,CAACT,IAAI,CAACU,IAAI,CAACC,KAAK,CAACH,IAAI,GAAG,CAAC,CAAC,CAAC;MAC9C,OAAO,CAAC,CAAC,EAAEd,SAAS,CAACkB,oBAAoB,EAAEH,MAAM,EAAE,IAAI,EAAER,MAAM,CAAC;IACpE;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,gBAAsC;MAAA,IAAjCY,MAAM,uEAAG,CAAC,CAAC;MAAA,IAAEC,WAAW,uEAAG,IAAI;MAChC,IAAID,MAAM,KAAK,CAAC,CAAC,EAAE;QACfA,MAAM,GAAG,IAAI,CAACjB,MAAM,CAACiB,MAAM,GAAG,IAAI,CAACd,MAAM;MAC7C;MACA,IAAMgB,MAAM,GAAG,IAAI,CAACnB,MAAM,CAACoB,KAAK,CAAC,IAAI,CAACjB,MAAM,EAAE,IAAI,CAACA,MAAM,GAAGc,MAAM,CAAC;MACnE,IAAI,CAACd,MAAM,IAAIc,MAAM;MACrB,IAAIC,WAAW,IAAIC,MAAM,CAACF,MAAM,KAAKA,MAAM,EAAE;QACzC,MAAMI,KAAK,2CAAoCJ,MAAM,mBAASE,MAAM,CAACF,MAAM,eAAKE,MAAM,0BAAgB,IAAI,CAAClB,KAAK,EAAG;MACvH;MACA,IAAI,CAACA,KAAK,GAAGkB,MAAM;MACnB,OAAOA,MAAM;IACjB;IACA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,OAIA,qBAAY;MACR,OAAO,IAAI,CAACnB,MAAM;IACtB;IACA;IACA;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,uBAAc;MACV,IAAMsB,SAAS,GAAG,IAAI,CAACC,QAAQ,EAAE;MACjC,IAAIC,OAAO;MACX,IAAIP,MAAM;MACV,IAAIK,SAAS,KAAK,GAAG,EAAE;QACnBL,MAAM,GACF,IAAI,CAACM,QAAQ,EAAE,GACV,IAAI,CAACA,QAAQ,EAAE,IAAI,CAAE,GACrB,IAAI,CAACA,QAAQ,EAAE,IAAI,EAAG;QAC/BC,OAAO,GAAGP,MAAM,GAAG,CAAC;MACxB,CAAC,MACI;QACDA,MAAM,GAAGK,SAAS;QAClBE,OAAO,GAAG,CAACP,MAAM,GAAG,CAAC,IAAI,CAAC;MAC9B;MACA,IAAMlB,IAAI,GAAG,IAAI,CAACK,IAAI,CAACa,MAAM,CAAC;MAC9B,IAAIO,OAAO,GAAG,CAAC,EAAE;QACbA,OAAO,GAAG,CAAC,GAAGA,OAAO;QACrB,IAAI,CAACpB,IAAI,CAACoB,OAAO,CAAC;MACtB;MACA,OAAOzB,IAAI;IACf;IACA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,OAIA,wBAAe;MACX,OAAO,IAAI,CAAC0B,WAAW,EAAE,CAACC,QAAQ,CAAC,OAAO,CAAC;IAC/C;IACA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,OAIA,sBAAa;MACT,IAAMlC,KAAK,GAAG,IAAI,CAACmC,OAAO,CAAC,KAAK,CAAC;MACjC,IAAInC,KAAK,KAAK,UAAU,EAAE;QACtB;QACA,OAAO,IAAI;MACf,CAAC,MACI,IAAIA,KAAK,KAAK,UAAU,EAAE;QAC3B;QACA,OAAO,KAAK;MAChB,CAAC,MACI;QACD,MAAM,IAAI6B,KAAK,gCAAyB7B,KAAK,CAACkC,QAAQ,CAAC,EAAE,CAAC,EAAG;MACjE;IACJ;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,sBAAa;MACT,IAAMlC,KAAK,GAAG,IAAI,CAACmC,OAAO,EAAE;MAC5B,OAAO,IAAIC,IAAI,CAACpC,KAAK,GAAG,IAAI,CAAC;IACjC;IACA;AACJ;AACA;EAFI;IAAA;IAAA,OAGA,wBAAe;MACX,IAAMqC,aAAa,GAAG,IAAI,CAACF,OAAO,CAAC,KAAK,CAAC;MACzC,IAAIG,KAAK,GAAGjC,cAAc,CAACkC,SAAS,CAACF,aAAa,CAAC;MACnD,IAAIC,KAAK,KAAK5B,SAAS,EAAE;QACrB;AACZ;AACA;AACA;QACY,IAAMV,KAAK,GAAGqC,aAAa;QAC3B,IAAIrC,KAAK,KAAK,UAAU,EAAE;UACtB;UACA,OAAO,IAAI;QACf,CAAC,MACI,IAAIA,KAAK,KAAK,UAAU,EAAE;UAC3B;UACA,OAAO,KAAK;QAChB,CAAC,MACI,IAAIA,KAAK,KAAK,UAAU,EAAE;UAC3B;UACA,IAAMwC,IAAI,GAAG,EAAE;UACf,IAAMf,MAAM,GAAG,IAAI,CAACU,OAAO,EAAE;UAC7B,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhB,MAAM,EAAEgB,CAAC,EAAE,EAAE;YAC7BD,IAAI,CAACE,IAAI,CAAC,IAAI,CAACC,YAAY,EAAE,CAAC;UAClC;UACA,OAAOH,IAAI;QACf;QACAF,KAAK,GAAGlC,MAAM,CAACwC,WAAW,CAACC,GAAG,CAACR,aAAa,CAAC;QAC7C,IAAIC,KAAK,KAAK5B,SAAS,EAAE;UACrB;UACA,IAAI,CAACoC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACf,IAAMC,GAAG,GAAG,IAAI,CAACC,YAAY,EAAE;UAC/B,IAAMC,KAAK,GAAG,IAAI/C,QAAQ,CAACgD,iBAAiB,CAACb,aAAa,EAAE,IAAI,CAACzB,IAAI,EAAE,CAAC;UACxE,IAAI,CAACuC,WAAW,CAACJ,GAAG,CAAC;UACrB,MAAME,KAAK;QACf;MACJ;MACA,OAAOX,KAAK,CAACc,UAAU,CAAC,IAAI,CAAC;IACjC;IACA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,OAIA,wBAAe;MACX,IAAI,IAAI,CAACjB,OAAO,CAAC,KAAK,CAAC,KAAK,UAAU,EAAE;QACpC,MAAM,IAAIN,KAAK,CAAC,+CAA+C,CAAC;MACpE;MACA,IAAMwB,KAAK,GAAG,IAAI,CAAClB,OAAO,EAAE;MAC5B,IAAMK,IAAI,GAAG,EAAE;MACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGY,KAAK,EAAEZ,CAAC,EAAE,EAAE;QAC5BD,IAAI,CAACE,IAAI,CAAC,IAAI,CAACC,YAAY,EAAE,CAAC;MAClC;MACA,OAAOH,IAAI;IACf;IACA;IACA;IACA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,OAIA,wBAAe;MACX,OAAO,IAAI,CAAC7B,MAAM;IACtB;IACA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,OAIA,qBAAY2C,QAAQ,EAAE;MAClB,IAAI,CAAC3C,MAAM,GAAG2C,QAAQ;IAC1B;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,cAAK3C,MAAM,EAAE;MACT,IAAI,CAACA,MAAM,IAAIA,MAAM;IACzB;EAAC;EAAA;AAAA;AAELZ,OAAO,CAACE,YAAY,GAAGA,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}