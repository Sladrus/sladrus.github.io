{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createForOfIteratorHelper = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _regeneratorRuntime = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._selfId = exports._getInputNotify = exports._getInputDialog = exports._getPeer = exports.getPeerId = exports._getEntityFromString = exports.getInputEntity = exports.getEntity = exports.isUserAuthorized = exports.isBot = exports.getMe = exports.invoke = void 0;\nvar tl_1 = require(\"../tl\");\nvar Utils_1 = require(\"../Utils\");\nvar Helpers_1 = require(\"../Helpers\");\nvar __1 = require(\"../\");\nvar big_integer_1 = __importDefault(require(\"big-integer\"));\nvar Logger_1 = require(\"../extensions/Logger\");\n// UserMethods {\n// region Invoking Telegram request\n/** @hidden */\nfunction invoke(_x, _x2, _x3) {\n  return _invoke.apply(this, arguments);\n}\nfunction _invoke() {\n  _invoke = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(client, request, sender) {\n    var attempt, promise, result, shouldRaise;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!(request.classType !== \"request\")) {\n            _context.next = 2;\n            break;\n          }\n          throw new Error(\"You can only invoke MTProtoRequests\");\n        case 2:\n          if (!sender) {\n            sender = client._sender;\n          }\n          if (!(sender == undefined)) {\n            _context.next = 5;\n            break;\n          }\n          throw new Error(\"Cannot send requests while disconnected. You need to call .connect()\");\n        case 5:\n          _context.next = 7;\n          return request.resolve(client, __1.utils);\n        case 7:\n          client._lastRequest = new Date().getTime();\n          attempt = 0;\n        case 9:\n          if (!(attempt < client._requestRetries)) {\n            _context.next = 56;\n            break;\n          }\n          _context.prev = 10;\n          promise = sender.send(request);\n          _context.next = 14;\n          return promise;\n        case 14:\n          result = _context.sent;\n          client.session.processEntities(result);\n          client._entityCache.add(result);\n          return _context.abrupt(\"return\", result);\n        case 20:\n          _context.prev = 20;\n          _context.t0 = _context[\"catch\"](10);\n          if (!(_context.t0 instanceof __1.errors.ServerError || _context.t0.errorMessage === \"RPC_CALL_FAIL\" || _context.t0.errorMessage === \"RPC_MCGET_FAIL\")) {\n            _context.next = 28;\n            break;\n          }\n          client._log.warn(\"Telegram is having internal issues \".concat(_context.t0.constructor.name));\n          _context.next = 26;\n          return (0, Helpers_1.sleep)(2000);\n        case 26:\n          _context.next = 53;\n          break;\n        case 28:\n          if (!(_context.t0 instanceof __1.errors.FloodWaitError || _context.t0 instanceof __1.errors.FloodTestPhoneWaitError)) {\n            _context.next = 38;\n            break;\n          }\n          if (!(_context.t0.seconds <= client.floodSleepThreshold)) {\n            _context.next = 35;\n            break;\n          }\n          client._log.info(\"Sleeping for \".concat(_context.t0.seconds, \"s on flood wait (Caused by \").concat(request.className, \")\"));\n          _context.next = 33;\n          return (0, Helpers_1.sleep)(_context.t0.seconds * 1000);\n        case 33:\n          _context.next = 36;\n          break;\n        case 35:\n          throw _context.t0;\n        case 36:\n          _context.next = 53;\n          break;\n        case 38:\n          if (!(_context.t0 instanceof __1.errors.PhoneMigrateError || _context.t0 instanceof __1.errors.NetworkMigrateError || _context.t0 instanceof __1.errors.UserMigrateError)) {\n            _context.next = 52;\n            break;\n          }\n          client._log.info(\"Phone migrated to \".concat(_context.t0.newDc));\n          shouldRaise = _context.t0 instanceof __1.errors.PhoneMigrateError || _context.t0 instanceof __1.errors.NetworkMigrateError;\n          _context.t1 = shouldRaise;\n          if (!_context.t1) {\n            _context.next = 46;\n            break;\n          }\n          _context.next = 45;\n          return client.isUserAuthorized();\n        case 45:\n          _context.t1 = _context.sent;\n        case 46:\n          if (!_context.t1) {\n            _context.next = 48;\n            break;\n          }\n          throw _context.t0;\n        case 48:\n          _context.next = 50;\n          return client._switchDC(_context.t0.newDc);\n        case 50:\n          _context.next = 53;\n          break;\n        case 52:\n          throw _context.t0;\n        case 53:\n          attempt++;\n          _context.next = 9;\n          break;\n        case 56:\n          throw new Error(\"Request was unsuccessful \".concat(attempt, \" time(s)\"));\n        case 57:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[10, 20]]);\n  }));\n  return _invoke.apply(this, arguments);\n}\nexports.invoke = invoke;\n/** @hidden */\nfunction getMe(_x4) {\n  return _getMe.apply(this, arguments);\n}\nfunction _getMe() {\n  _getMe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(client) {\n    var inputPeer,\n      me,\n      _args2 = arguments;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          inputPeer = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : false;\n          if (!(inputPeer && client._selfInputPeer)) {\n            _context2.next = 3;\n            break;\n          }\n          return _context2.abrupt(\"return\", client._selfInputPeer);\n        case 3:\n          _context2.next = 5;\n          return client.invoke(new tl_1.Api.users.GetUsers({\n            id: [new tl_1.Api.InputUserSelf()]\n          }));\n        case 5:\n          me = _context2.sent[0];\n          client._bot = me.bot;\n          if (!client._selfInputPeer) {\n            client._selfInputPeer = __1.utils.getInputPeer(me, false);\n          }\n          return _context2.abrupt(\"return\", inputPeer ? client._selfInputPeer : me);\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _getMe.apply(this, arguments);\n}\nexports.getMe = getMe;\n/** @hidden */\nfunction isBot(_x5) {\n  return _isBot.apply(this, arguments);\n}\nfunction _isBot() {\n  _isBot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(client) {\n    var me;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!(client._bot === undefined)) {\n            _context3.next = 6;\n            break;\n          }\n          _context3.next = 3;\n          return client.getMe();\n        case 3:\n          me = _context3.sent;\n          if (!me) {\n            _context3.next = 6;\n            break;\n          }\n          return _context3.abrupt(\"return\", !(me instanceof tl_1.Api.InputPeerUser) ? me.bot : undefined);\n        case 6:\n          return _context3.abrupt(\"return\", client._bot);\n        case 7:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return _isBot.apply(this, arguments);\n}\nexports.isBot = isBot;\n/** @hidden */\nfunction isUserAuthorized(_x6) {\n  return _isUserAuthorized.apply(this, arguments);\n}\nfunction _isUserAuthorized() {\n  _isUserAuthorized = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(client) {\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return client.invoke(new tl_1.Api.updates.GetState());\n        case 3:\n          return _context4.abrupt(\"return\", true);\n        case 6:\n          _context4.prev = 6;\n          _context4.t0 = _context4[\"catch\"](0);\n          return _context4.abrupt(\"return\", false);\n        case 9:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4, null, [[0, 6]]);\n  }));\n  return _isUserAuthorized.apply(this, arguments);\n}\nexports.isUserAuthorized = isUserAuthorized;\n/** @hidden */\nfunction getEntity(_x7, _x8) {\n  return _getEntity.apply(this, arguments);\n}\nfunction _getEntity() {\n  _getEntity = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(client, entity) {\n    var single, entityArray, inputs, _iterator, _step, _x22, valid, lists, _i, _inputs, x, users, chats, channels, chatIds, idEntity, _iterator2, _step2, user, _iterator3, _step3, channel, _iterator4, _step4, chat, result, _i2, _inputs2, _x21, _iterator5, _step5, _step5$value, key, u;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          single = !(0, Helpers_1.isArrayLike)(entity);\n          entityArray = [];\n          if ((0, Helpers_1.isArrayLike)(entity)) {\n            entityArray = entity;\n          } else {\n            entityArray.push(entity);\n          }\n          inputs = [];\n          _iterator = _createForOfIteratorHelper(entityArray);\n          _context5.prev = 5;\n          _iterator.s();\n        case 7:\n          if ((_step = _iterator.n()).done) {\n            _context5.next = 29;\n            break;\n          }\n          _x22 = _step.value;\n          if (!(typeof _x22 === \"string\")) {\n            _context5.next = 22;\n            break;\n          }\n          valid = (0, Utils_1.parseID)(_x22);\n          if (!valid) {\n            _context5.next = 19;\n            break;\n          }\n          _context5.t0 = inputs;\n          _context5.next = 15;\n          return client.getInputEntity(valid);\n        case 15:\n          _context5.t1 = _context5.sent;\n          _context5.t0.push.call(_context5.t0, _context5.t1);\n          _context5.next = 20;\n          break;\n        case 19:\n          inputs.push(_x22);\n        case 20:\n          _context5.next = 27;\n          break;\n        case 22:\n          _context5.t2 = inputs;\n          _context5.next = 25;\n          return client.getInputEntity(_x22);\n        case 25:\n          _context5.t3 = _context5.sent;\n          _context5.t2.push.call(_context5.t2, _context5.t3);\n        case 27:\n          _context5.next = 7;\n          break;\n        case 29:\n          _context5.next = 34;\n          break;\n        case 31:\n          _context5.prev = 31;\n          _context5.t4 = _context5[\"catch\"](5);\n          _iterator.e(_context5.t4);\n        case 34:\n          _context5.prev = 34;\n          _iterator.f();\n          return _context5.finish(34);\n        case 37:\n          lists = new Map([[Helpers_1._EntityType.USER, []], [Helpers_1._EntityType.CHAT, []], [Helpers_1._EntityType.CHANNEL, []]]);\n          for (_i = 0, _inputs = inputs; _i < _inputs.length; _i++) {\n            x = _inputs[_i];\n            try {\n              lists.get((0, Helpers_1._entityType)(x)).push(x);\n            } catch (e) {}\n          }\n          users = lists.get(Helpers_1._EntityType.USER);\n          chats = lists.get(Helpers_1._EntityType.CHAT);\n          channels = lists.get(Helpers_1._EntityType.CHANNEL);\n          if (!users.length) {\n            _context5.next = 46;\n            break;\n          }\n          _context5.next = 45;\n          return client.invoke(new tl_1.Api.users.GetUsers({\n            id: users\n          }));\n        case 45:\n          users = _context5.sent;\n        case 46:\n          if (!chats.length) {\n            _context5.next = 51;\n            break;\n          }\n          chatIds = chats.map(function (x) {\n            return x.chatId;\n          });\n          _context5.next = 50;\n          return client.invoke(new tl_1.Api.messages.GetChats({\n            id: chatIds\n          }));\n        case 50:\n          chats = _context5.sent.chats;\n        case 51:\n          if (!channels.length) {\n            _context5.next = 55;\n            break;\n          }\n          _context5.next = 54;\n          return client.invoke(new tl_1.Api.channels.GetChannels({\n            id: channels\n          }));\n        case 54:\n          channels = _context5.sent.chats;\n        case 55:\n          idEntity = new Map();\n          _iterator2 = _createForOfIteratorHelper(users);\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              user = _step2.value;\n              idEntity.set((0, Utils_1.getPeerId)(user), user);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n          _iterator3 = _createForOfIteratorHelper(channels);\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              channel = _step3.value;\n              idEntity.set((0, Utils_1.getPeerId)(channel), channel);\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n          _iterator4 = _createForOfIteratorHelper(chats);\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              chat = _step4.value;\n              idEntity.set((0, Utils_1.getPeerId)(chat), chat);\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n          result = [];\n          _i2 = 0, _inputs2 = inputs;\n        case 64:\n          if (!(_i2 < _inputs2.length)) {\n            _context5.next = 99;\n            break;\n          }\n          _x21 = _inputs2[_i2];\n          if (!(typeof _x21 === \"string\")) {\n            _context5.next = 74;\n            break;\n          }\n          _context5.t5 = result;\n          _context5.next = 70;\n          return _getEntityFromString(client, _x21);\n        case 70:\n          _context5.t6 = _context5.sent;\n          _context5.t5.push.call(_context5.t5, _context5.t6);\n          _context5.next = 96;\n          break;\n        case 74:\n          if (_x21 instanceof tl_1.Api.InputPeerSelf) {\n            _context5.next = 78;\n            break;\n          }\n          result.push(idEntity.get((0, Utils_1.getPeerId)(_x21)));\n          _context5.next = 96;\n          break;\n        case 78:\n          _iterator5 = _createForOfIteratorHelper(idEntity.entries());\n          _context5.prev = 79;\n          _iterator5.s();\n        case 81:\n          if ((_step5 = _iterator5.n()).done) {\n            _context5.next = 88;\n            break;\n          }\n          _step5$value = _slicedToArray(_step5.value, 2), key = _step5$value[0], u = _step5$value[1];\n          if (!(u instanceof tl_1.Api.User && u.self)) {\n            _context5.next = 86;\n            break;\n          }\n          result.push(u);\n          return _context5.abrupt(\"break\", 88);\n        case 86:\n          _context5.next = 81;\n          break;\n        case 88:\n          _context5.next = 93;\n          break;\n        case 90:\n          _context5.prev = 90;\n          _context5.t7 = _context5[\"catch\"](79);\n          _iterator5.e(_context5.t7);\n        case 93:\n          _context5.prev = 93;\n          _iterator5.f();\n          return _context5.finish(93);\n        case 96:\n          _i2++;\n          _context5.next = 64;\n          break;\n        case 99:\n          return _context5.abrupt(\"return\", single ? result[0] : result);\n        case 100:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5, null, [[5, 31, 34, 37], [79, 90, 93, 96]]);\n  }));\n  return _getEntity.apply(this, arguments);\n}\nexports.getEntity = getEntity;\n/** @hidden */\nfunction getInputEntity(_x9, _x10) {\n  return _getInputEntity.apply(this, arguments);\n}\nfunction _getInputEntity() {\n  _getInputEntity = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(client, peer) {\n    var valid, res, _res, _res2, users, channels;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          return _context6.abrupt(\"return\", __1.utils.getInputPeer(peer));\n        case 4:\n          _context6.prev = 4;\n          _context6.t0 = _context6[\"catch\"](0);\n        case 6:\n          _context6.prev = 6;\n          if (!(typeof peer == \"string\")) {\n            _context6.next = 13;\n            break;\n          }\n          valid = (0, Utils_1.parseID)(peer);\n          if (!valid) {\n            _context6.next = 13;\n            break;\n          }\n          res = client._entityCache.get(peer);\n          if (!res) {\n            _context6.next = 13;\n            break;\n          }\n          return _context6.abrupt(\"return\", res);\n        case 13:\n          if (!(typeof peer === \"number\" || typeof peer === \"bigint\" || big_integer_1.default.isInstance(peer))) {\n            _context6.next = 17;\n            break;\n          }\n          _res = client._entityCache.get(peer.toString());\n          if (!_res) {\n            _context6.next = 17;\n            break;\n          }\n          return _context6.abrupt(\"return\", _res);\n        case 17:\n          if (!(typeof peer == \"object\" && !big_integer_1.default.isInstance(peer) && peer.SUBCLASS_OF_ID === 0x2d45687)) {\n            _context6.next = 21;\n            break;\n          }\n          _res2 = client._entityCache.get(__1.utils.getPeerId(peer));\n          if (!_res2) {\n            _context6.next = 21;\n            break;\n          }\n          return _context6.abrupt(\"return\", _res2);\n        case 21:\n          _context6.next = 25;\n          break;\n        case 23:\n          _context6.prev = 23;\n          _context6.t1 = _context6[\"catch\"](6);\n        case 25:\n          if (!(typeof peer == \"string\")) {\n            _context6.next = 28;\n            break;\n          }\n          if (![\"me\", \"this\", \"self\"].includes(peer)) {\n            _context6.next = 28;\n            break;\n          }\n          return _context6.abrupt(\"return\", new tl_1.Api.InputPeerSelf());\n        case 28:\n          _context6.prev = 28;\n          if (!(peer != undefined)) {\n            _context6.next = 31;\n            break;\n          }\n          return _context6.abrupt(\"return\", client.session.getInputEntity(peer));\n        case 31:\n          _context6.next = 35;\n          break;\n        case 33:\n          _context6.prev = 33;\n          _context6.t2 = _context6[\"catch\"](28);\n        case 35:\n          if (!(typeof peer === \"string\")) {\n            _context6.next = 41;\n            break;\n          }\n          _context6.t3 = __1.utils;\n          _context6.next = 39;\n          return _getEntityFromString(client, peer);\n        case 39:\n          _context6.t4 = _context6.sent;\n          return _context6.abrupt(\"return\", _context6.t3.getInputPeer.call(_context6.t3, _context6.t4));\n        case 41:\n          // If we're a bot and the user has messaged us privately users.getUsers\n          // will work with accessHash = 0. Similar for channels.getChannels.\n          // If we're not a bot but the user is in our contacts, it seems to work\n          // regardless. These are the only two special-cased requests.\n          if (typeof peer === \"number\") {\n            peer = (0, Helpers_1.returnBigInt)(peer);\n          }\n          peer = __1.utils.getPeer(peer);\n          if (!(peer instanceof tl_1.Api.PeerUser)) {\n            _context6.next = 51;\n            break;\n          }\n          _context6.next = 46;\n          return client.invoke(new tl_1.Api.users.GetUsers({\n            id: [new tl_1.Api.InputUser({\n              userId: peer.userId,\n              accessHash: big_integer_1.default.zero\n            })]\n          }));\n        case 46:\n          users = _context6.sent;\n          if (!(users.length && !(users[0] instanceof tl_1.Api.UserEmpty))) {\n            _context6.next = 49;\n            break;\n          }\n          return _context6.abrupt(\"return\", __1.utils.getInputPeer(users[0]));\n        case 49:\n          _context6.next = 66;\n          break;\n        case 51:\n          if (!(peer instanceof tl_1.Api.PeerChat)) {\n            _context6.next = 55;\n            break;\n          }\n          return _context6.abrupt(\"return\", new tl_1.Api.InputPeerChat({\n            chatId: peer.chatId\n          }));\n        case 55:\n          if (!(peer instanceof tl_1.Api.PeerChannel)) {\n            _context6.next = 66;\n            break;\n          }\n          _context6.prev = 56;\n          _context6.next = 59;\n          return client.invoke(new tl_1.Api.channels.GetChannels({\n            id: [new tl_1.Api.InputChannel({\n              channelId: peer.channelId,\n              accessHash: big_integer_1.default.zero\n            })]\n          }));\n        case 59:\n          channels = _context6.sent;\n          return _context6.abrupt(\"return\", __1.utils.getInputPeer(channels.chats[0]));\n        case 63:\n          _context6.prev = 63;\n          _context6.t5 = _context6[\"catch\"](56);\n          if (client._log.canSend(Logger_1.LogLevel.ERROR)) {\n            console.error(_context6.t5);\n          }\n        case 66:\n          throw new Error(\"Could not find the input entity for \".concat(JSON.stringify(peer), \".\\n         Please read https://\") + \"docs.telethon.dev/en/stable/concepts/entities.html to\" + \" find out more details.\");\n        case 67:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6, null, [[0, 4], [6, 23], [28, 33], [56, 63]]);\n  }));\n  return _getInputEntity.apply(this, arguments);\n}\nexports.getInputEntity = getInputEntity;\n/** @hidden */\nfunction _getEntityFromString(_x11, _x12) {\n  return _getEntityFromString2.apply(this, arguments);\n}\nfunction _getEntityFromString2() {\n  _getEntityFromString2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(client, string) {\n    var phone, result, _iterator6, _step6, user, id, _1$utils$parseUserna, username, isInvite, invite, _result, pid, _iterator7, _step7, x, _iterator8, _step8, _x23;\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          phone = __1.utils.parsePhone(string);\n          if (!phone) {\n            _context7.next = 31;\n            break;\n          }\n          _context7.prev = 2;\n          _context7.next = 5;\n          return client.invoke(new tl_1.Api.contacts.GetContacts({\n            hash: big_integer_1.default.zero\n          }));\n        case 5:\n          result = _context7.sent;\n          if (result instanceof tl_1.Api.contacts.ContactsNotModified) {\n            _context7.next = 24;\n            break;\n          }\n          _iterator6 = _createForOfIteratorHelper(result.users);\n          _context7.prev = 8;\n          _iterator6.s();\n        case 10:\n          if ((_step6 = _iterator6.n()).done) {\n            _context7.next = 16;\n            break;\n          }\n          user = _step6.value;\n          if (!(user instanceof tl_1.Api.User && user.phone === phone)) {\n            _context7.next = 14;\n            break;\n          }\n          return _context7.abrupt(\"return\", user);\n        case 14:\n          _context7.next = 10;\n          break;\n        case 16:\n          _context7.next = 21;\n          break;\n        case 18:\n          _context7.prev = 18;\n          _context7.t0 = _context7[\"catch\"](8);\n          _iterator6.e(_context7.t0);\n        case 21:\n          _context7.prev = 21;\n          _iterator6.f();\n          return _context7.finish(21);\n        case 24:\n          _context7.next = 31;\n          break;\n        case 26:\n          _context7.prev = 26;\n          _context7.t1 = _context7[\"catch\"](2);\n          if (!(_context7.t1.errorMessage === \"BOT_METHOD_INVALID\")) {\n            _context7.next = 30;\n            break;\n          }\n          throw new Error(\"Cannot get entity by phone number as a \" + \"bot (try using integer IDs, not strings)\");\n        case 30:\n          throw _context7.t1;\n        case 31:\n          id = __1.utils.parseID(string);\n          if (!(id != undefined)) {\n            _context7.next = 36;\n            break;\n          }\n          return _context7.abrupt(\"return\", getInputEntity(client, id));\n        case 36:\n          if (![\"me\", \"this\"].includes(string.toLowerCase())) {\n            _context7.next = 40;\n            break;\n          }\n          return _context7.abrupt(\"return\", client.getMe());\n        case 40:\n          _1$utils$parseUserna = __1.utils.parseUsername(string), username = _1$utils$parseUserna.username, isInvite = _1$utils$parseUserna.isInvite;\n          if (!isInvite) {\n            _context7.next = 53;\n            break;\n          }\n          _context7.next = 44;\n          return client.invoke(new tl_1.Api.messages.CheckChatInvite({\n            hash: username\n          }));\n        case 44:\n          invite = _context7.sent;\n          if (!(invite instanceof tl_1.Api.ChatInvite)) {\n            _context7.next = 49;\n            break;\n          }\n          throw new Error(\"Cannot get entity from a channel (or group) \" + \"that you are not part of. Join the group and retry\");\n        case 49:\n          if (!(invite instanceof tl_1.Api.ChatInviteAlready)) {\n            _context7.next = 51;\n            break;\n          }\n          return _context7.abrupt(\"return\", invite.chat);\n        case 51:\n          _context7.next = 103;\n          break;\n        case 53:\n          if (!username) {\n            _context7.next = 103;\n            break;\n          }\n          _context7.prev = 54;\n          _context7.next = 57;\n          return client.invoke(new tl_1.Api.contacts.ResolveUsername({\n            username: username\n          }));\n        case 57:\n          _result = _context7.sent;\n          pid = __1.utils.getPeerId(_result.peer, false);\n          if (!(_result.peer instanceof tl_1.Api.PeerUser)) {\n            _context7.next = 79;\n            break;\n          }\n          _iterator7 = _createForOfIteratorHelper(_result.users);\n          _context7.prev = 61;\n          _iterator7.s();\n        case 63:\n          if ((_step7 = _iterator7.n()).done) {\n            _context7.next = 69;\n            break;\n          }\n          x = _step7.value;\n          if (!(0, Helpers_1.returnBigInt)(x.id).equals((0, Helpers_1.returnBigInt)(pid))) {\n            _context7.next = 67;\n            break;\n          }\n          return _context7.abrupt(\"return\", x);\n        case 67:\n          _context7.next = 63;\n          break;\n        case 69:\n          _context7.next = 74;\n          break;\n        case 71:\n          _context7.prev = 71;\n          _context7.t2 = _context7[\"catch\"](61);\n          _iterator7.e(_context7.t2);\n        case 74:\n          _context7.prev = 74;\n          _iterator7.f();\n          return _context7.finish(74);\n        case 77:\n          _context7.next = 96;\n          break;\n        case 79:\n          _iterator8 = _createForOfIteratorHelper(_result.chats);\n          _context7.prev = 80;\n          _iterator8.s();\n        case 82:\n          if ((_step8 = _iterator8.n()).done) {\n            _context7.next = 88;\n            break;\n          }\n          _x23 = _step8.value;\n          if (!(0, Helpers_1.returnBigInt)(_x23.id).equals((0, Helpers_1.returnBigInt)(pid))) {\n            _context7.next = 86;\n            break;\n          }\n          return _context7.abrupt(\"return\", _x23);\n        case 86:\n          _context7.next = 82;\n          break;\n        case 88:\n          _context7.next = 93;\n          break;\n        case 90:\n          _context7.prev = 90;\n          _context7.t3 = _context7[\"catch\"](80);\n          _iterator8.e(_context7.t3);\n        case 93:\n          _context7.prev = 93;\n          _iterator8.f();\n          return _context7.finish(93);\n        case 96:\n          _context7.next = 103;\n          break;\n        case 98:\n          _context7.prev = 98;\n          _context7.t4 = _context7[\"catch\"](54);\n          if (!(_context7.t4.errorMessage === \"USERNAME_NOT_OCCUPIED\")) {\n            _context7.next = 102;\n            break;\n          }\n          throw new Error(\"No user has \\\"\".concat(username, \"\\\" as username\"));\n        case 102:\n          throw _context7.t4;\n        case 103:\n          throw new Error(\"Cannot find any entity corresponding to \\\"\".concat(string, \"\\\"\"));\n        case 104:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee7, null, [[2, 26], [8, 18, 21, 24], [54, 98], [61, 71, 74, 77], [80, 90, 93, 96]]);\n  }));\n  return _getEntityFromString2.apply(this, arguments);\n}\nexports._getEntityFromString = _getEntityFromString;\n/** @hidden */\nfunction getPeerId(_x13, _x14) {\n  return _getPeerId.apply(this, arguments);\n}\nfunction _getPeerId() {\n  _getPeerId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(client, peer) {\n    var addMark,\n      valid,\n      _args8 = arguments;\n    return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n      while (1) switch (_context8.prev = _context8.next) {\n        case 0:\n          addMark = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : true;\n          if (!(typeof peer == \"string\")) {\n            _context8.next = 10;\n            break;\n          }\n          valid = (0, Utils_1.parseID)(peer);\n          if (!valid) {\n            _context8.next = 7;\n            break;\n          }\n          return _context8.abrupt(\"return\", __1.utils.getPeerId(peer, addMark));\n        case 7:\n          _context8.next = 9;\n          return client.getInputEntity(peer);\n        case 9:\n          peer = _context8.sent;\n        case 10:\n          if (!(typeof peer == \"number\" || typeof peer == \"bigint\" || big_integer_1.default.isInstance(peer))) {\n            _context8.next = 12;\n            break;\n          }\n          return _context8.abrupt(\"return\", __1.utils.getPeerId(peer, addMark));\n        case 12:\n          if (!(peer.SUBCLASS_OF_ID == 0x2d45687 || peer.SUBCLASS_OF_ID == 0xc91c90b6)) {\n            _context8.next = 16;\n            break;\n          }\n          _context8.next = 15;\n          return client.getInputEntity(peer);\n        case 15:\n          peer = _context8.sent;\n        case 16:\n          if (!(peer instanceof tl_1.Api.InputPeerSelf)) {\n            _context8.next = 20;\n            break;\n          }\n          _context8.next = 19;\n          return client.getMe(true);\n        case 19:\n          peer = _context8.sent;\n        case 20:\n          return _context8.abrupt(\"return\", __1.utils.getPeerId(peer, addMark));\n        case 21:\n        case \"end\":\n          return _context8.stop();\n      }\n    }, _callee8);\n  }));\n  return _getPeerId.apply(this, arguments);\n}\nexports.getPeerId = getPeerId;\n/** @hidden */\nfunction _getPeer(_x15, _x16) {\n  return _getPeer2.apply(this, arguments);\n}\nfunction _getPeer2() {\n  _getPeer2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(client, peer) {\n    var _1$utils$resolveId, _$utils$resolveId, i, cls;\n    return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n      while (1) switch (_context9.prev = _context9.next) {\n        case 0:\n          if (peer) {\n            _context9.next = 2;\n            break;\n          }\n          return _context9.abrupt(\"return\", undefined);\n        case 2:\n          _context9.t0 = __1.utils;\n          _context9.t1 = (0, Helpers_1.returnBigInt);\n          _context9.next = 6;\n          return client.getPeerId(peer);\n        case 6:\n          _context9.t2 = _context9.sent;\n          _context9.t3 = (0, _context9.t1)(_context9.t2);\n          _1$utils$resolveId = _context9.t0.resolveId.call(_context9.t0, _context9.t3);\n          _$utils$resolveId = _slicedToArray(_1$utils$resolveId, 2);\n          i = _$utils$resolveId[0];\n          cls = _$utils$resolveId[1];\n          return _context9.abrupt(\"return\", new cls({\n            userId: i,\n            channelId: i,\n            chatId: i\n          }));\n        case 13:\n        case \"end\":\n          return _context9.stop();\n      }\n    }, _callee9);\n  }));\n  return _getPeer2.apply(this, arguments);\n}\nexports._getPeer = _getPeer;\n/** @hidden */\nfunction _getInputDialog(_x17, _x18) {\n  return _getInputDialog2.apply(this, arguments);\n}\nfunction _getInputDialog2() {\n  _getInputDialog2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(client, dialog) {\n    return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n      while (1) switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.prev = 0;\n          if (!(dialog.SUBCLASS_OF_ID == 0xa21c9795)) {\n            _context10.next = 8;\n            break;\n          }\n          _context10.next = 4;\n          return client.getInputEntity(dialog.peer);\n        case 4:\n          dialog.peer = _context10.sent;\n          return _context10.abrupt(\"return\", dialog);\n        case 8:\n          if (!(dialog.SUBCLASS_OF_ID == 0xc91c90b6)) {\n            _context10.next = 10;\n            break;\n          }\n          return _context10.abrupt(\"return\", new tl_1.Api.InputDialogPeer({\n            peer: dialog\n          }));\n        case 10:\n          _context10.next = 14;\n          break;\n        case 12:\n          _context10.prev = 12;\n          _context10.t0 = _context10[\"catch\"](0);\n        case 14:\n          return _context10.abrupt(\"return\", new tl_1.Api.InputDialogPeer({\n            peer: dialog\n          }));\n        case 15:\n        case \"end\":\n          return _context10.stop();\n      }\n    }, _callee10, null, [[0, 12]]);\n  }));\n  return _getInputDialog2.apply(this, arguments);\n}\nexports._getInputDialog = _getInputDialog;\n/** @hidden */\nfunction _getInputNotify(_x19, _x20) {\n  return _getInputNotify2.apply(this, arguments);\n}\nfunction _getInputNotify2() {\n  _getInputNotify2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(client, notify) {\n    return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n      while (1) switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          if (!(notify.SUBCLASS_OF_ID == 0x58981615)) {\n            _context11.next = 7;\n            break;\n          }\n          if (!(notify instanceof tl_1.Api.InputNotifyPeer)) {\n            _context11.next = 6;\n            break;\n          }\n          _context11.next = 5;\n          return client.getInputEntity(notify.peer);\n        case 5:\n          notify.peer = _context11.sent;\n        case 6:\n          return _context11.abrupt(\"return\", notify);\n        case 7:\n          _context11.next = 11;\n          break;\n        case 9:\n          _context11.prev = 9;\n          _context11.t0 = _context11[\"catch\"](0);\n        case 11:\n          _context11.t1 = tl_1.Api.InputNotifyPeer;\n          _context11.next = 14;\n          return client.getInputEntity(notify);\n        case 14:\n          _context11.t2 = _context11.sent;\n          _context11.t3 = {\n            peer: _context11.t2\n          };\n          return _context11.abrupt(\"return\", new _context11.t1(_context11.t3));\n        case 17:\n        case \"end\":\n          return _context11.stop();\n      }\n    }, _callee11, null, [[0, 9]]);\n  }));\n  return _getInputNotify2.apply(this, arguments);\n}\nexports._getInputNotify = _getInputNotify;\n/** @hidden */\nfunction _selfId(client) {\n  return client._selfInputPeer ? client._selfInputPeer.userId : undefined;\n}\nexports._selfId = _selfId;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","_selfId","_getInputNotify","_getInputDialog","_getPeer","getPeerId","_getEntityFromString","getInputEntity","getEntity","isUserAuthorized","isBot","getMe","invoke","tl_1","require","Utils_1","Helpers_1","__1","big_integer_1","Logger_1","client","request","sender","classType","Error","_sender","undefined","resolve","utils","_lastRequest","Date","getTime","attempt","_requestRetries","promise","send","result","session","processEntities","_entityCache","add","errors","ServerError","errorMessage","_log","warn","constructor","name","sleep","FloodWaitError","FloodTestPhoneWaitError","seconds","floodSleepThreshold","info","className","PhoneMigrateError","NetworkMigrateError","UserMigrateError","newDc","shouldRaise","_switchDC","inputPeer","_selfInputPeer","Api","users","GetUsers","id","InputUserSelf","me","_bot","bot","getInputPeer","InputPeerUser","updates","GetState","entity","single","isArrayLike","entityArray","push","inputs","x","valid","parseID","lists","Map","_EntityType","USER","CHAT","CHANNEL","get","_entityType","e","chats","channels","length","chatIds","map","chatId","messages","GetChats","GetChannels","idEntity","user","set","channel","chat","InputPeerSelf","entries","key","u","User","self","peer","res","default","isInstance","toString","SUBCLASS_OF_ID","includes","returnBigInt","getPeer","PeerUser","InputUser","userId","accessHash","zero","UserEmpty","PeerChat","InputPeerChat","PeerChannel","InputChannel","channelId","canSend","LogLevel","ERROR","console","error","JSON","stringify","string","phone","parsePhone","contacts","GetContacts","hash","ContactsNotModified","toLowerCase","parseUsername","username","isInvite","CheckChatInvite","invite","ChatInvite","ChatInviteAlready","ResolveUsername","pid","equals","addMark","resolveId","i","cls","dialog","InputDialogPeer","notify","InputNotifyPeer"],"sources":["C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/telegram/client/users.js"],"sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports._selfId = exports._getInputNotify = exports._getInputDialog = exports._getPeer = exports.getPeerId = exports._getEntityFromString = exports.getInputEntity = exports.getEntity = exports.isUserAuthorized = exports.isBot = exports.getMe = exports.invoke = void 0;\r\nconst tl_1 = require(\"../tl\");\r\nconst Utils_1 = require(\"../Utils\");\r\nconst Helpers_1 = require(\"../Helpers\");\r\nconst __1 = require(\"../\");\r\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\r\nconst Logger_1 = require(\"../extensions/Logger\");\r\n// UserMethods {\r\n// region Invoking Telegram request\r\n/** @hidden */\r\nasync function invoke(client, request, sender) {\r\n    if (request.classType !== \"request\") {\r\n        throw new Error(\"You can only invoke MTProtoRequests\");\r\n    }\r\n    if (!sender) {\r\n        sender = client._sender;\r\n    }\r\n    if (sender == undefined) {\r\n        throw new Error(\"Cannot send requests while disconnected. You need to call .connect()\");\r\n    }\r\n    await request.resolve(client, __1.utils);\r\n    client._lastRequest = new Date().getTime();\r\n    let attempt;\r\n    for (attempt = 0; attempt < client._requestRetries; attempt++) {\r\n        try {\r\n            const promise = sender.send(request);\r\n            const result = await promise;\r\n            client.session.processEntities(result);\r\n            client._entityCache.add(result);\r\n            return result;\r\n        }\r\n        catch (e) {\r\n            if (e instanceof __1.errors.ServerError ||\r\n                e.errorMessage === \"RPC_CALL_FAIL\" ||\r\n                e.errorMessage === \"RPC_MCGET_FAIL\") {\r\n                client._log.warn(`Telegram is having internal issues ${e.constructor.name}`);\r\n                await (0, Helpers_1.sleep)(2000);\r\n            }\r\n            else if (e instanceof __1.errors.FloodWaitError ||\r\n                e instanceof __1.errors.FloodTestPhoneWaitError) {\r\n                if (e.seconds <= client.floodSleepThreshold) {\r\n                    client._log.info(`Sleeping for ${e.seconds}s on flood wait (Caused by ${request.className})`);\r\n                    await (0, Helpers_1.sleep)(e.seconds * 1000);\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n            else if (e instanceof __1.errors.PhoneMigrateError ||\r\n                e instanceof __1.errors.NetworkMigrateError ||\r\n                e instanceof __1.errors.UserMigrateError) {\r\n                client._log.info(`Phone migrated to ${e.newDc}`);\r\n                const shouldRaise = e instanceof __1.errors.PhoneMigrateError ||\r\n                    e instanceof __1.errors.NetworkMigrateError;\r\n                if (shouldRaise && (await client.isUserAuthorized())) {\r\n                    throw e;\r\n                }\r\n                await client._switchDC(e.newDc);\r\n            }\r\n            else {\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n    throw new Error(`Request was unsuccessful ${attempt} time(s)`);\r\n}\r\nexports.invoke = invoke;\r\n/** @hidden */\r\nasync function getMe(client, inputPeer = false) {\r\n    if (inputPeer && client._selfInputPeer) {\r\n        return client._selfInputPeer;\r\n    }\r\n    const me = (await client.invoke(new tl_1.Api.users.GetUsers({ id: [new tl_1.Api.InputUserSelf()] })))[0];\r\n    client._bot = me.bot;\r\n    if (!client._selfInputPeer) {\r\n        client._selfInputPeer = __1.utils.getInputPeer(me, false);\r\n    }\r\n    return inputPeer ? client._selfInputPeer : me;\r\n}\r\nexports.getMe = getMe;\r\n/** @hidden */\r\nasync function isBot(client) {\r\n    if (client._bot === undefined) {\r\n        const me = await client.getMe();\r\n        if (me) {\r\n            return !(me instanceof tl_1.Api.InputPeerUser) ? me.bot : undefined;\r\n        }\r\n    }\r\n    return client._bot;\r\n}\r\nexports.isBot = isBot;\r\n/** @hidden */\r\nasync function isUserAuthorized(client) {\r\n    try {\r\n        await client.invoke(new tl_1.Api.updates.GetState());\r\n        return true;\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\nexports.isUserAuthorized = isUserAuthorized;\r\n/** @hidden */\r\nasync function getEntity(client, entity) {\r\n    const single = !(0, Helpers_1.isArrayLike)(entity);\r\n    let entityArray = [];\r\n    if ((0, Helpers_1.isArrayLike)(entity)) {\r\n        entityArray = entity;\r\n    }\r\n    else {\r\n        entityArray.push(entity);\r\n    }\r\n    const inputs = [];\r\n    for (const x of entityArray) {\r\n        if (typeof x === \"string\") {\r\n            const valid = (0, Utils_1.parseID)(x);\r\n            if (valid) {\r\n                inputs.push(await client.getInputEntity(valid));\r\n            }\r\n            else {\r\n                inputs.push(x);\r\n            }\r\n        }\r\n        else {\r\n            inputs.push(await client.getInputEntity(x));\r\n        }\r\n    }\r\n    const lists = new Map([\r\n        [Helpers_1._EntityType.USER, []],\r\n        [Helpers_1._EntityType.CHAT, []],\r\n        [Helpers_1._EntityType.CHANNEL, []],\r\n    ]);\r\n    for (const x of inputs) {\r\n        try {\r\n            lists.get((0, Helpers_1._entityType)(x)).push(x);\r\n        }\r\n        catch (e) { }\r\n    }\r\n    let users = lists.get(Helpers_1._EntityType.USER);\r\n    let chats = lists.get(Helpers_1._EntityType.CHAT);\r\n    let channels = lists.get(Helpers_1._EntityType.CHANNEL);\r\n    if (users.length) {\r\n        users = await client.invoke(new tl_1.Api.users.GetUsers({\r\n            id: users,\r\n        }));\r\n    }\r\n    if (chats.length) {\r\n        const chatIds = chats.map((x) => x.chatId);\r\n        chats = (await client.invoke(new tl_1.Api.messages.GetChats({ id: chatIds }))).chats;\r\n    }\r\n    if (channels.length) {\r\n        channels = (await client.invoke(new tl_1.Api.channels.GetChannels({ id: channels }))).chats;\r\n    }\r\n    const idEntity = new Map();\r\n    for (const user of users) {\r\n        idEntity.set((0, Utils_1.getPeerId)(user), user);\r\n    }\r\n    for (const channel of channels) {\r\n        idEntity.set((0, Utils_1.getPeerId)(channel), channel);\r\n    }\r\n    for (const chat of chats) {\r\n        idEntity.set((0, Utils_1.getPeerId)(chat), chat);\r\n    }\r\n    const result = [];\r\n    for (const x of inputs) {\r\n        if (typeof x === \"string\") {\r\n            result.push(await _getEntityFromString(client, x));\r\n        }\r\n        else if (!(x instanceof tl_1.Api.InputPeerSelf)) {\r\n            result.push(idEntity.get((0, Utils_1.getPeerId)(x)));\r\n        }\r\n        else {\r\n            for (const [key, u] of idEntity.entries()) {\r\n                if (u instanceof tl_1.Api.User && u.self) {\r\n                    result.push(u);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return single ? result[0] : result;\r\n}\r\nexports.getEntity = getEntity;\r\n/** @hidden */\r\nasync function getInputEntity(client, peer) {\r\n    // Short-circuit if the input parameter directly maps to an InputPeer\r\n    try {\r\n        return __1.utils.getInputPeer(peer);\r\n        // eslint-disable-next-line no-empty\r\n    }\r\n    catch (e) { }\r\n    // Next in priority is having a peer (or its ID) cached in-memory\r\n    try {\r\n        if (typeof peer == \"string\") {\r\n            const valid = (0, Utils_1.parseID)(peer);\r\n            if (valid) {\r\n                const res = client._entityCache.get(peer);\r\n                if (res) {\r\n                    return res;\r\n                }\r\n            }\r\n        }\r\n        if (typeof peer === \"number\" ||\r\n            typeof peer === \"bigint\" ||\r\n            big_integer_1.default.isInstance(peer)) {\r\n            const res = client._entityCache.get(peer.toString());\r\n            if (res) {\r\n                return res;\r\n            }\r\n        }\r\n        // 0x2d45687 == crc32(b'Peer')\r\n        if (typeof peer == \"object\" &&\r\n            !big_integer_1.default.isInstance(peer) &&\r\n            peer.SUBCLASS_OF_ID === 0x2d45687) {\r\n            const res = client._entityCache.get(__1.utils.getPeerId(peer));\r\n            if (res) {\r\n                return res;\r\n            }\r\n        }\r\n        // eslint-disable-next-line no-empty\r\n    }\r\n    catch (e) { }\r\n    // Then come known strings that take precedence\r\n    if (typeof peer == \"string\") {\r\n        if ([\"me\", \"this\", \"self\"].includes(peer)) {\r\n            return new tl_1.Api.InputPeerSelf();\r\n        }\r\n    }\r\n    // No InputPeer, cached peer, or known string. Fetch from disk cache\r\n    try {\r\n        if (peer != undefined) {\r\n            return client.session.getInputEntity(peer);\r\n        }\r\n        // eslint-disable-next-line no-empty\r\n    }\r\n    catch (e) { }\r\n    // Only network left to try\r\n    if (typeof peer === \"string\") {\r\n        return __1.utils.getInputPeer(await _getEntityFromString(client, peer));\r\n    }\r\n    // If we're a bot and the user has messaged us privately users.getUsers\r\n    // will work with accessHash = 0. Similar for channels.getChannels.\r\n    // If we're not a bot but the user is in our contacts, it seems to work\r\n    // regardless. These are the only two special-cased requests.\r\n    if (typeof peer === \"number\") {\r\n        peer = (0, Helpers_1.returnBigInt)(peer);\r\n    }\r\n    peer = __1.utils.getPeer(peer);\r\n    if (peer instanceof tl_1.Api.PeerUser) {\r\n        const users = await client.invoke(new tl_1.Api.users.GetUsers({\r\n            id: [\r\n                new tl_1.Api.InputUser({\r\n                    userId: peer.userId,\r\n                    accessHash: big_integer_1.default.zero,\r\n                }),\r\n            ],\r\n        }));\r\n        if (users.length && !(users[0] instanceof tl_1.Api.UserEmpty)) {\r\n            // If the user passed a valid ID they expect to work for\r\n            // channels but would be valid for users, we get UserEmpty.\r\n            // Avoid returning the invalid empty input peer for that.\r\n            //\r\n            // We *could* try to guess if it's a channel first, and if\r\n            // it's not, work as a chat and try to validate it through\r\n            // another request, but that becomes too much work.\r\n            return __1.utils.getInputPeer(users[0]);\r\n        }\r\n    }\r\n    else if (peer instanceof tl_1.Api.PeerChat) {\r\n        return new tl_1.Api.InputPeerChat({\r\n            chatId: peer.chatId,\r\n        });\r\n    }\r\n    else if (peer instanceof tl_1.Api.PeerChannel) {\r\n        try {\r\n            const channels = await client.invoke(new tl_1.Api.channels.GetChannels({\r\n                id: [\r\n                    new tl_1.Api.InputChannel({\r\n                        channelId: peer.channelId,\r\n                        accessHash: big_integer_1.default.zero,\r\n                    }),\r\n                ],\r\n            }));\r\n            return __1.utils.getInputPeer(channels.chats[0]);\r\n        }\r\n        catch (e) {\r\n            if (client._log.canSend(Logger_1.LogLevel.ERROR)) {\r\n                console.error(e);\r\n            }\r\n        }\r\n    }\r\n    throw new Error(`Could not find the input entity for ${JSON.stringify(peer)}.\r\n         Please read https://` +\r\n        \"docs.telethon.dev/en/stable/concepts/entities.html to\" +\r\n        \" find out more details.\");\r\n}\r\nexports.getInputEntity = getInputEntity;\r\n/** @hidden */\r\nasync function _getEntityFromString(client, string) {\r\n    const phone = __1.utils.parsePhone(string);\r\n    if (phone) {\r\n        try {\r\n            const result = await client.invoke(new tl_1.Api.contacts.GetContacts({\r\n                hash: big_integer_1.default.zero,\r\n            }));\r\n            if (!(result instanceof tl_1.Api.contacts.ContactsNotModified)) {\r\n                for (const user of result.users) {\r\n                    if (user instanceof tl_1.Api.User && user.phone === phone) {\r\n                        return user;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            if (e.errorMessage === \"BOT_METHOD_INVALID\") {\r\n                throw new Error(\"Cannot get entity by phone number as a \" +\r\n                    \"bot (try using integer IDs, not strings)\");\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n    const id = __1.utils.parseID(string);\r\n    if (id != undefined) {\r\n        return getInputEntity(client, id);\r\n    }\r\n    else if ([\"me\", \"this\"].includes(string.toLowerCase())) {\r\n        return client.getMe();\r\n    }\r\n    else {\r\n        const { username, isInvite } = __1.utils.parseUsername(string);\r\n        if (isInvite) {\r\n            const invite = await client.invoke(new tl_1.Api.messages.CheckChatInvite({\r\n                hash: username,\r\n            }));\r\n            if (invite instanceof tl_1.Api.ChatInvite) {\r\n                throw new Error(\"Cannot get entity from a channel (or group) \" +\r\n                    \"that you are not part of. Join the group and retry\");\r\n            }\r\n            else if (invite instanceof tl_1.Api.ChatInviteAlready) {\r\n                return invite.chat;\r\n            }\r\n        }\r\n        else if (username) {\r\n            try {\r\n                const result = await client.invoke(new tl_1.Api.contacts.ResolveUsername({ username: username }));\r\n                const pid = __1.utils.getPeerId(result.peer, false);\r\n                if (result.peer instanceof tl_1.Api.PeerUser) {\r\n                    for (const x of result.users) {\r\n                        if ((0, Helpers_1.returnBigInt)(x.id).equals((0, Helpers_1.returnBigInt)(pid))) {\r\n                            return x;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    for (const x of result.chats) {\r\n                        if ((0, Helpers_1.returnBigInt)(x.id).equals((0, Helpers_1.returnBigInt)(pid))) {\r\n                            return x;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            catch (e) {\r\n                if (e.errorMessage === \"USERNAME_NOT_OCCUPIED\") {\r\n                    throw new Error(`No user has \"${username}\" as username`);\r\n                }\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n    throw new Error(`Cannot find any entity corresponding to \"${string}\"`);\r\n}\r\nexports._getEntityFromString = _getEntityFromString;\r\n/** @hidden */\r\nasync function getPeerId(client, peer, addMark = true) {\r\n    if (typeof peer == \"string\") {\r\n        const valid = (0, Utils_1.parseID)(peer);\r\n        if (valid) {\r\n            return __1.utils.getPeerId(peer, addMark);\r\n        }\r\n        else {\r\n            peer = await client.getInputEntity(peer);\r\n        }\r\n    }\r\n    if (typeof peer == \"number\" ||\r\n        typeof peer == \"bigint\" ||\r\n        big_integer_1.default.isInstance(peer)) {\r\n        return __1.utils.getPeerId(peer, addMark);\r\n    }\r\n    if (peer.SUBCLASS_OF_ID == 0x2d45687 || peer.SUBCLASS_OF_ID == 0xc91c90b6) {\r\n        peer = await client.getInputEntity(peer);\r\n    }\r\n    if (peer instanceof tl_1.Api.InputPeerSelf) {\r\n        peer = await client.getMe(true);\r\n    }\r\n    return __1.utils.getPeerId(peer, addMark);\r\n}\r\nexports.getPeerId = getPeerId;\r\n/** @hidden */\r\nasync function _getPeer(client, peer) {\r\n    if (!peer) {\r\n        return undefined;\r\n    }\r\n    const [i, cls] = __1.utils.resolveId((0, Helpers_1.returnBigInt)(await client.getPeerId(peer)));\r\n    return new cls({\r\n        userId: i,\r\n        channelId: i,\r\n        chatId: i,\r\n    });\r\n}\r\nexports._getPeer = _getPeer;\r\n/** @hidden */\r\nasync function _getInputDialog(client, dialog) {\r\n    try {\r\n        if (dialog.SUBCLASS_OF_ID == 0xa21c9795) {\r\n            // crc32(b'InputDialogPeer')\r\n            dialog.peer = await client.getInputEntity(dialog.peer);\r\n            return dialog;\r\n        }\r\n        else if (dialog.SUBCLASS_OF_ID == 0xc91c90b6) {\r\n            //crc32(b'InputPeer')\r\n            return new tl_1.Api.InputDialogPeer({\r\n                peer: dialog,\r\n            });\r\n        }\r\n    }\r\n    catch (e) { }\r\n    return new tl_1.Api.InputDialogPeer({\r\n        peer: dialog,\r\n    });\r\n}\r\nexports._getInputDialog = _getInputDialog;\r\n/** @hidden */\r\nasync function _getInputNotify(client, notify) {\r\n    try {\r\n        if (notify.SUBCLASS_OF_ID == 0x58981615) {\r\n            if (notify instanceof tl_1.Api.InputNotifyPeer) {\r\n                notify.peer = await client.getInputEntity(notify.peer);\r\n            }\r\n            return notify;\r\n        }\r\n    }\r\n    catch (e) { }\r\n    return new tl_1.Api.InputNotifyPeer({\r\n        peer: await client.getInputEntity(notify),\r\n    });\r\n}\r\nexports._getInputNotify = _getInputNotify;\r\n/** @hidden */\r\nfunction _selfId(client) {\r\n    return client._selfInputPeer ? client._selfInputPeer.userId : undefined;\r\n}\r\nexports._selfId = _selfId;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}