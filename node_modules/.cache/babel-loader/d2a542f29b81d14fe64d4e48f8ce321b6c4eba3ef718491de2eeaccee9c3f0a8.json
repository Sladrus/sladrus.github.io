{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _regeneratorRuntime = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _createForOfIteratorHelper = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _toConsumableArray = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._getResponseMessage = exports._parseMessageText = exports._replaceWithMention = exports.DEFAULT_DELIMITERS = void 0;\nvar Utils_1 = require(\"../Utils\");\nvar api_1 = require(\"../tl/api\");\nvar index_1 = require(\"../index\");\nvar Helpers_1 = require(\"../Helpers\");\nvar big_integer_1 = __importDefault(require(\"big-integer\"));\nexports.DEFAULT_DELIMITERS = {\n  \"**\": api_1.Api.MessageEntityBold,\n  __: api_1.Api.MessageEntityItalic,\n  \"~~\": api_1.Api.MessageEntityStrike,\n  \"`\": api_1.Api.MessageEntityCode,\n  \"```\": api_1.Api.MessageEntityPre\n};\n/** @hidden */\nfunction _replaceWithMention(_x, _x2, _x3, _x4) {\n  return _replaceWithMention2.apply(this, arguments);\n}\nfunction _replaceWithMention2() {\n  _replaceWithMention2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(client, entities, i, user) {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.t0 = api_1.Api.InputMessageEntityMentionName;\n          _context.t1 = entities[i].offset;\n          _context.t2 = entities[i].length;\n          _context.next = 6;\n          return client.getInputEntity(user);\n        case 6:\n          _context.t3 = _context.sent;\n          _context.t4 = {\n            offset: _context.t1,\n            length: _context.t2,\n            userId: _context.t3\n          };\n          entities[i] = new _context.t0(_context.t4);\n          return _context.abrupt(\"return\", true);\n        case 12:\n          _context.prev = 12;\n          _context.t5 = _context[\"catch\"](0);\n          return _context.abrupt(\"return\", false);\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[0, 12]]);\n  }));\n  return _replaceWithMention2.apply(this, arguments);\n}\nexports._replaceWithMention = _replaceWithMention;\n/** @hidden */\nfunction _parseMessageText(_x5, _x6, _x7) {\n  return _parseMessageText2.apply(this, arguments);\n}\nfunction _parseMessageText2() {\n  _parseMessageText2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(client, message, parseMode) {\n    var _parseMode$parse, _parseMode$parse2, rawMessage, msgEntities, i, e, m, userIdOrUsername, isMention;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(parseMode == false)) {\n            _context2.next = 2;\n            break;\n          }\n          return _context2.abrupt(\"return\", [message, []]);\n        case 2:\n          if (!(parseMode == undefined)) {\n            _context2.next = 8;\n            break;\n          }\n          if (!(client.parseMode == undefined)) {\n            _context2.next = 5;\n            break;\n          }\n          return _context2.abrupt(\"return\", [message, []]);\n        case 5:\n          parseMode = client.parseMode;\n          _context2.next = 9;\n          break;\n        case 8:\n          if (typeof parseMode === \"string\") {\n            parseMode = (0, Utils_1.sanitizeParseMode)(parseMode);\n          }\n        case 9:\n          _parseMode$parse = parseMode.parse(message), _parseMode$parse2 = _slicedToArray(_parseMode$parse, 2), rawMessage = _parseMode$parse2[0], msgEntities = _parseMode$parse2[1];\n          i = msgEntities.length - 1;\n        case 11:\n          if (!(i >= 0)) {\n            _context2.next = 24;\n            break;\n          }\n          e = msgEntities[i];\n          if (!(e instanceof api_1.Api.MessageEntityTextUrl)) {\n            _context2.next = 21;\n            break;\n          }\n          m = /^@|\\+|tg:\\/\\/user\\?id=(\\d+)/.exec(e.url);\n          if (!m) {\n            _context2.next = 21;\n            break;\n          }\n          userIdOrUsername = m[1] ? Number(m[1]) : e.url;\n          _context2.next = 19;\n          return _replaceWithMention(client, msgEntities, i, userIdOrUsername);\n        case 19:\n          isMention = _context2.sent;\n          if (!isMention) {\n            msgEntities.splice(i, 1);\n          }\n        case 21:\n          i--;\n          _context2.next = 11;\n          break;\n        case 24:\n          return _context2.abrupt(\"return\", [rawMessage, msgEntities]);\n        case 25:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _parseMessageText2.apply(this, arguments);\n}\nexports._parseMessageText = _parseMessageText;\n/** @hidden */\nfunction _getResponseMessage(client, request, result, inputChat) {\n  var updates = [];\n  var entities = new Map();\n  if (result instanceof api_1.Api.UpdateShort) {\n    updates = [result.update];\n  } else if (result instanceof api_1.Api.Updates || result instanceof api_1.Api.UpdatesCombined) {\n    updates = result.updates;\n    for (var _i = 0, _arr = [].concat(_toConsumableArray(result.users), _toConsumableArray(result.chats)); _i < _arr.length; _i++) {\n      var x = _arr[_i];\n      entities.set(index_1.utils.getPeerId(x), x);\n    }\n  } else {\n    return;\n  }\n  var randomToId = new Map();\n  var idToMessage = new Map();\n  var schedMessage;\n  var _iterator = _createForOfIteratorHelper(updates),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var update = _step.value;\n      if (update instanceof api_1.Api.UpdateMessageID) {\n        randomToId.set(update.randomId.toString(), update.id);\n      } else if (update instanceof api_1.Api.UpdateNewChannelMessage || update instanceof api_1.Api.UpdateNewMessage) {\n        update.message._finishInit(client, entities, inputChat);\n        if (\"randomId\" in request || (0, Helpers_1.isArrayLike)(request)) {\n          idToMessage.set(update.message.id, update.message);\n        } else {\n          return update.message;\n        }\n      } else if (update instanceof api_1.Api.UpdateEditMessage && \"peer\" in request && (0, Helpers_1._entityType)(request.peer) != Helpers_1._EntityType.CHANNEL) {\n        update.message._finishInit(client, entities, inputChat);\n        if (\"randomId\" in request) {\n          idToMessage.set(update.message.id, update.message);\n        } else if (\"id\" in request && request.id === update.message.id) {\n          return update.message;\n        }\n      } else if (update instanceof api_1.Api.UpdateEditChannelMessage && \"peer\" in request && (0, Utils_1.getPeerId)(request.peer) == (0, Utils_1.getPeerId)(update.message.peerId)) {\n        if (request.id == update.message.id) {\n          update.message._finishInit(client, entities, inputChat);\n          return update.message;\n        }\n      } else if (update instanceof api_1.Api.UpdateNewScheduledMessage) {\n        update.message._finishInit(client, entities, inputChat);\n        schedMessage = update.message;\n        idToMessage.set(update.message.id, update.message);\n      } else if (update instanceof api_1.Api.UpdateMessagePoll) {\n        if (request.media.poll.id == update.pollId) {\n          var m = new api_1.Api.Message({\n            id: request.id,\n            peerId: index_1.utils.getPeerId(request.peer),\n            media: new api_1.Api.MessageMediaPoll({\n              poll: update.poll,\n              results: update.results\n            }),\n            message: \"\",\n            date: 0\n          });\n          m._finishInit(client, entities, inputChat);\n          return m;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  if (request == undefined) {\n    return idToMessage;\n  }\n  var randomId;\n  if ((0, Helpers_1.isArrayLike)(request) || typeof request == \"number\" || big_integer_1.default.isInstance(request)) {\n    randomId = request;\n  } else {\n    randomId = request.randomId;\n  }\n  if (!randomId) {\n    if (schedMessage) {\n      return schedMessage;\n    }\n    client._log.warn(\"No randomId in \".concat(request, \" to map to. returning undefined for \").concat(result));\n    return undefined;\n  }\n  if (!(0, Helpers_1.isArrayLike)(randomId)) {\n    var msg = idToMessage.get(randomToId.get(randomId.toString()));\n    if (!msg) {\n      client._log.warn(\"Request \".concat(request.className, \" had missing message mapping \").concat(result.className));\n    }\n    return msg;\n  }\n  var final = [];\n  var warned = false;\n  var _iterator2 = _createForOfIteratorHelper(randomId),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var rnd = _step2.value;\n      var tmp = randomToId.get(rnd.toString());\n      if (!tmp) {\n        warned = true;\n        break;\n      }\n      var tmp2 = idToMessage.get(tmp);\n      if (!tmp2) {\n        warned = true;\n        break;\n      }\n      final.push(tmp2);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  if (warned) {\n    client._log.warn(\"Request \".concat(request.className, \" had missing message mapping \").concat(result.className));\n  }\n  var finalToReturn = [];\n  var _iterator3 = _createForOfIteratorHelper(randomId),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _rnd = _step3.value;\n      finalToReturn.push(idToMessage.get(randomToId.get(_rnd.toString())));\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  return finalToReturn;\n}\nexports._getResponseMessage = _getResponseMessage;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","_getResponseMessage","_parseMessageText","_replaceWithMention","DEFAULT_DELIMITERS","Utils_1","require","api_1","index_1","Helpers_1","big_integer_1","Api","MessageEntityBold","__","MessageEntityItalic","MessageEntityStrike","MessageEntityCode","MessageEntityPre","client","entities","i","user","InputMessageEntityMentionName","offset","length","getInputEntity","userId","message","parseMode","undefined","sanitizeParseMode","parse","rawMessage","msgEntities","e","MessageEntityTextUrl","m","exec","url","userIdOrUsername","Number","isMention","splice","request","result","inputChat","updates","Map","UpdateShort","update","Updates","UpdatesCombined","users","chats","x","set","utils","getPeerId","randomToId","idToMessage","schedMessage","UpdateMessageID","randomId","toString","id","UpdateNewChannelMessage","UpdateNewMessage","_finishInit","isArrayLike","UpdateEditMessage","_entityType","peer","_EntityType","CHANNEL","UpdateEditChannelMessage","peerId","UpdateNewScheduledMessage","UpdateMessagePoll","media","poll","pollId","Message","MessageMediaPoll","results","date","default","isInstance","_log","warn","msg","get","className","final","warned","rnd","tmp","tmp2","push","finalToReturn"],"sources":["C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/telegram/client/messageParse.js"],"sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports._getResponseMessage = exports._parseMessageText = exports._replaceWithMention = exports.DEFAULT_DELIMITERS = void 0;\r\nconst Utils_1 = require(\"../Utils\");\r\nconst api_1 = require(\"../tl/api\");\r\nconst index_1 = require(\"../index\");\r\nconst Helpers_1 = require(\"../Helpers\");\r\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\r\nexports.DEFAULT_DELIMITERS = {\r\n    \"**\": api_1.Api.MessageEntityBold,\r\n    __: api_1.Api.MessageEntityItalic,\r\n    \"~~\": api_1.Api.MessageEntityStrike,\r\n    \"`\": api_1.Api.MessageEntityCode,\r\n    \"```\": api_1.Api.MessageEntityPre,\r\n};\r\n/** @hidden */\r\nasync function _replaceWithMention(client, entities, i, user) {\r\n    try {\r\n        entities[i] = new api_1.Api.InputMessageEntityMentionName({\r\n            offset: entities[i].offset,\r\n            length: entities[i].length,\r\n            userId: (await client.getInputEntity(user)),\r\n        });\r\n        return true;\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\nexports._replaceWithMention = _replaceWithMention;\r\n/** @hidden */\r\nasync function _parseMessageText(client, message, parseMode) {\r\n    if (parseMode == false) {\r\n        return [message, []];\r\n    }\r\n    if (parseMode == undefined) {\r\n        if (client.parseMode == undefined) {\r\n            return [message, []];\r\n        }\r\n        parseMode = client.parseMode;\r\n    }\r\n    else if (typeof parseMode === \"string\") {\r\n        parseMode = (0, Utils_1.sanitizeParseMode)(parseMode);\r\n    }\r\n    const [rawMessage, msgEntities] = parseMode.parse(message);\r\n    for (let i = msgEntities.length - 1; i >= 0; i--) {\r\n        const e = msgEntities[i];\r\n        if (e instanceof api_1.Api.MessageEntityTextUrl) {\r\n            const m = /^@|\\+|tg:\\/\\/user\\?id=(\\d+)/.exec(e.url);\r\n            if (m) {\r\n                const userIdOrUsername = m[1] ? Number(m[1]) : e.url;\r\n                const isMention = await _replaceWithMention(client, msgEntities, i, userIdOrUsername);\r\n                if (!isMention) {\r\n                    msgEntities.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return [rawMessage, msgEntities];\r\n}\r\nexports._parseMessageText = _parseMessageText;\r\n/** @hidden */\r\nfunction _getResponseMessage(client, request, result, inputChat) {\r\n    let updates = [];\r\n    let entities = new Map();\r\n    if (result instanceof api_1.Api.UpdateShort) {\r\n        updates = [result.update];\r\n    }\r\n    else if (result instanceof api_1.Api.Updates ||\r\n        result instanceof api_1.Api.UpdatesCombined) {\r\n        updates = result.updates;\r\n        for (const x of [...result.users, ...result.chats]) {\r\n            entities.set(index_1.utils.getPeerId(x), x);\r\n        }\r\n    }\r\n    else {\r\n        return;\r\n    }\r\n    const randomToId = new Map();\r\n    const idToMessage = new Map();\r\n    let schedMessage;\r\n    for (const update of updates) {\r\n        if (update instanceof api_1.Api.UpdateMessageID) {\r\n            randomToId.set(update.randomId.toString(), update.id);\r\n        }\r\n        else if (update instanceof api_1.Api.UpdateNewChannelMessage ||\r\n            update instanceof api_1.Api.UpdateNewMessage) {\r\n            update.message._finishInit(client, entities, inputChat);\r\n            if (\"randomId\" in request || (0, Helpers_1.isArrayLike)(request)) {\r\n                idToMessage.set(update.message.id, update.message);\r\n            }\r\n            else {\r\n                return update.message;\r\n            }\r\n        }\r\n        else if (update instanceof api_1.Api.UpdateEditMessage &&\r\n            \"peer\" in request &&\r\n            (0, Helpers_1._entityType)(request.peer) != Helpers_1._EntityType.CHANNEL) {\r\n            update.message._finishInit(client, entities, inputChat);\r\n            if (\"randomId\" in request) {\r\n                idToMessage.set(update.message.id, update.message);\r\n            }\r\n            else if (\"id\" in request && request.id === update.message.id) {\r\n                return update.message;\r\n            }\r\n        }\r\n        else if (update instanceof api_1.Api.UpdateEditChannelMessage &&\r\n            \"peer\" in request &&\r\n            (0, Utils_1.getPeerId)(request.peer) ==\r\n                (0, Utils_1.getPeerId)(update.message.peerId)) {\r\n            if (request.id == update.message.id) {\r\n                update.message._finishInit(client, entities, inputChat);\r\n                return update.message;\r\n            }\r\n        }\r\n        else if (update instanceof api_1.Api.UpdateNewScheduledMessage) {\r\n            update.message._finishInit(client, entities, inputChat);\r\n            schedMessage = update.message;\r\n            idToMessage.set(update.message.id, update.message);\r\n        }\r\n        else if (update instanceof api_1.Api.UpdateMessagePoll) {\r\n            if (request.media.poll.id == update.pollId) {\r\n                const m = new api_1.Api.Message({\r\n                    id: request.id,\r\n                    peerId: index_1.utils.getPeerId(request.peer),\r\n                    media: new api_1.Api.MessageMediaPoll({\r\n                        poll: update.poll,\r\n                        results: update.results,\r\n                    }),\r\n                    message: \"\",\r\n                    date: 0,\r\n                });\r\n                m._finishInit(client, entities, inputChat);\r\n                return m;\r\n            }\r\n        }\r\n    }\r\n    if (request == undefined) {\r\n        return idToMessage;\r\n    }\r\n    let randomId;\r\n    if ((0, Helpers_1.isArrayLike)(request) ||\r\n        typeof request == \"number\" ||\r\n        big_integer_1.default.isInstance(request)) {\r\n        randomId = request;\r\n    }\r\n    else {\r\n        randomId = request.randomId;\r\n    }\r\n    if (!randomId) {\r\n        if (schedMessage) {\r\n            return schedMessage;\r\n        }\r\n        client._log.warn(`No randomId in ${request} to map to. returning undefined for ${result}`);\r\n        return undefined;\r\n    }\r\n    if (!(0, Helpers_1.isArrayLike)(randomId)) {\r\n        let msg = idToMessage.get(randomToId.get(randomId.toString()));\r\n        if (!msg) {\r\n            client._log.warn(`Request ${request.className} had missing message mapping ${result.className}`);\r\n        }\r\n        return msg;\r\n    }\r\n    const final = [];\r\n    let warned = false;\r\n    for (const rnd of randomId) {\r\n        const tmp = randomToId.get(rnd.toString());\r\n        if (!tmp) {\r\n            warned = true;\r\n            break;\r\n        }\r\n        const tmp2 = idToMessage.get(tmp);\r\n        if (!tmp2) {\r\n            warned = true;\r\n            break;\r\n        }\r\n        final.push(tmp2);\r\n    }\r\n    if (warned) {\r\n        client._log.warn(`Request ${request.className} had missing message mapping ${result.className}`);\r\n    }\r\n    const finalToReturn = [];\r\n    for (const rnd of randomId) {\r\n        finalToReturn.push(idToMessage.get(randomToId.get(rnd.toString())));\r\n    }\r\n    return finalToReturn;\r\n}\r\nexports._getResponseMessage = _getResponseMessage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}