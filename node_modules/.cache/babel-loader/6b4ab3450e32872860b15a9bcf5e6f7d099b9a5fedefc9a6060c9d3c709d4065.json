{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionTCPFull = exports.FullPacketCodec = void 0;\nvar buffer_1 = require(\"buffer/\");\nvar Connection_1 = require(\"./Connection\");\nvar Helpers_1 = require(\"../../Helpers\");\nvar errors_1 = require(\"../../errors\");\nvar FullPacketCodec = /*#__PURE__*/function (_Connection_1$PacketC) {\n  _inherits(FullPacketCodec, _Connection_1$PacketC);\n  var _super = _createSuper(FullPacketCodec);\n  function FullPacketCodec(connection) {\n    var _this;\n    _classCallCheck(this, FullPacketCodec);\n    _this = _super.call(this, connection);\n    _this._sendCounter = 0; // Telegram will ignore us otherwise\n    return _this;\n  }\n  _createClass(FullPacketCodec, [{\n    key: \"encodePacket\",\n    value: function encodePacket(data) {\n      // https://core.telegram.org/mtproto#tcp-transport\n      // total length, sequence number, packet and checksum (CRC32)\n      var length = data.length + 12;\n      var e = buffer_1.Buffer.alloc(8);\n      e.writeInt32LE(length, 0);\n      e.writeInt32LE(this._sendCounter, 4);\n      data = buffer_1.Buffer.concat([e, data]);\n      var crc = buffer_1.Buffer.alloc(4);\n      crc.writeUInt32LE((0, Helpers_1.crc32)(data), 0);\n      this._sendCounter += 1;\n      return buffer_1.Buffer.concat([data, crc]);\n    }\n    /**\r\n     *\r\n     * @param reader {PromisedWebSockets}\r\n     * @returns {Promise<*>}\r\n     */\n  }, {\n    key: \"readPacket\",\n    value: function () {\n      var _readPacket = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(reader) {\n        var packetLenSeq, packetLen, body, checksum, validChecksum;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return reader.readExactly(8);\n            case 2:\n              packetLenSeq = _context.sent;\n              if (!(packetLenSeq === undefined)) {\n                _context.next = 5;\n                break;\n              }\n              return _context.abrupt(\"return\", buffer_1.Buffer.alloc(0));\n            case 5:\n              packetLen = packetLenSeq.readInt32LE(0);\n              _context.next = 8;\n              return reader.readExactly(packetLen - 8);\n            case 8:\n              body = _context.sent;\n              checksum = body.slice(-4).readUInt32LE(0);\n              body = body.slice(0, -4);\n              validChecksum = (0, Helpers_1.crc32)(buffer_1.Buffer.concat([packetLenSeq, body]));\n              if (validChecksum === checksum) {\n                _context.next = 14;\n                break;\n              }\n              throw new errors_1.InvalidChecksumError(checksum, validChecksum);\n            case 14:\n              return _context.abrupt(\"return\", body);\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function readPacket(_x) {\n        return _readPacket.apply(this, arguments);\n      }\n      return readPacket;\n    }()\n  }]);\n  return FullPacketCodec;\n}(Connection_1.PacketCodec);\nexports.FullPacketCodec = FullPacketCodec;\nvar ConnectionTCPFull = /*#__PURE__*/function (_Connection_1$Connect) {\n  _inherits(ConnectionTCPFull, _Connection_1$Connect);\n  var _super2 = _createSuper(ConnectionTCPFull);\n  function ConnectionTCPFull() {\n    var _this2;\n    _classCallCheck(this, ConnectionTCPFull);\n    _this2 = _super2.apply(this, arguments);\n    _this2.PacketCodecClass = FullPacketCodec;\n    return _this2;\n  }\n  return _createClass(ConnectionTCPFull);\n}(Connection_1.Connection);\nexports.ConnectionTCPFull = ConnectionTCPFull;","map":{"version":3,"names":["Object","defineProperty","exports","value","ConnectionTCPFull","FullPacketCodec","buffer_1","require","Connection_1","Helpers_1","errors_1","connection","_sendCounter","data","length","e","Buffer","alloc","writeInt32LE","concat","crc","writeUInt32LE","crc32","reader","readExactly","packetLenSeq","undefined","packetLen","readInt32LE","body","checksum","slice","readUInt32LE","validChecksum","InvalidChecksumError","PacketCodec","arguments","PacketCodecClass","Connection"],"sources":["C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/telegram/network/connection/TCPFull.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ConnectionTCPFull = exports.FullPacketCodec = void 0;\r\nconst buffer_1 = require(\"buffer/\");\r\nconst Connection_1 = require(\"./Connection\");\r\nconst Helpers_1 = require(\"../../Helpers\");\r\nconst errors_1 = require(\"../../errors\");\r\nclass FullPacketCodec extends Connection_1.PacketCodec {\r\n    constructor(connection) {\r\n        super(connection);\r\n        this._sendCounter = 0; // Telegram will ignore us otherwise\r\n    }\r\n    encodePacket(data) {\r\n        // https://core.telegram.org/mtproto#tcp-transport\r\n        // total length, sequence number, packet and checksum (CRC32)\r\n        const length = data.length + 12;\r\n        const e = buffer_1.Buffer.alloc(8);\r\n        e.writeInt32LE(length, 0);\r\n        e.writeInt32LE(this._sendCounter, 4);\r\n        data = buffer_1.Buffer.concat([e, data]);\r\n        const crc = buffer_1.Buffer.alloc(4);\r\n        crc.writeUInt32LE((0, Helpers_1.crc32)(data), 0);\r\n        this._sendCounter += 1;\r\n        return buffer_1.Buffer.concat([data, crc]);\r\n    }\r\n    /**\r\n     *\r\n     * @param reader {PromisedWebSockets}\r\n     * @returns {Promise<*>}\r\n     */\r\n    async readPacket(reader) {\r\n        const packetLenSeq = await reader.readExactly(8); // 4 and 4\r\n        if (packetLenSeq === undefined) {\r\n            // Return empty buffer in case of issue\r\n            return buffer_1.Buffer.alloc(0);\r\n        }\r\n        const packetLen = packetLenSeq.readInt32LE(0);\r\n        let body = await reader.readExactly(packetLen - 8);\r\n        const checksum = body.slice(-4).readUInt32LE(0);\r\n        body = body.slice(0, -4);\r\n        const validChecksum = (0, Helpers_1.crc32)(buffer_1.Buffer.concat([packetLenSeq, body]));\r\n        if (!(validChecksum === checksum)) {\r\n            throw new errors_1.InvalidChecksumError(checksum, validChecksum);\r\n        }\r\n        return body;\r\n    }\r\n}\r\nexports.FullPacketCodec = FullPacketCodec;\r\nclass ConnectionTCPFull extends Connection_1.Connection {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.PacketCodecClass = FullPacketCodec;\r\n    }\r\n}\r\nexports.ConnectionTCPFull = ConnectionTCPFull;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}