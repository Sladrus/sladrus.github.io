{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionTCPAbridged = exports.AbridgedPacketCodec = void 0;\nvar buffer_1 = require(\"buffer/\");\nvar Helpers_1 = require(\"../../Helpers\");\nvar Connection_1 = require(\"./Connection\");\nvar big_integer_1 = __importDefault(require(\"big-integer\"));\nvar AbridgedPacketCodec = /*#__PURE__*/function (_Connection_1$PacketC) {\n  _inherits(AbridgedPacketCodec, _Connection_1$PacketC);\n  var _super = _createSuper(AbridgedPacketCodec);\n  function AbridgedPacketCodec(props) {\n    var _this;\n    _classCallCheck(this, AbridgedPacketCodec);\n    _this = _super.call(this, props);\n    _this.tag = AbridgedPacketCodec.tag;\n    _this.obfuscateTag = AbridgedPacketCodec.obfuscateTag;\n    return _this;\n  }\n  _createClass(AbridgedPacketCodec, [{\n    key: \"encodePacket\",\n    value: function encodePacket(data) {\n      var length = data.length >> 2;\n      var temp;\n      if (length < 127) {\n        var b = buffer_1.Buffer.alloc(1);\n        b.writeUInt8(length, 0);\n        temp = b;\n      } else {\n        temp = buffer_1.Buffer.concat([buffer_1.Buffer.from(\"7f\", \"hex\"), (0, Helpers_1.readBufferFromBigInt)((0, big_integer_1.default)(length), 3)]);\n      }\n      return buffer_1.Buffer.concat([temp, data]);\n    }\n  }, {\n    key: \"readPacket\",\n    value: function () {\n      var _readPacket = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(reader) {\n        var readData, length;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return reader.read(1);\n            case 2:\n              readData = _context.sent;\n              length = readData[0];\n              if (!(length >= 127)) {\n                _context.next = 12;\n                break;\n              }\n              _context.t0 = buffer_1.Buffer;\n              _context.next = 8;\n              return reader.read(3);\n            case 8:\n              _context.t1 = _context.sent;\n              _context.t2 = buffer_1.Buffer.alloc(1);\n              _context.t3 = [_context.t1, _context.t2];\n              length = _context.t0.concat.call(_context.t0, _context.t3).readInt32LE(0);\n            case 12:\n              return _context.abrupt(\"return\", reader.read(length << 2));\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function readPacket(_x) {\n        return _readPacket.apply(this, arguments);\n      }\n      return readPacket;\n    }()\n  }]);\n  return AbridgedPacketCodec;\n}(Connection_1.PacketCodec);\nexports.AbridgedPacketCodec = AbridgedPacketCodec;\nAbridgedPacketCodec.tag = buffer_1.Buffer.from(\"ef\", \"hex\");\nAbridgedPacketCodec.obfuscateTag = buffer_1.Buffer.from(\"efefefef\", \"hex\");\n/**\r\n * This is the mode with the lowest overhead, as it will\r\n * only require 1 byte if the packet length is less than\r\n * 508 bytes (127 << 2, which is very common).\r\n */\nvar ConnectionTCPAbridged = /*#__PURE__*/function (_Connection_1$Connect) {\n  _inherits(ConnectionTCPAbridged, _Connection_1$Connect);\n  var _super2 = _createSuper(ConnectionTCPAbridged);\n  function ConnectionTCPAbridged() {\n    var _this2;\n    _classCallCheck(this, ConnectionTCPAbridged);\n    _this2 = _super2.apply(this, arguments);\n    _this2.PacketCodecClass = AbridgedPacketCodec;\n    return _this2;\n  }\n  return _createClass(ConnectionTCPAbridged);\n}(Connection_1.Connection);\nexports.ConnectionTCPAbridged = ConnectionTCPAbridged;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","ConnectionTCPAbridged","AbridgedPacketCodec","buffer_1","require","Helpers_1","Connection_1","big_integer_1","props","tag","obfuscateTag","data","length","temp","b","Buffer","alloc","writeUInt8","concat","from","readBufferFromBigInt","default","reader","read","readData","readInt32LE","PacketCodec","arguments","PacketCodecClass","Connection"],"sources":["C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/telegram/network/connection/TCPAbridged.js"],"sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ConnectionTCPAbridged = exports.AbridgedPacketCodec = void 0;\r\nconst buffer_1 = require(\"buffer/\");\r\nconst Helpers_1 = require(\"../../Helpers\");\r\nconst Connection_1 = require(\"./Connection\");\r\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\r\nclass AbridgedPacketCodec extends Connection_1.PacketCodec {\r\n    constructor(props) {\r\n        super(props);\r\n        this.tag = AbridgedPacketCodec.tag;\r\n        this.obfuscateTag = AbridgedPacketCodec.obfuscateTag;\r\n    }\r\n    encodePacket(data) {\r\n        let length = data.length >> 2;\r\n        let temp;\r\n        if (length < 127) {\r\n            const b = buffer_1.Buffer.alloc(1);\r\n            b.writeUInt8(length, 0);\r\n            temp = b;\r\n        }\r\n        else {\r\n            temp = buffer_1.Buffer.concat([\r\n                buffer_1.Buffer.from(\"7f\", \"hex\"),\r\n                (0, Helpers_1.readBufferFromBigInt)((0, big_integer_1.default)(length), 3),\r\n            ]);\r\n        }\r\n        return buffer_1.Buffer.concat([temp, data]);\r\n    }\r\n    async readPacket(reader) {\r\n        const readData = await reader.read(1);\r\n        let length = readData[0];\r\n        if (length >= 127) {\r\n            length = buffer_1.Buffer.concat([\r\n                await reader.read(3),\r\n                buffer_1.Buffer.alloc(1),\r\n            ]).readInt32LE(0);\r\n        }\r\n        return reader.read(length << 2);\r\n    }\r\n}\r\nexports.AbridgedPacketCodec = AbridgedPacketCodec;\r\nAbridgedPacketCodec.tag = buffer_1.Buffer.from(\"ef\", \"hex\");\r\nAbridgedPacketCodec.obfuscateTag = buffer_1.Buffer.from(\"efefefef\", \"hex\");\r\n/**\r\n * This is the mode with the lowest overhead, as it will\r\n * only require 1 byte if the packet length is less than\r\n * 508 bytes (127 << 2, which is very common).\r\n */\r\nclass ConnectionTCPAbridged extends Connection_1.Connection {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.PacketCodecClass = AbridgedPacketCodec;\r\n    }\r\n}\r\nexports.ConnectionTCPAbridged = ConnectionTCPAbridged;\r\n"],"mappings":"AAAA,YAAY;;AAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,qBAAqB,GAAGF,OAAO,CAACG,mBAAmB,GAAG,KAAK,CAAC;AACpE,IAAMC,QAAQ,GAAGC,OAAO,CAAC,SAAS,CAAC;AACnC,IAAMC,SAAS,GAAGD,OAAO,CAAC,eAAe,CAAC;AAC1C,IAAME,YAAY,GAAGF,OAAO,CAAC,cAAc,CAAC;AAC5C,IAAMG,aAAa,GAAGb,eAAe,CAACU,OAAO,CAAC,aAAa,CAAC,CAAC;AAAC,IACxDF,mBAAmB;EAAA;EAAA;EACrB,6BAAYM,KAAK,EAAE;IAAA;IAAA;IACf,0BAAMA,KAAK;IACX,MAAKC,GAAG,GAAGP,mBAAmB,CAACO,GAAG;IAClC,MAAKC,YAAY,GAAGR,mBAAmB,CAACQ,YAAY;IAAC;EACzD;EAAC;IAAA;IAAA,OACD,sBAAaC,IAAI,EAAE;MACf,IAAIC,MAAM,GAAGD,IAAI,CAACC,MAAM,IAAI,CAAC;MAC7B,IAAIC,IAAI;MACR,IAAID,MAAM,GAAG,GAAG,EAAE;QACd,IAAME,CAAC,GAAGX,QAAQ,CAACY,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;QAClCF,CAAC,CAACG,UAAU,CAACL,MAAM,EAAE,CAAC,CAAC;QACvBC,IAAI,GAAGC,CAAC;MACZ,CAAC,MACI;QACDD,IAAI,GAAGV,QAAQ,CAACY,MAAM,CAACG,MAAM,CAAC,CAC1Bf,QAAQ,CAACY,MAAM,CAACI,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,EACjC,CAAC,CAAC,EAAEd,SAAS,CAACe,oBAAoB,EAAE,CAAC,CAAC,EAAEb,aAAa,CAACc,OAAO,EAAET,MAAM,CAAC,EAAE,CAAC,CAAC,CAC7E,CAAC;MACN;MACA,OAAOT,QAAQ,CAACY,MAAM,CAACG,MAAM,CAAC,CAACL,IAAI,EAAEF,IAAI,CAAC,CAAC;IAC/C;EAAC;IAAA;IAAA;MAAA,6EACD,iBAAiBW,MAAM;QAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OACIA,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC;YAAA;cAA/BC,QAAQ;cACVZ,MAAM,GAAGY,QAAQ,CAAC,CAAC,CAAC;cAAA,MACpBZ,MAAM,IAAI,GAAG;gBAAA;gBAAA;cAAA;cAAA,cACJT,QAAQ,CAACY,MAAM;cAAA;cAAA,OACdO,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC;YAAA;cAAA;cAAA,cACpBpB,QAAQ,CAACY,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;cAAA;cAF5BJ,MAAM,eAAmBM,MAAM,gCAG5BO,WAAW,CAAC,CAAC;YAAA;cAAA,iCAEbH,MAAM,CAACC,IAAI,CAACX,MAAM,IAAI,CAAC,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CAClC;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA,EAhC6BN,YAAY,CAACoB,WAAW;AAkC1D3B,OAAO,CAACG,mBAAmB,GAAGA,mBAAmB;AACjDA,mBAAmB,CAACO,GAAG,GAAGN,QAAQ,CAACY,MAAM,CAACI,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC;AAC3DjB,mBAAmB,CAACQ,YAAY,GAAGP,QAAQ,CAACY,MAAM,CAACI,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC;AAC1E;AACA;AACA;AACA;AACA;AAJA,IAKMlB,qBAAqB;EAAA;EAAA;EACvB,iCAAc;IAAA;IAAA;IACV,6BAAS0B,SAAS;IAClB,OAAKC,gBAAgB,GAAG1B,mBAAmB;IAAC;EAChD;EAAC;AAAA,EAJ+BI,YAAY,CAACuB,UAAU;AAM3D9B,OAAO,CAACE,qBAAqB,GAAGA,qBAAqB"},"metadata":{},"sourceType":"script","externalDependencies":[]}