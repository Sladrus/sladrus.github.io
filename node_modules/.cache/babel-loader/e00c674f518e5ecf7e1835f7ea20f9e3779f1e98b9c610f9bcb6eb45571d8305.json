{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _regeneratorRuntime = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MemorySession = void 0;\nvar Abstract_1 = require(\"./Abstract\");\nvar tl_1 = require(\"../tl\");\nvar big_integer_1 = __importDefault(require(\"big-integer\"));\nvar Utils_1 = require(\"../Utils\");\nvar Helpers_1 = require(\"../Helpers\");\nvar __1 = require(\"../\");\nvar MemorySession = /*#__PURE__*/function (_Abstract_1$Session) {\n  _inherits(MemorySession, _Abstract_1$Session);\n  var _super = _createSuper(MemorySession);\n  function MemorySession() {\n    var _this;\n    _classCallCheck(this, MemorySession);\n    _this = _super.call(this);\n    _this._serverAddress = undefined;\n    _this._dcId = 0;\n    _this._port = undefined;\n    _this._takeoutId = undefined;\n    _this._entities = new Set();\n    _this._updateStates = {};\n    return _this;\n  }\n  _createClass(MemorySession, [{\n    key: \"setDC\",\n    value: function setDC(dcId, serverAddress, port) {\n      this._dcId = dcId | 0;\n      this._serverAddress = serverAddress;\n      this._port = port;\n    }\n  }, {\n    key: \"dcId\",\n    get: function get() {\n      return this._dcId;\n    }\n  }, {\n    key: \"serverAddress\",\n    get: function get() {\n      return this._serverAddress;\n    }\n  }, {\n    key: \"port\",\n    get: function get() {\n      return this._port;\n    }\n  }, {\n    key: \"authKey\",\n    get: function get() {\n      return this._authKey;\n    },\n    set: function set(value) {\n      this._authKey = value;\n    }\n  }, {\n    key: \"takeoutId\",\n    get: function get() {\n      return this._takeoutId;\n    },\n    set: function set(value) {\n      this._takeoutId = value;\n    }\n  }, {\n    key: \"getAuthKey\",\n    value: function getAuthKey(dcId) {\n      if (dcId && dcId !== this.dcId) {\n        // Not supported.\n        return undefined;\n      }\n      return this.authKey;\n    }\n  }, {\n    key: \"setAuthKey\",\n    value: function setAuthKey(authKey, dcId) {\n      if (dcId && dcId !== this.dcId) {\n        // Not supported.\n        return undefined;\n      }\n      this.authKey = authKey;\n    }\n  }, {\n    key: \"close\",\n    value: function close() {}\n  }, {\n    key: \"save\",\n    value: function save() {}\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function load() {\n        return _load.apply(this, arguments);\n      }\n      return load;\n    }()\n  }, {\n    key: \"delete\",\n    value: function _delete() {}\n  }, {\n    key: \"_entityValuesToRow\",\n    value: function _entityValuesToRow(id, hash, username, phone, name) {\n      // While this is a simple implementation it might be overrode by,\n      // other classes so they don't need to implement the plural form\n      // of the method. Don't remove.\n      return [id, hash, username, phone, name];\n    }\n  }, {\n    key: \"_entityToRow\",\n    value: function _entityToRow(e) {\n      if (!(e.classType === \"constructor\")) {\n        return;\n      }\n      var p;\n      var markedId;\n      try {\n        p = (0, Utils_1.getInputPeer)(e, false);\n        markedId = (0, Utils_1.getPeerId)(p);\n      } catch (e) {\n        return;\n      }\n      var pHash;\n      if (p instanceof tl_1.Api.InputPeerUser || p instanceof tl_1.Api.InputPeerChannel) {\n        pHash = p.accessHash;\n      } else if (p instanceof tl_1.Api.InputPeerChat) {\n        pHash = big_integer_1.default.zero;\n      } else {\n        return;\n      }\n      var username = e.username;\n      if (username) {\n        username = username.toLowerCase();\n      }\n      var phone = e.phone;\n      var name = (0, Utils_1.getDisplayName)(e);\n      return this._entityValuesToRow(markedId, pHash, username, phone, name);\n    }\n  }, {\n    key: \"_entitiesToRows\",\n    value: function _entitiesToRows(tlo) {\n      var entities = [];\n      if (!(tlo.classType === \"constructor\") && (0, Helpers_1.isArrayLike)(tlo)) {\n        // This may be a list of users already for instance\n        entities = tlo;\n      } else {\n        if (typeof tlo === \"object\") {\n          if (\"user\" in tlo) {\n            entities.push(tlo.user);\n          }\n          if (\"chat\" in tlo) {\n            entities.push(tlo.chat);\n          }\n          if (\"channel\" in tlo) {\n            entities.push(tlo.channel);\n          }\n          if (\"chats\" in tlo && (0, Helpers_1.isArrayLike)(tlo.chats)) {\n            entities = entities.concat(tlo.chats);\n          }\n          if (\"users\" in tlo && (0, Helpers_1.isArrayLike)(tlo.users)) {\n            entities = entities.concat(tlo.users);\n          }\n        }\n      }\n      var rows = []; // Rows to add (id, hash, username, phone, name)\n      var _iterator = _createForOfIteratorHelper(entities),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var e = _step.value;\n          var row = this._entityToRow(e);\n          if (row) {\n            rows.push(row);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return rows;\n    }\n  }, {\n    key: \"processEntities\",\n    value: function processEntities(tlo) {\n      var entitiesSet = this._entitiesToRows(tlo);\n      var _iterator2 = _createForOfIteratorHelper(entitiesSet),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var e = _step2.value;\n          this._entities.add(e);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"getEntityRowsByPhone\",\n    value: function getEntityRowsByPhone(phone) {\n      var _iterator3 = _createForOfIteratorHelper(this._entities),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var e = _step3.value;\n          // id, hash, username, phone, name\n          if (e[3] === phone) {\n            return [e[0], e[1]];\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"getEntityRowsByUsername\",\n    value: function getEntityRowsByUsername(username) {\n      var _iterator4 = _createForOfIteratorHelper(this._entities),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var e = _step4.value;\n          // id, hash, username, phone, name\n          if (e[2] === username) {\n            return [e[0], e[1]];\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"getEntityRowsByName\",\n    value: function getEntityRowsByName(name) {\n      var _iterator5 = _createForOfIteratorHelper(this._entities),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var e = _step5.value;\n          // id, hash, username, phone, name\n          if (e[4] === name) {\n            return [e[0], e[1]];\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }, {\n    key: \"getEntityRowsById\",\n    value: function getEntityRowsById(id) {\n      var exact = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (exact) {\n        var _iterator6 = _createForOfIteratorHelper(this._entities),\n          _step6;\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var e = _step6.value;\n            // id, hash, username, phone, name\n            if (e[0] === id) {\n              return [e[0], e[1]];\n            }\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n      } else {\n        var ids = [__1.utils.getPeerId(new tl_1.Api.PeerUser({\n          userId: (0, Helpers_1.returnBigInt)(id)\n        })), __1.utils.getPeerId(new tl_1.Api.PeerChat({\n          chatId: (0, Helpers_1.returnBigInt)(id)\n        })), __1.utils.getPeerId(new tl_1.Api.PeerChannel({\n          channelId: (0, Helpers_1.returnBigInt)(id)\n        }))];\n        var _iterator7 = _createForOfIteratorHelper(this._entities),\n          _step7;\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var _e = _step7.value;\n            // id, hash, username, phone, name\n            if (ids.includes(_e[0])) {\n              return [_e[0], _e[1]];\n            }\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n      }\n    }\n  }, {\n    key: \"getInputEntity\",\n    value: function getInputEntity(key) {\n      var exact;\n      if (typeof key === \"object\" && !big_integer_1.default.isInstance(key) && key.SUBCLASS_OF_ID) {\n        if (key.SUBCLASS_OF_ID == 0xc91c90b6 || key.SUBCLASS_OF_ID == 0xe669bf46 || key.SUBCLASS_OF_ID == 0x40f202fd) {\n          // @ts-ignore\n          return key;\n        }\n        // Try to early return if this key can be casted as input peer\n        return __1.utils.getInputPeer(key);\n      } else {\n        // Not a TLObject or can't be cast into InputPeer\n        if (typeof key === \"object\") {\n          key = __1.utils.getPeerId(key);\n          exact = true;\n        } else {\n          exact = false;\n        }\n      }\n      if (big_integer_1.default.isInstance(key) || typeof key == \"bigint\" || typeof key == \"number\") {\n        key = key.toString();\n      }\n      var result = undefined;\n      if (typeof key === \"string\") {\n        var phone = __1.utils.parsePhone(key);\n        if (phone) {\n          result = this.getEntityRowsByPhone(phone);\n        } else {\n          var _1$utils$parseUserna = __1.utils.parseUsername(key),\n            username = _1$utils$parseUserna.username,\n            isInvite = _1$utils$parseUserna.isInvite;\n          if (username && !isInvite) {\n            result = this.getEntityRowsByUsername(username);\n          }\n        }\n        if (!result) {\n          var id = __1.utils.parseID(key);\n          if (id) {\n            result = this.getEntityRowsById(id, exact);\n          }\n        }\n        if (!result) {\n          result = this.getEntityRowsByName(key);\n        }\n      }\n      if (result) {\n        var entityId = result[0]; // unpack resulting tuple\n        var entityHash = (0, big_integer_1.default)(result[1]);\n        var resolved = __1.utils.resolveId((0, Helpers_1.returnBigInt)(entityId));\n        entityId = resolved[0];\n        var kind = resolved[1];\n        // removes the mark and returns type of entity\n        if (kind === tl_1.Api.PeerUser) {\n          return new tl_1.Api.InputPeerUser({\n            userId: entityId,\n            accessHash: entityHash\n          });\n        } else if (kind === tl_1.Api.PeerChat) {\n          return new tl_1.Api.InputPeerChat({\n            chatId: entityId\n          });\n        } else if (kind === tl_1.Api.PeerChannel) {\n          return new tl_1.Api.InputPeerChannel({\n            channelId: entityId,\n            accessHash: entityHash\n          });\n        }\n      } else {\n        throw new Error(\"Could not find input entity with key \" + key);\n      }\n      throw new Error(\"Could not find input entity with key \" + key);\n    }\n  }]);\n  return MemorySession;\n}(Abstract_1.Session);\nexports.MemorySession = MemorySession;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","MemorySession","Abstract_1","require","tl_1","big_integer_1","Utils_1","Helpers_1","__1","_serverAddress","undefined","_dcId","_port","_takeoutId","_entities","Set","_updateStates","dcId","serverAddress","port","_authKey","authKey","id","hash","username","phone","name","e","classType","p","markedId","getInputPeer","getPeerId","pHash","Api","InputPeerUser","InputPeerChannel","accessHash","InputPeerChat","default","zero","toLowerCase","getDisplayName","_entityValuesToRow","tlo","entities","isArrayLike","push","user","chat","channel","chats","concat","users","rows","row","_entityToRow","entitiesSet","_entitiesToRows","add","exact","ids","utils","PeerUser","userId","returnBigInt","PeerChat","chatId","PeerChannel","channelId","includes","key","isInstance","SUBCLASS_OF_ID","toString","result","parsePhone","getEntityRowsByPhone","parseUsername","isInvite","getEntityRowsByUsername","parseID","getEntityRowsById","getEntityRowsByName","entityId","entityHash","resolved","resolveId","kind","Error","Session"],"sources":["C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/telegram/sessions/Memory.js"],"sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MemorySession = void 0;\r\nconst Abstract_1 = require(\"./Abstract\");\r\nconst tl_1 = require(\"../tl\");\r\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\r\nconst Utils_1 = require(\"../Utils\");\r\nconst Helpers_1 = require(\"../Helpers\");\r\nconst __1 = require(\"../\");\r\nclass MemorySession extends Abstract_1.Session {\r\n    constructor() {\r\n        super();\r\n        this._serverAddress = undefined;\r\n        this._dcId = 0;\r\n        this._port = undefined;\r\n        this._takeoutId = undefined;\r\n        this._entities = new Set();\r\n        this._updateStates = {};\r\n    }\r\n    setDC(dcId, serverAddress, port) {\r\n        this._dcId = dcId | 0;\r\n        this._serverAddress = serverAddress;\r\n        this._port = port;\r\n    }\r\n    get dcId() {\r\n        return this._dcId;\r\n    }\r\n    get serverAddress() {\r\n        return this._serverAddress;\r\n    }\r\n    get port() {\r\n        return this._port;\r\n    }\r\n    get authKey() {\r\n        return this._authKey;\r\n    }\r\n    set authKey(value) {\r\n        this._authKey = value;\r\n    }\r\n    get takeoutId() {\r\n        return this._takeoutId;\r\n    }\r\n    set takeoutId(value) {\r\n        this._takeoutId = value;\r\n    }\r\n    getAuthKey(dcId) {\r\n        if (dcId && dcId !== this.dcId) {\r\n            // Not supported.\r\n            return undefined;\r\n        }\r\n        return this.authKey;\r\n    }\r\n    setAuthKey(authKey, dcId) {\r\n        if (dcId && dcId !== this.dcId) {\r\n            // Not supported.\r\n            return undefined;\r\n        }\r\n        this.authKey = authKey;\r\n    }\r\n    close() { }\r\n    save() { }\r\n    async load() { }\r\n    delete() { }\r\n    _entityValuesToRow(id, hash, username, phone, name) {\r\n        // While this is a simple implementation it might be overrode by,\r\n        // other classes so they don't need to implement the plural form\r\n        // of the method. Don't remove.\r\n        return [id, hash, username, phone, name];\r\n    }\r\n    _entityToRow(e) {\r\n        if (!(e.classType === \"constructor\")) {\r\n            return;\r\n        }\r\n        let p;\r\n        let markedId;\r\n        try {\r\n            p = (0, Utils_1.getInputPeer)(e, false);\r\n            markedId = (0, Utils_1.getPeerId)(p);\r\n        }\r\n        catch (e) {\r\n            return;\r\n        }\r\n        let pHash;\r\n        if (p instanceof tl_1.Api.InputPeerUser ||\r\n            p instanceof tl_1.Api.InputPeerChannel) {\r\n            pHash = p.accessHash;\r\n        }\r\n        else if (p instanceof tl_1.Api.InputPeerChat) {\r\n            pHash = big_integer_1.default.zero;\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n        let username = e.username;\r\n        if (username) {\r\n            username = username.toLowerCase();\r\n        }\r\n        const phone = e.phone;\r\n        const name = (0, Utils_1.getDisplayName)(e);\r\n        return this._entityValuesToRow(markedId, pHash, username, phone, name);\r\n    }\r\n    _entitiesToRows(tlo) {\r\n        let entities = [];\r\n        if (!(tlo.classType === \"constructor\") && (0, Helpers_1.isArrayLike)(tlo)) {\r\n            // This may be a list of users already for instance\r\n            entities = tlo;\r\n        }\r\n        else {\r\n            if (typeof tlo === \"object\") {\r\n                if (\"user\" in tlo) {\r\n                    entities.push(tlo.user);\r\n                }\r\n                if (\"chat\" in tlo) {\r\n                    entities.push(tlo.chat);\r\n                }\r\n                if (\"channel\" in tlo) {\r\n                    entities.push(tlo.channel);\r\n                }\r\n                if (\"chats\" in tlo && (0, Helpers_1.isArrayLike)(tlo.chats)) {\r\n                    entities = entities.concat(tlo.chats);\r\n                }\r\n                if (\"users\" in tlo && (0, Helpers_1.isArrayLike)(tlo.users)) {\r\n                    entities = entities.concat(tlo.users);\r\n                }\r\n            }\r\n        }\r\n        const rows = []; // Rows to add (id, hash, username, phone, name)\r\n        for (const e of entities) {\r\n            const row = this._entityToRow(e);\r\n            if (row) {\r\n                rows.push(row);\r\n            }\r\n        }\r\n        return rows;\r\n    }\r\n    processEntities(tlo) {\r\n        const entitiesSet = this._entitiesToRows(tlo);\r\n        for (const e of entitiesSet) {\r\n            this._entities.add(e);\r\n        }\r\n    }\r\n    getEntityRowsByPhone(phone) {\r\n        for (const e of this._entities) {\r\n            // id, hash, username, phone, name\r\n            if (e[3] === phone) {\r\n                return [e[0], e[1]];\r\n            }\r\n        }\r\n    }\r\n    getEntityRowsByUsername(username) {\r\n        for (const e of this._entities) {\r\n            // id, hash, username, phone, name\r\n            if (e[2] === username) {\r\n                return [e[0], e[1]];\r\n            }\r\n        }\r\n    }\r\n    getEntityRowsByName(name) {\r\n        for (const e of this._entities) {\r\n            // id, hash, username, phone, name\r\n            if (e[4] === name) {\r\n                return [e[0], e[1]];\r\n            }\r\n        }\r\n    }\r\n    getEntityRowsById(id, exact = true) {\r\n        if (exact) {\r\n            for (const e of this._entities) {\r\n                // id, hash, username, phone, name\r\n                if (e[0] === id) {\r\n                    return [e[0], e[1]];\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            const ids = [\r\n                __1.utils.getPeerId(new tl_1.Api.PeerUser({ userId: (0, Helpers_1.returnBigInt)(id) })),\r\n                __1.utils.getPeerId(new tl_1.Api.PeerChat({ chatId: (0, Helpers_1.returnBigInt)(id) })),\r\n                __1.utils.getPeerId(new tl_1.Api.PeerChannel({ channelId: (0, Helpers_1.returnBigInt)(id) })),\r\n            ];\r\n            for (const e of this._entities) {\r\n                // id, hash, username, phone, name\r\n                if (ids.includes(e[0])) {\r\n                    return [e[0], e[1]];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getInputEntity(key) {\r\n        let exact;\r\n        if (typeof key === \"object\" &&\r\n            !big_integer_1.default.isInstance(key) &&\r\n            key.SUBCLASS_OF_ID) {\r\n            if (key.SUBCLASS_OF_ID == 0xc91c90b6 ||\r\n                key.SUBCLASS_OF_ID == 0xe669bf46 ||\r\n                key.SUBCLASS_OF_ID == 0x40f202fd) {\r\n                // @ts-ignore\r\n                return key;\r\n            }\r\n            // Try to early return if this key can be casted as input peer\r\n            return __1.utils.getInputPeer(key);\r\n        }\r\n        else {\r\n            // Not a TLObject or can't be cast into InputPeer\r\n            if (typeof key === \"object\") {\r\n                key = __1.utils.getPeerId(key);\r\n                exact = true;\r\n            }\r\n            else {\r\n                exact = false;\r\n            }\r\n        }\r\n        if (big_integer_1.default.isInstance(key) ||\r\n            typeof key == \"bigint\" ||\r\n            typeof key == \"number\") {\r\n            key = key.toString();\r\n        }\r\n        let result = undefined;\r\n        if (typeof key === \"string\") {\r\n            const phone = __1.utils.parsePhone(key);\r\n            if (phone) {\r\n                result = this.getEntityRowsByPhone(phone);\r\n            }\r\n            else {\r\n                const { username, isInvite } = __1.utils.parseUsername(key);\r\n                if (username && !isInvite) {\r\n                    result = this.getEntityRowsByUsername(username);\r\n                }\r\n            }\r\n            if (!result) {\r\n                const id = __1.utils.parseID(key);\r\n                if (id) {\r\n                    result = this.getEntityRowsById(id, exact);\r\n                }\r\n            }\r\n            if (!result) {\r\n                result = this.getEntityRowsByName(key);\r\n            }\r\n        }\r\n        if (result) {\r\n            let entityId = result[0]; // unpack resulting tuple\r\n            const entityHash = (0, big_integer_1.default)(result[1]);\r\n            const resolved = __1.utils.resolveId((0, Helpers_1.returnBigInt)(entityId));\r\n            entityId = resolved[0];\r\n            const kind = resolved[1];\r\n            // removes the mark and returns type of entity\r\n            if (kind === tl_1.Api.PeerUser) {\r\n                return new tl_1.Api.InputPeerUser({\r\n                    userId: entityId,\r\n                    accessHash: entityHash,\r\n                });\r\n            }\r\n            else if (kind === tl_1.Api.PeerChat) {\r\n                return new tl_1.Api.InputPeerChat({ chatId: entityId });\r\n            }\r\n            else if (kind === tl_1.Api.PeerChannel) {\r\n                return new tl_1.Api.InputPeerChannel({\r\n                    channelId: entityId,\r\n                    accessHash: entityHash,\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            throw new Error(\"Could not find input entity with key \" + key);\r\n        }\r\n        throw new Error(\"Could not find input entity with key \" + key);\r\n    }\r\n}\r\nexports.MemorySession = MemorySession;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}