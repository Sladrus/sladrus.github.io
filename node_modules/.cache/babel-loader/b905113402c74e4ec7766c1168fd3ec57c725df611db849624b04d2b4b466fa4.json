{"ast":null,"code":"import _createForOfIteratorHelper from\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _regeneratorRuntime from\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _classCallCheck from\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/esm/createClass.js\";import{makeAutoObservable}from'mobx';import{NewMessage}from'telegram/events';import{StringSession}from'telegram/sessions';import{deleteOne}from'../../http/accountApi';import{linkToAccount,unlinkFromAccount}from'../../http/chatApi';import handleGroupMessages from'./handleGroupMessages';import handlePrivateMessages from'./handlePrivateMessages';var _require=require('telegram'),Api=_require.Api,TelegramClient=_require.TelegramClient;var TelegramService=/*#__PURE__*/function(){function TelegramService(){_classCallCheck(this,TelegramService);this.chats=[];this.senders=[];this.update=[];this.requests=[];this.proxyList=[{ip:'194.34.248.152',port:3001,MTProxy:false,username:'EcUF67',password:'yJzWaRCDNC',socksType:5,timeout:5},{ip:'185.181.244.150',port:3001,MTProxy:false,username:'EcUF67',password:'yJzWaRCDNC',socksType:5,timeout:5},{ip:'46.8.111.51',port:3001,MTProxy:false,username:'EcUF67',password:'yJzWaRCDNC',socksType:5,timeout:5},{ip:'109.248.48.41',port:3001,MTProxy:false,username:'EcUF67',password:'yJzWaRCDNC',socksType:5,timeout:5},{ip:'188.130.221.27',port:3001,MTProxy:false,username:'EcUF67',password:'yJzWaRCDNC',socksType:5,timeout:5},{ip:'213.226.101.121',port:3001,MTProxy:false,username:'EcUF67',password:'yJzWaRCDNC',socksType:5,timeout:5},{ip:'45.11.20.129',port:3001,MTProxy:false,username:'EcUF67',password:'yJzWaRCDNC',socksType:5,timeout:5},{ip:'95.182.125.184',port:3001,MTProxy:false,username:'EcUF67',password:'yJzWaRCDNC',socksType:5,timeout:5},{ip:'188.130.218.55',port:3001,MTProxy:false,username:'EcUF67',password:'yJzWaRCDNC',socksType:5,timeout:5},{ip:'45.86.0.115',port:3001,MTProxy:false,username:'EcUF67',password:'yJzWaRCDNC',socksType:5,timeout:5},{ip:'95.182.124.205',port:3001,MTProxy:false,username:'SciAnk',password:'HF2fwDaubg',socksType:5,timeout:5},{ip:'95.182.126.141',port:3001,MTProxy:false,username:'SciAnk',password:'HF2fwDaubg',socksType:5,timeout:5},{ip:'188.130.129.238',port:3001,MTProxy:false,username:'SciAnk',password:'HF2fwDaubg',socksType:5,timeout:5},{ip:'109.248.143.248',port:3001,MTProxy:false,username:'SciAnk',password:'HF2fwDaubg',socksType:5,timeout:5},{ip:'109.248.13.232',port:3001,MTProxy:false,username:'SciAnk',password:'HF2fwDaubg',socksType:5,timeout:5},{ip:'188.130.137.13',port:3001,MTProxy:false,username:'SciAnk',password:'HF2fwDaubg',socksType:5,timeout:5},{ip:'185.181.247.13',port:3001,MTProxy:false,username:'SciAnk',password:'HF2fwDaubg',socksType:5,timeout:5},{ip:'185.181.244.102',port:3001,MTProxy:false,username:'SciAnk',password:'HF2fwDaubg',socksType:5,timeout:5},{ip:'109.248.14.40',port:3001,MTProxy:false,username:'SciAnk',password:'HF2fwDaubg',socksType:5,timeout:5},{ip:'188.130.129.94',port:3001,MTProxy:false,username:'SciAnk',password:'HF2fwDaubg',socksType:5,timeout:5},{ip:'46.8.155.71',port:3001,MTProxy:false,username:'SciAnk',password:'HF2fwDaubg',socksType:5,timeout:5},{ip:'188.130.187.204',port:3001,MTProxy:false,username:'SciAnk',password:'HF2fwDaubg',socksType:5,timeout:5},{ip:'185.181.246.84',port:3001,MTProxy:false,username:'SciAnk',password:'HF2fwDaubg',socksType:5,timeout:5},{ip:'45.81.136.220',port:3001,MTProxy:false,username:'SciAnk',password:'HF2fwDaubg',socksType:5,timeout:5},{ip:'46.8.223.57',port:3001,MTProxy:false,username:'SciAnk',password:'HF2fwDaubg',socksType:5,timeout:5},{ip:'46.8.23.82',port:3001,MTProxy:false,username:'SciAnk',password:'HF2fwDaubg',socksType:5,timeout:5},{ip:'194.34.248.93',port:3001,MTProxy:false,username:'SciAnk',password:'HF2fwDaubg',socksType:5,timeout:5},{ip:'188.130.128.132',port:3001,MTProxy:false,username:'SciAnk',password:'HF2fwDaubg',socksType:5,timeout:5},{ip:'45.90.196.66',port:3001,MTProxy:false,username:'SciAnk',password:'HF2fwDaubg',socksType:5,timeout:5},{ip:'188.130.185.236',port:3001,MTProxy:false,username:'SciAnk',password:'HF2fwDaubg',socksType:5,timeout:5}];makeAutoObservable(this);}_createClass(TelegramService,[{key:\"joinPrivateChat\",value:function(){var _joinPrivateChat=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(client,hash,chat){var result,respCheckInvite,respJoinInvite;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:result={};_context.prev=1;_context.next=4;return client.invoke(new Api.messages.CheckChatInvite({hash:hash}));case 4:respCheckInvite=_context.sent;result.id=Number(respCheckInvite.chat.id.value);result.title=respCheckInvite.chat.title;return _context.abrupt(\"return\",result.id);case 10:_context.prev=10;_context.t0=_context[\"catch\"](1);this.handleErrors(_context.t0,chat);case 13:_context.prev=13;_context.next=16;return client.invoke(new Api.messages.ImportChatInvite({hash:hash}));case 16:respJoinInvite=_context.sent;result.id=Number(respJoinInvite.chats[0].id);result.title=respJoinInvite.chats[0].title;return _context.abrupt(\"return\",result.id);case 22:_context.prev=22;_context.t1=_context[\"catch\"](13);this.handleErrors(_context.t1,chat);case 25:case\"end\":return _context.stop();}},_callee,this,[[1,10],[13,22]]);}));function joinPrivateChat(_x,_x2,_x3){return _joinPrivateChat.apply(this,arguments);}return joinPrivateChat;}()},{key:\"joinPublicChat\",value:function(){var _joinPublicChat=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(client,hash,chat){var result,resp;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:result={};console.log(hash);_context2.prev=2;_context2.next=5;return client.invoke(new Api.channels.JoinChannel({channel:hash}));case 5:resp=_context2.sent;console.log(resp);result.id=hash;result.title=resp.chats[0].title;return _context2.abrupt(\"return\",hash);case 12:_context2.prev=12;_context2.t0=_context2[\"catch\"](2);console.log(_context2.t0);this.handleErrors(_context2.t0,chat);case 16:case\"end\":return _context2.stop();}},_callee2,this,[[2,12]]);}));function joinPublicChat(_x4,_x5,_x6){return _joinPublicChat.apply(this,arguments);}return joinPublicChat;}()},{key:\"joinChat\",value:function(){var _joinChat=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(chat){var hash,result,entity;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1)switch(_context3.prev=_context3.next){case 0:hash=chat.link.split('/')[1];if(!hash.includes('+')){_context3.next=7;break;}_context3.next=4;return this.joinPrivateChat(chat.client,hash.split('+')[1],chat);case 4:_context3.t0=_context3.sent;_context3.next=10;break;case 7:_context3.next=9;return this.joinPublicChat(chat.client,hash,chat);case 9:_context3.t0=_context3.sent;case 10:result=_context3.t0;if(result){_context3.next=13;break;}return _context3.abrupt(\"return\",null);case 13:console.log(result);_context3.next=16;return chat.client.getEntity(result);case 16:entity=_context3.sent;return _context3.abrupt(\"return\",entity);case 18:case\"end\":return _context3.stop();}},_callee3,this);}));function joinChat(_x7){return _joinChat.apply(this,arguments);}return joinChat;}()},{key:\"handleErrors\",value:function(){var _handleErrors=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(e,chat){return _regeneratorRuntime().wrap(function _callee4$(_context4){while(1)switch(_context4.prev=_context4.next){case 0:console.log(e);if(!(e.errorMessage==='USER_DEACTIVATED_BAN')){_context4.next=5;break;}console.log(e.errorMessage);_context4.next=5;return deleteOne(chat.account._id);case 5:if(!(e.errorMessage==='USER_DEACTIVATED')){_context4.next=9;break;}console.log(e.errorMessage);_context4.next=9;return deleteOne(chat.account._id);case 9:if(!(e.errorMessage==='SESSION_REVOKED')){_context4.next=13;break;}console.log(e.errorMessage);_context4.next=13;return deleteOne(chat.account._id);case 13:if(!(e.errorMessage==='AUTH_KEY_DUPLICATED')){_context4.next=17;break;}console.log(e.errorMessage);_context4.next=17;return deleteOne(chat.account._id);case 17:if(!(e.errorMessage==='AUTH_KEY_UNREGISTERED ')){_context4.next=21;break;}console.log(e.errorMessage);_context4.next=21;return deleteOne(chat.account._id);case 21:if(!(e.errorMessage==='INVITE_HASH_EXPIRED')){_context4.next=25;break;}console.log(e.errorMessage);_context4.next=25;return deleteOne(chat.account._id);case 25:if(!(e.errorMessage==='FLOOD')){_context4.next=31;break;}console.log(e.errorMessage);if(!(e.seconds>300)){_context4.next=31;break;}_context4.next=30;return unlinkFromAccount(chat._id);case 30:chat.account=null;case 31:case\"end\":return _context4.stop();}},_callee4);}));function handleErrors(_x8,_x9){return _handleErrors.apply(this,arguments);}return handleErrors;}()},{key:\"changeProfile\",value:function(){var _changeProfile=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(me,client){var result;return _regeneratorRuntime().wrap(function _callee5$(_context5){while(1)switch(_context5.prev=_context5.next){case 0:console.log(me);if(!me.photo){_context5.next=8;break;}_context5.next=4;return client.invoke(new Api.photos.GetUserPhotos({userId:me.id}));case 4:result=_context5.sent;_context5.next=7;return client.invoke(new Api.photos.DeletePhotos({id:result.photos}));case 7:result=_context5.sent;case 8:if(!me.lastname){_context5.next=13;break;}_context5.next=11;return client.invoke(new Api.account.UpdateProfile({lastName:'',about:''}));case 11:result=_context5.sent;console.log(result);case 13:case\"end\":return _context5.stop();}},_callee5);}));function changeProfile(_x10,_x11){return _changeProfile.apply(this,arguments);}return changeProfile;}()},{key:\"createClient\",value:function(){var _createClient=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(chat){var proxy,clientParams,stringSession,client,me;return _regeneratorRuntime().wrap(function _callee6$(_context6){while(1)switch(_context6.prev=_context6.next){case 0:if(!(chat!==null&&chat!==void 0&&chat.client)){_context6.next=2;break;}return _context6.abrupt(\"return\");case 2:_context6.next=4;return linkToAccount(chat._id);case 4:chat.account=_context6.sent;if(chat!==null&&chat!==void 0&&chat.account){_context6.next=7;break;}return _context6.abrupt(\"return\");case 7:proxy=this.proxyList[Math.floor(Math.random()*this.proxyList.length)];clientParams={connectionRetries:10,useWSS:true,proxy:proxy};_context6.prev=9;stringSession=new StringSession(chat.account.key);client=new TelegramClient(stringSession,chat.account.api_id,chat.account.api_hash,clientParams);client.floodSleepThreshold=300;client.setLogLevel('info');client.setParseMode('html');_context6.next=17;return client.connect();case 17:_context6.next=19;return client.getMe();case 19:me=_context6.sent;chat.me=me;_context6.next=23;return this.changeProfile(me,client);case 23:return _context6.abrupt(\"return\",client);case 26:_context6.prev=26;_context6.t0=_context6[\"catch\"](9);this.handleErrors(_context6.t0,chat);return _context6.abrupt(\"return\");case 30:case\"end\":return _context6.stop();}},_callee6,this,[[9,26]]);}));function createClient(_x12){return _createClient.apply(this,arguments);}return createClient;}()},{key:\"initMonitor\",value:function(){var _initMonitor=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(chat){var _this=this;return _regeneratorRuntime().wrap(function _callee7$(_context7){while(1)switch(_context7.prev=_context7.next){case 0:if(!true){_context7.next=32;break;}_context7.prev=1;if(chat){_context7.next=4;break;}return _context7.abrupt(\"return\");case 4:_context7.next=6;return this.createClient(chat);case 6:chat.client=_context7.sent;if(chat!==null&&chat!==void 0&&chat.client){_context7.next=12;break;}_context7.next=10;return unlinkFromAccount(chat._id);case 10:chat.active=false;return _context7.abrupt(\"continue\",0);case 12:_context7.next=14;return this.joinChat(chat);case 14:chat.entity=_context7.sent;if(chat!==null&&chat!==void 0&&chat.entity){_context7.next=20;break;}_context7.next=18;return unlinkFromAccount(chat._id);case 18:chat.active=false;return _context7.abrupt(\"continue\",0);case 20:chat.client.addEventHandler(function(event){handleGroupMessages(event,chat,_this.requests,_this.senders);},new NewMessage({incoming:true,chats:[chat.entity.id]}));chat.client.addEventHandler(function(event){handlePrivateMessages(event,chat,_this.senders);},new NewMessage({incoming:true}));chat.active=true;return _context7.abrupt(\"return\",true);case 26:_context7.prev=26;_context7.t0=_context7[\"catch\"](1);chat.active=false;console.log(_context7.t0);case 30:_context7.next=0;break;case 32:case\"end\":return _context7.stop();}},_callee7,this,[[1,26]]);}));function initMonitor(_x13){return _initMonitor.apply(this,arguments);}return initMonitor;}()},{key:\"startMonitor\",value:function(){var _startMonitor=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8(chat){return _regeneratorRuntime().wrap(function _callee8$(_context8){while(1)switch(_context8.prev=_context8.next){case 0:if(chat.active){_context8.next=4;break;}_context8.next=3;return this.initMonitor(chat);case 3:return _context8.abrupt(\"return\",_context8.sent);case 4:case\"end\":return _context8.stop();}},_callee8,this);}));function startMonitor(_x14){return _startMonitor.apply(this,arguments);}return startMonitor;}()// async checkChatInvite(client, link) {\n//   const hash = link.split('+')[1];\n//   var result = {};\n//   const respCheckInvite = await client.invoke(\n//     new Api.messages.CheckChatInvite({\n//       hash: hash,\n//     })\n//   );\n//   result.id = Number(respCheckInvite.chat.id.value);\n//   result.title = respCheckInvite.chat.title;\n//   return result;\n// }\n},{key:\"includeKeys\",value:function(){var _includeKeys=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9(message,keys){var _iterator,_step,key,res,_message$_sender,_message$_sender2;return _regeneratorRuntime().wrap(function _callee9$(_context9){while(1)switch(_context9.prev=_context9.next){case 0:if(!message.text){_context9.next=20;break;}_iterator=_createForOfIteratorHelper(keys);_context9.prev=2;_iterator.s();case 4:if((_step=_iterator.n()).done){_context9.next=12;break;}key=_step.value;res=message.text.toLowerCase().includes(key);if(!res){_context9.next=10;break;}if(!((_message$_sender=message._sender)!==null&&_message$_sender!==void 0&&_message$_sender.username&&!message._sender.bot)){_context9.next=10;break;}return _context9.abrupt(\"return\",((_message$_sender2=message._sender)===null||_message$_sender2===void 0?void 0:_message$_sender2.username)+'\\n');case 10:_context9.next=4;break;case 12:_context9.next=17;break;case 14:_context9.prev=14;_context9.t0=_context9[\"catch\"](2);_iterator.e(_context9.t0);case 17:_context9.prev=17;_iterator.f();return _context9.finish(17);case 20:case\"end\":return _context9.stop();}},_callee9,null,[[2,14,17,20]]);}));function includeKeys(_x15,_x16){return _includeKeys.apply(this,arguments);}return includeKeys;}()// async parseMessages(client, entity, keys) {\n//   var parsedUsers = [];\n//   const iterParams = { limit: 10000 };\n//   for await (const message of client.iterMessages(entity, iterParams)) {\n//     const user = await this.includeKeys(message, keys);\n//     if (user) parsedUsers.push(user);\n//   }\n//   const uniqueUsers = parsedUsers.filter(function (elem, pos) {\n//     return parsedUsers.indexOf(elem) === pos;\n//   });\n//   return uniqueUsers;\n// }\n// async initParse(keys, chat) {\n//   while (true) {\n//     await sleep(2000);\n//     try {\n//       const { client, id } = await this.createClient();\n//       if (!client) continue;\n//       const entity = await this.joinChat(client, chat);\n//       if (!entity) continue;\n//       const users = await this.parseMessages(client, entity, keys);\n//       this.livedAccs.push(id);\n//       return users;\n//     } catch (e) {\n//       console.log(e);\n//       if (!this.handleErrors(e)) break;\n//     }\n//   }\n// }\n// async handleAccs() {\n//   for (const acc of this.blockedAccs) {\n//     try {\n//       await deleteOne(acc);\n//     } catch (e) {\n//       console.log(e);\n//     }\n//   }\n//   await unlinkAccs();\n// }\n// async parseChats(keys, chats) {\n//   this.setConsoleLog('Инициализация парсера...');\n//   const results = await Promise.all(\n//     chats.map(async (chat) => {\n//       return await this.initParse(keys, chat);\n//     })\n//   );\n//   const users = results.flat();\n//   const uniqueUsers = users.filter(function (elem, pos) {\n//     return users.indexOf(elem) === pos;\n//   });\n//   await this.handleAccs();\n//   this.setConsoleLog(`Получено ${uniqueUsers.length} пользователей`);\n//   return uniqueUsers;\n// }\n// async parseChats(keys, chats) {\n//   const keysList = keys.split(',');\n//   const usernameList = [];\n//   for (var i = 0; i < chats.length; i++) {\n//     const data = await this.createClient();\n//     if (!data) {\n//       i--;\n//       continue;\n//     }\n//     var result = {};\n//     try {\n//       result = await this.checkChatInvite(data.client, chats[i]);\n//     } catch (e) {\n//       if (e.seconds) {\n//         i--;\n//         continue;\n//       }\n//     }\n//     try {\n//       result = await this.joinPrivateChat(data.client, chats[i]);\n//     } catch (e) {\n//       if (e.errorMessage === 'USER_ALREDY_PARTICIPANT') {\n//         console.log(e.errorMessage);\n//       } else {\n//         i--;\n//         continue;\n//       }\n//     }\n//     try {\n//       const entity = await data.client.getEntity(result.id);\n//       console.log(entity);\n//       for await (const mes of data.client.iterMessages(entity, {\n//         limit: 10000,\n//       })) {\n//         if (mes.text) {\n//           for (const key of keysList) {\n//             const res = mes.text.toLowerCase().includes(key);\n//             if (res) {\n//               console.log(key);\n//               if (mes._sender?.username && !mes._sender.bot) {\n//                 console.log(mes._sender?.username);\n//                 usernameList.push(mes._sender?.username + '\\n');\n//               }\n//             }\n//           }\n//         }\n//       }\n//     } catch (e) {\n//       console.log(e.errorMessage);\n//       i--;\n//       continue;\n//     }\n//     await data.client.disconnect();\n//     console.log(data.id);\n//   }\n//   const uniqueArray = usernameList.filter(function (elem, pos) {\n//     return usernameList.indexOf(elem) === pos;\n//   });\n//   console.log(uniqueArray);\n//   console.log(uniqueArray.length);\n//   return uniqueArray;\n//   // await Promise.all(\n//   //   chats.map(async (chat) => {\n//   //     console.log(account);\n//   //   })\n//   // );\n// }\n//   sliceIntoChunks(arr, chunkSize) {\n//     const res = [];\n//     for (let i = 0; i < arr.length; i += chunkSize) {\n//       const chunk = arr.slice(i, i + chunkSize);\n//       res.push(chunk);\n//     }\n//     return res;\n//   }\n//   async getMessagesId(client, bot) {\n//     var idList = [];\n//     for await (const mes of client.iterMessages(bot, { reverse: true })) {\n//       if (mes.text && mes.text !== '/start') {\n//         idList.push(mes.id);\n//         break;\n//       }\n//     }\n//     return idList;\n//   }\n//   nextUser() {\n//     const user = this._users[0];\n//     if (this._users) this._users.shift();\n//     return user;\n//   }\n//   async sendMessages() {\n//     // await Promise.all(\n//     //   this._clients.map(async (data, index) => {\n//     for (var j = 0; j < this._clients.length; j++) {\n//       const { client, id } = this._clients[j];\n//       const botEntity = await client.getEntity(this._bot);\n//       const idList = await this.getMessagesId(client, botEntity);\n//       for (var i = 0; i < 20; i++) {\n//         const user = this.nextUser();\n//         try {\n//           if (!user) break;\n//           await sleep(1000);\n//           const resp = await client.forwardMessages(user, {\n//             messages: idList,\n//             fromPeer: botEntity,\n//           });\n//           // const resp = await client.sendMessage(user, { message: 'Привет' });\n//           // console.log(resp);\n//           // if (index === 0 && i === 3) {\n//           //   throw 'asdasd';\n//           // }\n//           this.count++;\n//           if (resp) this.setConsoleLog(`${id}: sent message to ${user}`);\n//         } catch (e) {\n//           console.log(e);\n//           if (e.errorMessage) {\n//             this.setConsoleLog(`${id}: throws error ${e.errorMessage}`);\n//             this.setUsers([...this._users, user]);\n//           }\n//           this.handleErrors(e, id);\n//           break;\n//         }\n//       }\n//     }\n//     // })\n//     // );\n//     this.setConsoleLog(`Отправлено ${this.count} сообщений`);\n//   }\n//   async joinBot(bot) {\n//     this.setBot(bot);\n//     for (var j = 0; j < this._clients.length; j++) {\n//       const data = this._clients[j];\n//       try {\n//         const entity = await data.client.getEntity(bot);\n//         const response = await data.client.sendMessage(entity, {\n//           message: '/start',\n//         });\n//         this.setConsoleLog(`${data.id} joined to \"${entity.username}\"`);\n//       } catch (e) {\n//         console.log(e);\n//         if (e.errorMessage)\n//           this.setConsoleLog(`${data.id} throws error ${e.errorMessage}`);\n//       }\n//     }\n//   }\n//   async createClients(project) {\n//     this.count = 0;\n//     this.setUsers(project.usersList);\n//     const result = await Promise.all(\n//       project.accounts.map(async (account, index) => {\n//         const proxy = this.proxyList[index];\n//         const stringSession = new StringSession(account.key);\n//         try {\n//           const client = new TelegramClient(\n//             stringSession,\n//             account.api_id,\n//             account.api_hash,\n//             {\n//               connectionRetries: 10,\n//               useWSS: false,\n//               proxy,\n//             }\n//           );\n//           client.floodSleepThreshold = 10;\n//           client.setLogLevel('info');\n//           client.setParseMode('html');\n//           await client.connect();\n//           const me = await client.getMe();\n//           this.setConsoleLog(`${me.id} connected`);\n//           this.setClients([\n//             ...this._clients,\n//             { client, id: Number(me.id.value) },\n//           ]);\n//           return Number(me.id.value);\n//         } catch (e) {\n//           console.log(e.errorMessage);\n//         }\n//       })\n//     );\n//     this.setConsoleLog(`${this._clients.length} clients is ready`);\n//   }\n//   async disconnect() {\n//     const result = await Promise.all(\n//       this._clients.map(async (data) => {\n//         try {\n//           const { client, id } = data;\n//           await client.disconnect();\n//         } catch (e) {\n//           console.log(e);\n//         }\n//       })\n//     );\n//     this.setClients([]);\n//   }\n// }\n// const startSession = async (account, setConsoleLog) => {\n//   try {\n//     const stringSession = new StringSession(account.key);\n//     const client = new TelegramClient(\n//       stringSession,\n//       account.api_id,\n//       account.api_hash,\n//       {\n//         connectionRetries: 10,\n//         useWSS: false,\n//       }\n//     );\n//     client.setLogLevel('none');\n//     client.setParseMode('html');\n//     await client.connect();\n//     const me = await client.getMe();\n//     setConsoleLog(`${me.firstName} logged in`);\n//     console.log(me);\n//     await client.disconnect();\n//   } catch (e) {\n//     setConsoleLog(e.errorMessage);\n//   }\n// };\n// const startSpam = async (project, setConsoleLog) => {\n//   // setConsoleLog(`Start spam: ${project.usersList.length} users`);\n//   const results = await Promise.all(\n//     project.accounts.map(async (account, index) => {\n//       // setConsoleLog(`Account: ${account.phone}`);\n//       await startSession(account, setConsoleLog);\n//       // return await startSession(account, index);\n//     })\n//   );\n// };\n}]);return TelegramService;}();export default TelegramService;","map":{"version":3,"names":["makeAutoObservable","NewMessage","StringSession","deleteOne","linkToAccount","unlinkFromAccount","handleGroupMessages","handlePrivateMessages","require","Api","TelegramClient","TelegramService","chats","senders","update","requests","proxyList","ip","port","MTProxy","username","password","socksType","timeout","client","hash","chat","result","invoke","messages","CheckChatInvite","respCheckInvite","id","Number","value","title","handleErrors","ImportChatInvite","respJoinInvite","console","log","channels","JoinChannel","channel","resp","link","split","includes","joinPrivateChat","joinPublicChat","getEntity","entity","e","errorMessage","account","_id","seconds","me","photo","photos","GetUserPhotos","userId","DeletePhotos","lastname","UpdateProfile","lastName","about","proxy","Math","floor","random","length","clientParams","connectionRetries","useWSS","stringSession","key","api_id","api_hash","floodSleepThreshold","setLogLevel","setParseMode","connect","getMe","changeProfile","createClient","active","joinChat","addEventHandler","event","incoming","initMonitor","message","keys","text","res","toLowerCase","_sender","bot"],"sources":["C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/src/components/telegram/TelegramService.js"],"sourcesContent":["import { makeAutoObservable } from 'mobx';\r\nimport { NewMessage } from 'telegram/events';\r\nimport { StringSession } from 'telegram/sessions';\r\nimport { deleteOne } from '../../http/accountApi';\r\nimport { linkToAccount, unlinkFromAccount } from '../../http/chatApi';\r\nimport handleGroupMessages from './handleGroupMessages';\r\nimport handlePrivateMessages from './handlePrivateMessages';\r\nconst { Api, TelegramClient } = require('telegram');\r\n\r\nclass TelegramService {\r\n  constructor() {\r\n    this.chats = [];\r\n    this.senders = [];\r\n    this.update = [];\r\n    this.requests = [];\r\n    this.proxyList = [\r\n      {\r\n        ip: '194.34.248.152',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'EcUF67',\r\n        password: 'yJzWaRCDNC',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n      {\r\n        ip: '185.181.244.150',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'EcUF67',\r\n        password: 'yJzWaRCDNC',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n      {\r\n        ip: '46.8.111.51',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'EcUF67',\r\n        password: 'yJzWaRCDNC',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n      {\r\n        ip: '109.248.48.41',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'EcUF67',\r\n        password: 'yJzWaRCDNC',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n      {\r\n        ip: '188.130.221.27',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'EcUF67',\r\n        password: 'yJzWaRCDNC',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n      {\r\n        ip: '213.226.101.121',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'EcUF67',\r\n        password: 'yJzWaRCDNC',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n      {\r\n        ip: '45.11.20.129',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'EcUF67',\r\n        password: 'yJzWaRCDNC',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n      {\r\n        ip: '95.182.125.184',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'EcUF67',\r\n        password: 'yJzWaRCDNC',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n      {\r\n        ip: '188.130.218.55',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'EcUF67',\r\n        password: 'yJzWaRCDNC',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n      {\r\n        ip: '45.86.0.115',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'EcUF67',\r\n        password: 'yJzWaRCDNC',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n      {\r\n        ip: '95.182.124.205',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'SciAnk',\r\n        password: 'HF2fwDaubg',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n      {\r\n        ip: '95.182.126.141',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'SciAnk',\r\n        password: 'HF2fwDaubg',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n      {\r\n        ip: '188.130.129.238',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'SciAnk',\r\n        password: 'HF2fwDaubg',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n      {\r\n        ip: '109.248.143.248',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'SciAnk',\r\n        password: 'HF2fwDaubg',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n      {\r\n        ip: '109.248.13.232',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'SciAnk',\r\n        password: 'HF2fwDaubg',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n      {\r\n        ip: '188.130.137.13',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'SciAnk',\r\n        password: 'HF2fwDaubg',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n      {\r\n        ip: '185.181.247.13',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'SciAnk',\r\n        password: 'HF2fwDaubg',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n      {\r\n        ip: '185.181.244.102',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'SciAnk',\r\n        password: 'HF2fwDaubg',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n      {\r\n        ip: '109.248.14.40',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'SciAnk',\r\n        password: 'HF2fwDaubg',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n      {\r\n        ip: '188.130.129.94',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'SciAnk',\r\n        password: 'HF2fwDaubg',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n      {\r\n        ip: '46.8.155.71',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'SciAnk',\r\n        password: 'HF2fwDaubg',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n      {\r\n        ip: '188.130.187.204',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'SciAnk',\r\n        password: 'HF2fwDaubg',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n      {\r\n        ip: '185.181.246.84',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'SciAnk',\r\n        password: 'HF2fwDaubg',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n      {\r\n        ip: '45.81.136.220',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'SciAnk',\r\n        password: 'HF2fwDaubg',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n      {\r\n        ip: '46.8.223.57',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'SciAnk',\r\n        password: 'HF2fwDaubg',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n      {\r\n        ip: '46.8.23.82',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'SciAnk',\r\n        password: 'HF2fwDaubg',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n      {\r\n        ip: '194.34.248.93',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'SciAnk',\r\n        password: 'HF2fwDaubg',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n      {\r\n        ip: '188.130.128.132',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'SciAnk',\r\n        password: 'HF2fwDaubg',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n      {\r\n        ip: '45.90.196.66',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'SciAnk',\r\n        password: 'HF2fwDaubg',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n      {\r\n        ip: '188.130.185.236',\r\n        port: 3001,\r\n        MTProxy: false,\r\n        username: 'SciAnk',\r\n        password: 'HF2fwDaubg',\r\n        socksType: 5,\r\n        timeout: 5,\r\n      },\r\n    ];\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  async joinPrivateChat(client, hash, chat) {\r\n    var result = {};\r\n    try {\r\n      const respCheckInvite = await client.invoke(\r\n        new Api.messages.CheckChatInvite({\r\n          hash: hash,\r\n        })\r\n      );\r\n      result.id = Number(respCheckInvite.chat.id.value);\r\n      result.title = respCheckInvite.chat.title;\r\n      return result.id;\r\n    } catch (e) {\r\n      this.handleErrors(e, chat);\r\n    }\r\n    try {\r\n      const respJoinInvite = await client.invoke(\r\n        new Api.messages.ImportChatInvite({\r\n          hash: hash,\r\n        })\r\n      );\r\n      result.id = Number(respJoinInvite.chats[0].id);\r\n      result.title = respJoinInvite.chats[0].title;\r\n      return result.id;\r\n    } catch (e) {\r\n      this.handleErrors(e, chat);\r\n    }\r\n  }\r\n\r\n  async joinPublicChat(client, hash, chat) {\r\n    var result = {};\r\n    console.log(hash);\r\n    try {\r\n      const resp = await client.invoke(\r\n        new Api.channels.JoinChannel({\r\n          channel: hash,\r\n        })\r\n      );\r\n      console.log(resp);\r\n      result.id = hash;\r\n      result.title = resp.chats[0].title;\r\n      return hash;\r\n    } catch (e) {\r\n      console.log(e);\r\n      this.handleErrors(e, chat);\r\n    }\r\n  }\r\n\r\n  async joinChat(chat) {\r\n    const hash = chat.link.split('/')[1];\r\n    const result = hash.includes('+')\r\n      ? await this.joinPrivateChat(chat.client, hash.split('+')[1], chat)\r\n      : await this.joinPublicChat(chat.client, hash, chat);\r\n    if (!result) return null;\r\n    console.log(result);\r\n    const entity = await chat.client.getEntity(result);\r\n    return entity;\r\n  }\r\n\r\n  async handleErrors(e, chat) {\r\n    console.log(e);\r\n    if (e.errorMessage === 'USER_DEACTIVATED_BAN') {\r\n      console.log(e.errorMessage);\r\n      await deleteOne(chat.account._id);\r\n    }\r\n    if (e.errorMessage === 'USER_DEACTIVATED') {\r\n      console.log(e.errorMessage);\r\n      await deleteOne(chat.account._id);\r\n    }\r\n    if (e.errorMessage === 'SESSION_REVOKED') {\r\n      console.log(e.errorMessage);\r\n      await deleteOne(chat.account._id);\r\n    }\r\n    if (e.errorMessage === 'AUTH_KEY_DUPLICATED') {\r\n      console.log(e.errorMessage);\r\n      await deleteOne(chat.account._id);\r\n    }\r\n    if (e.errorMessage === 'AUTH_KEY_UNREGISTERED ') {\r\n      console.log(e.errorMessage);\r\n      await deleteOne(chat.account._id);\r\n    }\r\n    if (e.errorMessage === 'INVITE_HASH_EXPIRED') {\r\n      console.log(e.errorMessage);\r\n      await deleteOne(chat.account._id);\r\n    }\r\n    if (e.errorMessage === 'FLOOD') {\r\n      console.log(e.errorMessage);\r\n      if (e.seconds > 300) {\r\n        await unlinkFromAccount(chat._id);\r\n        chat.account = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  async changeProfile(me, client) {\r\n    console.log(me);\r\n    if (me.photo) {\r\n      var result = await client.invoke(\r\n        new Api.photos.GetUserPhotos({\r\n          userId: me.id,\r\n        })\r\n      );\r\n      result = await client.invoke(\r\n        new Api.photos.DeletePhotos({\r\n          id: result.photos,\r\n        })\r\n      );\r\n    }\r\n    if (me.lastname) {\r\n      result = await client.invoke(\r\n        new Api.account.UpdateProfile({\r\n          lastName: '',\r\n          about: '',\r\n        })\r\n      );\r\n      console.log(result);\r\n    }\r\n  }\r\n\r\n  async createClient(chat) {\r\n    if (chat?.client) return;\r\n    chat.account = await linkToAccount(chat._id);\r\n    if (!chat?.account) return;\r\n    const proxy =\r\n      this.proxyList[Math.floor(Math.random() * this.proxyList.length)];\r\n    const clientParams = {\r\n      connectionRetries: 10,\r\n      useWSS: true,\r\n      proxy,\r\n    };\r\n    try {\r\n      const stringSession = new StringSession(chat.account.key);\r\n      const client = new TelegramClient(\r\n        stringSession,\r\n        chat.account.api_id,\r\n        chat.account.api_hash,\r\n        clientParams\r\n      );\r\n\r\n      client.floodSleepThreshold = 300;\r\n      client.setLogLevel('info');\r\n      client.setParseMode('html');\r\n      await client.connect();\r\n      const me = await client.getMe();\r\n      chat.me = me;\r\n      await this.changeProfile(me, client);\r\n      return client;\r\n    } catch (e) {\r\n      this.handleErrors(e, chat);\r\n      return;\r\n    }\r\n  }\r\n\r\n  async initMonitor(chat) {\r\n    while (true) {\r\n      try {\r\n        if (!chat) return;\r\n        chat.client = await this.createClient(chat);\r\n        if (!chat?.client) {\r\n          await unlinkFromAccount(chat._id);\r\n          chat.active = false;\r\n          continue;\r\n        }\r\n        chat.entity = await this.joinChat(chat);\r\n        if (!chat?.entity) {\r\n          await unlinkFromAccount(chat._id);\r\n          chat.active = false;\r\n          continue;\r\n        }\r\n        chat.client.addEventHandler((event) => {\r\n          handleGroupMessages(event, chat, this.requests, this.senders);\r\n        }, new NewMessage({ incoming: true, chats: [chat.entity.id] }));\r\n        chat.client.addEventHandler((event) => {\r\n          handlePrivateMessages(event, chat, this.senders);\r\n        }, new NewMessage({ incoming: true }));\r\n        chat.active = true;\r\n        return true;\r\n      } catch (e) {\r\n        chat.active = false;\r\n        console.log(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  async startMonitor(chat) {\r\n    if (!chat.active) return await this.initMonitor(chat);\r\n  }\r\n\r\n  // async checkChatInvite(client, link) {\r\n  //   const hash = link.split('+')[1];\r\n  //   var result = {};\r\n  //   const respCheckInvite = await client.invoke(\r\n  //     new Api.messages.CheckChatInvite({\r\n  //       hash: hash,\r\n  //     })\r\n  //   );\r\n  //   result.id = Number(respCheckInvite.chat.id.value);\r\n  //   result.title = respCheckInvite.chat.title;\r\n  //   return result;\r\n  // }\r\n\r\n  async includeKeys(message, keys) {\r\n    if (message.text) {\r\n      for (const key of keys) {\r\n        const res = message.text.toLowerCase().includes(key);\r\n        if (res) {\r\n          if (message._sender?.username && !message._sender.bot) {\r\n            return message._sender?.username + '\\n';\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // async parseMessages(client, entity, keys) {\r\n  //   var parsedUsers = [];\r\n  //   const iterParams = { limit: 10000 };\r\n\r\n  //   for await (const message of client.iterMessages(entity, iterParams)) {\r\n  //     const user = await this.includeKeys(message, keys);\r\n  //     if (user) parsedUsers.push(user);\r\n  //   }\r\n  //   const uniqueUsers = parsedUsers.filter(function (elem, pos) {\r\n  //     return parsedUsers.indexOf(elem) === pos;\r\n  //   });\r\n  //   return uniqueUsers;\r\n  // }\r\n\r\n  // async initParse(keys, chat) {\r\n  //   while (true) {\r\n  //     await sleep(2000);\r\n  //     try {\r\n  //       const { client, id } = await this.createClient();\r\n  //       if (!client) continue;\r\n  //       const entity = await this.joinChat(client, chat);\r\n  //       if (!entity) continue;\r\n  //       const users = await this.parseMessages(client, entity, keys);\r\n  //       this.livedAccs.push(id);\r\n  //       return users;\r\n  //     } catch (e) {\r\n  //       console.log(e);\r\n  //       if (!this.handleErrors(e)) break;\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  // async handleAccs() {\r\n  //   for (const acc of this.blockedAccs) {\r\n  //     try {\r\n  //       await deleteOne(acc);\r\n  //     } catch (e) {\r\n  //       console.log(e);\r\n  //     }\r\n  //   }\r\n  //   await unlinkAccs();\r\n  // }\r\n\r\n  // async parseChats(keys, chats) {\r\n  //   this.setConsoleLog('Инициализация парсера...');\r\n  //   const results = await Promise.all(\r\n  //     chats.map(async (chat) => {\r\n  //       return await this.initParse(keys, chat);\r\n  //     })\r\n  //   );\r\n  //   const users = results.flat();\r\n  //   const uniqueUsers = users.filter(function (elem, pos) {\r\n  //     return users.indexOf(elem) === pos;\r\n  //   });\r\n  //   await this.handleAccs();\r\n  //   this.setConsoleLog(`Получено ${uniqueUsers.length} пользователей`);\r\n  //   return uniqueUsers;\r\n  // }\r\n\r\n  // async parseChats(keys, chats) {\r\n  //   const keysList = keys.split(',');\r\n  //   const usernameList = [];\r\n  //   for (var i = 0; i < chats.length; i++) {\r\n  //     const data = await this.createClient();\r\n  //     if (!data) {\r\n  //       i--;\r\n  //       continue;\r\n  //     }\r\n  //     var result = {};\r\n  //     try {\r\n  //       result = await this.checkChatInvite(data.client, chats[i]);\r\n  //     } catch (e) {\r\n  //       if (e.seconds) {\r\n  //         i--;\r\n  //         continue;\r\n  //       }\r\n  //     }\r\n  //     try {\r\n  //       result = await this.joinPrivateChat(data.client, chats[i]);\r\n  //     } catch (e) {\r\n  //       if (e.errorMessage === 'USER_ALREDY_PARTICIPANT') {\r\n  //         console.log(e.errorMessage);\r\n  //       } else {\r\n  //         i--;\r\n  //         continue;\r\n  //       }\r\n  //     }\r\n  //     try {\r\n  //       const entity = await data.client.getEntity(result.id);\r\n  //       console.log(entity);\r\n  //       for await (const mes of data.client.iterMessages(entity, {\r\n  //         limit: 10000,\r\n  //       })) {\r\n  //         if (mes.text) {\r\n  //           for (const key of keysList) {\r\n  //             const res = mes.text.toLowerCase().includes(key);\r\n  //             if (res) {\r\n  //               console.log(key);\r\n  //               if (mes._sender?.username && !mes._sender.bot) {\r\n  //                 console.log(mes._sender?.username);\r\n  //                 usernameList.push(mes._sender?.username + '\\n');\r\n  //               }\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //       }\r\n  //     } catch (e) {\r\n  //       console.log(e.errorMessage);\r\n  //       i--;\r\n  //       continue;\r\n  //     }\r\n\r\n  //     await data.client.disconnect();\r\n  //     console.log(data.id);\r\n  //   }\r\n  //   const uniqueArray = usernameList.filter(function (elem, pos) {\r\n  //     return usernameList.indexOf(elem) === pos;\r\n  //   });\r\n  //   console.log(uniqueArray);\r\n  //   console.log(uniqueArray.length);\r\n  //   return uniqueArray;\r\n\r\n  //   // await Promise.all(\r\n  //   //   chats.map(async (chat) => {\r\n  //   //     console.log(account);\r\n  //   //   })\r\n  //   // );\r\n  // }\r\n\r\n  //   sliceIntoChunks(arr, chunkSize) {\r\n  //     const res = [];\r\n  //     for (let i = 0; i < arr.length; i += chunkSize) {\r\n  //       const chunk = arr.slice(i, i + chunkSize);\r\n  //       res.push(chunk);\r\n  //     }\r\n  //     return res;\r\n  //   }\r\n\r\n  //   async getMessagesId(client, bot) {\r\n  //     var idList = [];\r\n  //     for await (const mes of client.iterMessages(bot, { reverse: true })) {\r\n  //       if (mes.text && mes.text !== '/start') {\r\n  //         idList.push(mes.id);\r\n  //         break;\r\n  //       }\r\n  //     }\r\n  //     return idList;\r\n  //   }\r\n\r\n  //   nextUser() {\r\n  //     const user = this._users[0];\r\n  //     if (this._users) this._users.shift();\r\n  //     return user;\r\n  //   }\r\n\r\n  //   async sendMessages() {\r\n  //     // await Promise.all(\r\n  //     //   this._clients.map(async (data, index) => {\r\n  //     for (var j = 0; j < this._clients.length; j++) {\r\n  //       const { client, id } = this._clients[j];\r\n  //       const botEntity = await client.getEntity(this._bot);\r\n  //       const idList = await this.getMessagesId(client, botEntity);\r\n  //       for (var i = 0; i < 20; i++) {\r\n  //         const user = this.nextUser();\r\n  //         try {\r\n  //           if (!user) break;\r\n  //           await sleep(1000);\r\n  //           const resp = await client.forwardMessages(user, {\r\n  //             messages: idList,\r\n  //             fromPeer: botEntity,\r\n  //           });\r\n  //           // const resp = await client.sendMessage(user, { message: 'Привет' });\r\n  //           // console.log(resp);\r\n  //           // if (index === 0 && i === 3) {\r\n  //           //   throw 'asdasd';\r\n  //           // }\r\n  //           this.count++;\r\n  //           if (resp) this.setConsoleLog(`${id}: sent message to ${user}`);\r\n  //         } catch (e) {\r\n  //           console.log(e);\r\n  //           if (e.errorMessage) {\r\n  //             this.setConsoleLog(`${id}: throws error ${e.errorMessage}`);\r\n  //             this.setUsers([...this._users, user]);\r\n  //           }\r\n  //           this.handleErrors(e, id);\r\n  //           break;\r\n  //         }\r\n  //       }\r\n  //     }\r\n  //     // })\r\n  //     // );\r\n  //     this.setConsoleLog(`Отправлено ${this.count} сообщений`);\r\n  //   }\r\n\r\n  //   async joinBot(bot) {\r\n  //     this.setBot(bot);\r\n  //     for (var j = 0; j < this._clients.length; j++) {\r\n  //       const data = this._clients[j];\r\n  //       try {\r\n  //         const entity = await data.client.getEntity(bot);\r\n  //         const response = await data.client.sendMessage(entity, {\r\n  //           message: '/start',\r\n  //         });\r\n  //         this.setConsoleLog(`${data.id} joined to \"${entity.username}\"`);\r\n  //       } catch (e) {\r\n  //         console.log(e);\r\n  //         if (e.errorMessage)\r\n  //           this.setConsoleLog(`${data.id} throws error ${e.errorMessage}`);\r\n  //       }\r\n  //     }\r\n  //   }\r\n\r\n  //   async createClients(project) {\r\n  //     this.count = 0;\r\n  //     this.setUsers(project.usersList);\r\n  //     const result = await Promise.all(\r\n  //       project.accounts.map(async (account, index) => {\r\n  //         const proxy = this.proxyList[index];\r\n  //         const stringSession = new StringSession(account.key);\r\n  //         try {\r\n  //           const client = new TelegramClient(\r\n  //             stringSession,\r\n  //             account.api_id,\r\n  //             account.api_hash,\r\n  //             {\r\n  //               connectionRetries: 10,\r\n  //               useWSS: false,\r\n  //               proxy,\r\n  //             }\r\n  //           );\r\n  //           client.floodSleepThreshold = 10;\r\n  //           client.setLogLevel('info');\r\n  //           client.setParseMode('html');\r\n  //           await client.connect();\r\n  //           const me = await client.getMe();\r\n  //           this.setConsoleLog(`${me.id} connected`);\r\n  //           this.setClients([\r\n  //             ...this._clients,\r\n  //             { client, id: Number(me.id.value) },\r\n  //           ]);\r\n  //           return Number(me.id.value);\r\n  //         } catch (e) {\r\n  //           console.log(e.errorMessage);\r\n  //         }\r\n  //       })\r\n  //     );\r\n  //     this.setConsoleLog(`${this._clients.length} clients is ready`);\r\n  //   }\r\n\r\n  //   async disconnect() {\r\n  //     const result = await Promise.all(\r\n  //       this._clients.map(async (data) => {\r\n  //         try {\r\n  //           const { client, id } = data;\r\n  //           await client.disconnect();\r\n  //         } catch (e) {\r\n  //           console.log(e);\r\n  //         }\r\n  //       })\r\n  //     );\r\n  //     this.setClients([]);\r\n  //   }\r\n  // }\r\n\r\n  // const startSession = async (account, setConsoleLog) => {\r\n  //   try {\r\n  //     const stringSession = new StringSession(account.key);\r\n  //     const client = new TelegramClient(\r\n  //       stringSession,\r\n  //       account.api_id,\r\n  //       account.api_hash,\r\n  //       {\r\n  //         connectionRetries: 10,\r\n  //         useWSS: false,\r\n  //       }\r\n  //     );\r\n  //     client.setLogLevel('none');\r\n  //     client.setParseMode('html');\r\n  //     await client.connect();\r\n  //     const me = await client.getMe();\r\n  //     setConsoleLog(`${me.firstName} logged in`);\r\n  //     console.log(me);\r\n  //     await client.disconnect();\r\n  //   } catch (e) {\r\n  //     setConsoleLog(e.errorMessage);\r\n  //   }\r\n  // };\r\n\r\n  // const startSpam = async (project, setConsoleLog) => {\r\n  //   // setConsoleLog(`Start spam: ${project.usersList.length} users`);\r\n  //   const results = await Promise.all(\r\n  //     project.accounts.map(async (account, index) => {\r\n  //       // setConsoleLog(`Account: ${account.phone}`);\r\n  //       await startSession(account, setConsoleLog);\r\n  //       // return await startSession(account, index);\r\n  //     })\r\n  //   );\r\n  // };\r\n}\r\nexport default TelegramService;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}