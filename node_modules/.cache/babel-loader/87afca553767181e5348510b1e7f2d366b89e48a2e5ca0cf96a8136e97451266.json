{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MessageContainer = void 0;\nvar TLMessage_1 = require(\"./TLMessage\");\nvar MessageContainer = /*#__PURE__*/function () {\n  function MessageContainer(messages) {\n    _classCallCheck(this, MessageContainer);\n    this.CONSTRUCTOR_ID = 0x73f1f8dc;\n    this.messages = messages;\n    this.classType = \"constructor\";\n  }\n  _createClass(MessageContainer, null, [{\n    key: \"fromReader\",\n    value: function () {\n      var _fromReader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(reader) {\n        var messages, length, x, msgId, seqNo, _length, before, obj, tlMessage;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              messages = [];\n              length = reader.readInt();\n              for (x = 0; x < length; x++) {\n                msgId = reader.readLong();\n                seqNo = reader.readInt();\n                _length = reader.readInt();\n                before = reader.tellPosition();\n                obj = reader.tgReadObject();\n                reader.setPosition(before + _length);\n                tlMessage = new TLMessage_1.TLMessage(msgId, seqNo, obj);\n                messages.push(tlMessage);\n              }\n              return _context.abrupt(\"return\", new MessageContainer(messages));\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function fromReader(_x) {\n        return _fromReader.apply(this, arguments);\n      }\n      return fromReader;\n    }()\n  }]);\n  return MessageContainer;\n}();\nexports.MessageContainer = MessageContainer;\nMessageContainer.CONSTRUCTOR_ID = 0x73f1f8dc;\nMessageContainer.classType = \"constructor\";\n// Maximum size in bytes for the inner payload of the container.\n// Telegram will close the connection if the payload is bigger.\n// The overhead of the container itself is subtracted.\nMessageContainer.MAXIMUM_SIZE = 1044456 - 8;\n// Maximum amount of messages that can't be sent inside a single\n// container, inclusive. Beyond this limit Telegram will respond\n// with BAD_MESSAGE 64 (invalid container).\n//\n// This limit is not 100% accurate and may in some cases be higher.\n// However, sending up to 100 requests at once in a single container\n// is a reasonable conservative value, since it could also depend on\n// other factors like size per request, but we cannot know this.\nMessageContainer.MAXIMUM_LENGTH = 100;","map":{"version":3,"names":["Object","defineProperty","exports","value","MessageContainer","TLMessage_1","require","messages","CONSTRUCTOR_ID","classType","reader","length","readInt","x","msgId","readLong","seqNo","before","tellPosition","obj","tgReadObject","setPosition","tlMessage","TLMessage","push","MAXIMUM_SIZE","MAXIMUM_LENGTH"],"sources":["C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/telegram/tl/core/MessageContainer.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MessageContainer = void 0;\r\nconst TLMessage_1 = require(\"./TLMessage\");\r\nclass MessageContainer {\r\n    constructor(messages) {\r\n        this.CONSTRUCTOR_ID = 0x73f1f8dc;\r\n        this.messages = messages;\r\n        this.classType = \"constructor\";\r\n    }\r\n    static async fromReader(reader) {\r\n        const messages = [];\r\n        const length = reader.readInt();\r\n        for (let x = 0; x < length; x++) {\r\n            const msgId = reader.readLong();\r\n            const seqNo = reader.readInt();\r\n            const length = reader.readInt();\r\n            const before = reader.tellPosition();\r\n            const obj = reader.tgReadObject();\r\n            reader.setPosition(before + length);\r\n            const tlMessage = new TLMessage_1.TLMessage(msgId, seqNo, obj);\r\n            messages.push(tlMessage);\r\n        }\r\n        return new MessageContainer(messages);\r\n    }\r\n}\r\nexports.MessageContainer = MessageContainer;\r\nMessageContainer.CONSTRUCTOR_ID = 0x73f1f8dc;\r\nMessageContainer.classType = \"constructor\";\r\n// Maximum size in bytes for the inner payload of the container.\r\n// Telegram will close the connection if the payload is bigger.\r\n// The overhead of the container itself is subtracted.\r\nMessageContainer.MAXIMUM_SIZE = 1044456 - 8;\r\n// Maximum amount of messages that can't be sent inside a single\r\n// container, inclusive. Beyond this limit Telegram will respond\r\n// with BAD_MESSAGE 64 (invalid container).\r\n//\r\n// This limit is not 100% accurate and may in some cases be higher.\r\n// However, sending up to 100 requests at once in a single container\r\n// is a reasonable conservative value, since it could also depend on\r\n// other factors like size per request, but we cannot know this.\r\nMessageContainer.MAXIMUM_LENGTH = 100;\r\n"],"mappings":"AAAA,YAAY;;AAAC;AAAA;AAAA;AAAA;AACbA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,gBAAgB,GAAG,KAAK,CAAC;AACjC,IAAMC,WAAW,GAAGC,OAAO,CAAC,aAAa,CAAC;AAAC,IACrCF,gBAAgB;EAClB,0BAAYG,QAAQ,EAAE;IAAA;IAClB,IAAI,CAACC,cAAc,GAAG,UAAU;IAChC,IAAI,CAACD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACE,SAAS,GAAG,aAAa;EAClC;EAAC;IAAA;IAAA;MAAA,6EACD,iBAAwBC,MAAM;QAAA;QAAA;UAAA;YAAA;cACpBH,QAAQ,GAAG,EAAE;cACbI,MAAM,GAAGD,MAAM,CAACE,OAAO,EAAE;cAC/B,KAASC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,MAAM,EAAEE,CAAC,EAAE,EAAE;gBACvBC,KAAK,GAAGJ,MAAM,CAACK,QAAQ,EAAE;gBACzBC,KAAK,GAAGN,MAAM,CAACE,OAAO,EAAE;gBACxBD,OAAM,GAAGD,MAAM,CAACE,OAAO,EAAE;gBACzBK,MAAM,GAAGP,MAAM,CAACQ,YAAY,EAAE;gBAC9BC,GAAG,GAAGT,MAAM,CAACU,YAAY,EAAE;gBACjCV,MAAM,CAACW,WAAW,CAACJ,MAAM,GAAGN,OAAM,CAAC;gBAC7BW,SAAS,GAAG,IAAIjB,WAAW,CAACkB,SAAS,CAACT,KAAK,EAAEE,KAAK,EAAEG,GAAG,CAAC;gBAC9DZ,QAAQ,CAACiB,IAAI,CAACF,SAAS,CAAC;cAC5B;cAAC,iCACM,IAAIlB,gBAAgB,CAACG,QAAQ,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CACxC;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA;AAELL,OAAO,CAACE,gBAAgB,GAAGA,gBAAgB;AAC3CA,gBAAgB,CAACI,cAAc,GAAG,UAAU;AAC5CJ,gBAAgB,CAACK,SAAS,GAAG,aAAa;AAC1C;AACA;AACA;AACAL,gBAAgB,CAACqB,YAAY,GAAG,OAAO,GAAG,CAAC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACArB,gBAAgB,CAACsB,cAAc,GAAG,GAAG"},"metadata":{},"sourceType":"script","externalDependencies":[]}