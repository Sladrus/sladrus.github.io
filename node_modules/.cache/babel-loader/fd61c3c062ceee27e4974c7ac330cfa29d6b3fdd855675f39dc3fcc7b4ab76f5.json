{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _regeneratorRuntime = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.computeDigest = exports.computeCheck = void 0;\nvar buffer_1 = require(\"buffer/\");\nvar tl_1 = require(\"./tl\");\nvar Helpers_1 = require(\"./Helpers\");\nvar big_integer_1 = __importDefault(require(\"big-integer\"));\nvar CryptoFile_1 = __importDefault(require(\"./CryptoFile\"));\nvar SIZE_FOR_HASH = 256;\n/**\r\n *\r\n *\r\n * @param prime{BigInteger}\r\n * @param g{BigInteger}\r\n */\n/*\r\nWe don't support changing passwords yet\r\nfunction checkPrimeAndGoodCheck(prime, g) {\r\n    console.error('Unsupported function `checkPrimeAndGoodCheck` call. Arguments:', prime, g)\r\n\r\n    const goodPrimeBitsCount = 2048\r\n    if (prime < 0 || prime.bitLength() !== goodPrimeBitsCount) {\r\n        throw new Error(`bad prime count ${prime.bitLength()},expected ${goodPrimeBitsCount}`)\r\n    }\r\n    // TODO this is kinda slow\r\n    if (Factorizator.factorize(prime)[0] !== 1) {\r\n        throw new Error('give \"prime\" is not prime')\r\n    }\r\n    if (g.eq(bigInt(2))) {\r\n        if ((prime.remainder(bigInt(8))).neq(bigInt(7))) {\r\n            throw new Error(`bad g ${g}, mod8 ${prime % 8}`)\r\n        }\r\n    } else if (g.eq(bigInt(3))) {\r\n        if ((prime.remainder(bigInt(3))).neq(bigInt(2))) {\r\n            throw new Error(`bad g ${g}, mod3 ${prime % 3}`)\r\n        }\r\n        // eslint-disable-next-line no-empty\r\n    } else if (g.eq(bigInt(4))) {\r\n\r\n    } else if (g.eq(bigInt(5))) {\r\n        if (!([ bigInt(1), bigInt(4) ].includes(prime.remainder(bigInt(5))))) {\r\n            throw new Error(`bad g ${g}, mod8 ${prime % 5}`)\r\n        }\r\n    } else if (g.eq(bigInt(6))) {\r\n        if (!([ bigInt(19), bigInt(23) ].includes(prime.remainder(bigInt(24))))) {\r\n            throw new Error(`bad g ${g}, mod8 ${prime % 24}`)\r\n        }\r\n    } else if (g.eq(bigInt(7))) {\r\n        if (!([ bigInt(3), bigInt(5), bigInt(6) ].includes(prime.remainder(bigInt(7))))) {\r\n            throw new Error(`bad g ${g}, mod8 ${prime % 7}`)\r\n        }\r\n    } else {\r\n        throw new Error(`bad g ${g}`)\r\n    }\r\n    const primeSub1Div2 = (prime.subtract(bigInt(1))).divide(bigInt(2))\r\n    if (Factorizator.factorize(primeSub1Div2)[0] !== 1) {\r\n        throw new Error('(prime - 1) // 2 is not prime')\r\n    }\r\n}\r\n*/\n/**\r\n *\r\n * @param primeBytes{Buffer}\r\n * @param g{number}\r\n */\nfunction checkPrimeAndGood(primeBytes, g) {\n  var goodPrime = buffer_1.Buffer.from([0xc7, 0x1c, 0xae, 0xb9, 0xc6, 0xb1, 0xc9, 0x04, 0x8e, 0x6c, 0x52, 0x2f, 0x70, 0xf1, 0x3f, 0x73, 0x98, 0x0d, 0x40, 0x23, 0x8e, 0x3e, 0x21, 0xc1, 0x49, 0x34, 0xd0, 0x37, 0x56, 0x3d, 0x93, 0x0f, 0x48, 0x19, 0x8a, 0x0a, 0xa7, 0xc1, 0x40, 0x58, 0x22, 0x94, 0x93, 0xd2, 0x25, 0x30, 0xf4, 0xdb, 0xfa, 0x33, 0x6f, 0x6e, 0x0a, 0xc9, 0x25, 0x13, 0x95, 0x43, 0xae, 0xd4, 0x4c, 0xce, 0x7c, 0x37, 0x20, 0xfd, 0x51, 0xf6, 0x94, 0x58, 0x70, 0x5a, 0xc6, 0x8c, 0xd4, 0xfe, 0x6b, 0x6b, 0x13, 0xab, 0xdc, 0x97, 0x46, 0x51, 0x29, 0x69, 0x32, 0x84, 0x54, 0xf1, 0x8f, 0xaf, 0x8c, 0x59, 0x5f, 0x64, 0x24, 0x77, 0xfe, 0x96, 0xbb, 0x2a, 0x94, 0x1d, 0x5b, 0xcd, 0x1d, 0x4a, 0xc8, 0xcc, 0x49, 0x88, 0x07, 0x08, 0xfa, 0x9b, 0x37, 0x8e, 0x3c, 0x4f, 0x3a, 0x90, 0x60, 0xbe, 0xe6, 0x7c, 0xf9, 0xa4, 0xa4, 0xa6, 0x95, 0x81, 0x10, 0x51, 0x90, 0x7e, 0x16, 0x27, 0x53, 0xb5, 0x6b, 0x0f, 0x6b, 0x41, 0x0d, 0xba, 0x74, 0xd8, 0xa8, 0x4b, 0x2a, 0x14, 0xb3, 0x14, 0x4e, 0x0e, 0xf1, 0x28, 0x47, 0x54, 0xfd, 0x17, 0xed, 0x95, 0x0d, 0x59, 0x65, 0xb4, 0xb9, 0xdd, 0x46, 0x58, 0x2d, 0xb1, 0x17, 0x8d, 0x16, 0x9c, 0x6b, 0xc4, 0x65, 0xb0, 0xd6, 0xff, 0x9c, 0xa3, 0x92, 0x8f, 0xef, 0x5b, 0x9a, 0xe4, 0xe4, 0x18, 0xfc, 0x15, 0xe8, 0x3e, 0xbe, 0xa0, 0xf8, 0x7f, 0xa9, 0xff, 0x5e, 0xed, 0x70, 0x05, 0x0d, 0xed, 0x28, 0x49, 0xf4, 0x7b, 0xf9, 0x59, 0xd9, 0x56, 0x85, 0x0c, 0xe9, 0x29, 0x85, 0x1f, 0x0d, 0x81, 0x15, 0xf6, 0x35, 0xb1, 0x05, 0xee, 0x2e, 0x4e, 0x15, 0xd0, 0x4b, 0x24, 0x54, 0xbf, 0x6f, 0x4f, 0xad, 0xf0, 0x34, 0xb1, 0x04, 0x03, 0x11, 0x9c, 0xd8, 0xe3, 0xb9, 0x2f, 0xcc, 0x5b]);\n  if (goodPrime.equals(primeBytes)) {\n    if ([3, 4, 5, 7].includes(g)) {\n      return; // It's good\n    }\n  }\n\n  throw new Error(\"Changing passwords unsupported\");\n  //checkPrimeAndGoodCheck(readBigIntFromBuffer(primeBytes, false), g)\n}\n/**\r\n *\r\n * @param number{BigInteger}\r\n * @param p{BigInteger}\r\n * @returns {boolean}\r\n */\nfunction isGoodLarge(number, p) {\n  return number.greater((0, big_integer_1.default)(0)) && p.subtract(number).greater((0, big_integer_1.default)(0));\n}\n/**\r\n *\r\n * @param number {Buffer}\r\n * @returns {Buffer}\r\n */\nfunction numBytesForHash(number) {\n  return buffer_1.Buffer.concat([buffer_1.Buffer.alloc(SIZE_FOR_HASH - number.length), number]);\n}\n/**\r\n *\r\n * @param g {bigInt}\r\n * @returns {Buffer}\r\n */\nfunction bigNumForHash(g) {\n  return (0, Helpers_1.readBufferFromBigInt)(g, SIZE_FOR_HASH, false);\n}\n/**\r\n *\r\n * @param modexp {BigInteger}\r\n * @param prime {BigInteger}\r\n * @returns {Boolean}\r\n */\nfunction isGoodModExpFirst(modexp, prime) {\n  var diff = prime.subtract(modexp);\n  var minDiffBitsCount = 2048 - 64;\n  var maxModExpSize = 256;\n  return !(diff.lesser((0, big_integer_1.default)(0)) || diff.bitLength().toJSNumber() < minDiffBitsCount || modexp.bitLength().toJSNumber() < minDiffBitsCount || Math.floor((modexp.bitLength().toJSNumber() + 7) / 8) > maxModExpSize);\n}\nfunction xor(a, b) {\n  var length = Math.min(a.length, b.length);\n  for (var i = 0; i < length; i++) {\n    a[i] = a[i] ^ b[i];\n  }\n  return a;\n}\n/**\r\n *\r\n * @param password{Buffer}\r\n * @param salt{Buffer}\r\n * @param iterations{number}\r\n * @returns {*}\r\n */\nfunction pbkdf2sha512(password, salt, iterations) {\n  return CryptoFile_1.default.pbkdf2Sync(password, salt, iterations, 64, \"sha512\");\n}\n/**\r\n *\r\n * @param algo {constructors.PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow}\r\n * @param password\r\n * @returns {Buffer|*}\r\n */\nfunction computeHash(_x, _x2) {\n  return _computeHash.apply(this, arguments);\n}\n/**\r\n *\r\n * @param algo {constructors.PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow}\r\n * @param password\r\n */\nfunction _computeHash() {\n  _computeHash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(algo, password) {\n    var hash1, hash2, hash3;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return (0, Helpers_1.sha256)(buffer_1.Buffer.concat([algo.salt1, buffer_1.Buffer.from(password, \"utf-8\"), algo.salt1]));\n        case 2:\n          hash1 = _context.sent;\n          _context.next = 5;\n          return (0, Helpers_1.sha256)(buffer_1.Buffer.concat([algo.salt2, hash1, algo.salt2]));\n        case 5:\n          hash2 = _context.sent;\n          _context.next = 8;\n          return pbkdf2sha512(hash2, algo.salt1, 100000);\n        case 8:\n          hash3 = _context.sent;\n          return _context.abrupt(\"return\", (0, Helpers_1.sha256)(buffer_1.Buffer.concat([algo.salt2, hash3, algo.salt2])));\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _computeHash.apply(this, arguments);\n}\nfunction computeDigest(_x3, _x4) {\n  return _computeDigest.apply(this, arguments);\n}\nfunction _computeDigest() {\n  _computeDigest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(algo, password) {\n    var value;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          checkPrimeAndGood(algo.p, algo.g);\n          _context2.next = 7;\n          break;\n        case 4:\n          _context2.prev = 4;\n          _context2.t0 = _context2[\"catch\"](0);\n          throw new Error(\"bad p/g in password\");\n        case 7:\n          _context2.t1 = (0, Helpers_1.modExp);\n          _context2.t2 = (0, big_integer_1.default)(algo.g);\n          _context2.t3 = (0, Helpers_1.readBigIntFromBuffer);\n          _context2.next = 12;\n          return computeHash(algo, password);\n        case 12:\n          _context2.t4 = _context2.sent;\n          _context2.t5 = (0, _context2.t3)(_context2.t4, false);\n          _context2.t6 = (0, Helpers_1.readBigIntFromBuffer)(algo.p, false);\n          value = (0, _context2.t1)(_context2.t2, _context2.t5, _context2.t6);\n          return _context2.abrupt(\"return\", bigNumForHash(value));\n        case 17:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[0, 4]]);\n  }));\n  return _computeDigest.apply(this, arguments);\n}\nexports.computeDigest = computeDigest;\n/**\r\n *\r\n * @param request {constructors.account.Password}\r\n * @param password {string}\r\n */\nfunction computeCheck(_x5, _x6) {\n  return _computeCheck.apply(this, arguments);\n}\nfunction _computeCheck() {\n  _computeCheck = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(request, password) {\n    var algo, srp_B, srpId, pwHash, p, g, B, x, pForHash, gForHash, bForHash, gX, k, kgX, generateAndCheckRandom, _yield$generateAndChe, a, aForHash, u, gB, ux, aUx, S, _yield$Promise$all, _yield$Promise$all2, K, pSha, gSha, salt1Sha, salt2Sha, M1;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          algo = request.currentAlgo;\n          if (algo instanceof tl_1.Api.PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow) {\n            _context4.next = 3;\n            break;\n          }\n          throw new Error(\"Unsupported password algorithm \".concat(algo === null || algo === void 0 ? void 0 : algo.className));\n        case 3:\n          srp_B = request.srp_B;\n          srpId = request.srpId;\n          if (!(!srp_B || !srpId)) {\n            _context4.next = 7;\n            break;\n          }\n          throw new Error(\"Undefined srp_b  \".concat(request));\n        case 7:\n          _context4.next = 9;\n          return computeHash(algo, password);\n        case 9:\n          pwHash = _context4.sent;\n          p = (0, Helpers_1.readBigIntFromBuffer)(algo.p, false);\n          g = algo.g;\n          B = (0, Helpers_1.readBigIntFromBuffer)(srp_B, false);\n          _context4.prev = 13;\n          checkPrimeAndGood(algo.p, g);\n          _context4.next = 20;\n          break;\n        case 17:\n          _context4.prev = 17;\n          _context4.t0 = _context4[\"catch\"](13);\n          throw new Error(\"bad /g in password\");\n        case 20:\n          if (isGoodLarge(B, p)) {\n            _context4.next = 22;\n            break;\n          }\n          throw new Error(\"bad b in check\");\n        case 22:\n          x = (0, Helpers_1.readBigIntFromBuffer)(pwHash, false);\n          pForHash = numBytesForHash(algo.p);\n          gForHash = bigNumForHash((0, big_integer_1.default)(g));\n          bForHash = numBytesForHash(srp_B);\n          gX = (0, Helpers_1.modExp)((0, big_integer_1.default)(g), x, p);\n          _context4.t1 = (0, Helpers_1.readBigIntFromBuffer);\n          _context4.next = 30;\n          return (0, Helpers_1.sha256)(buffer_1.Buffer.concat([pForHash, gForHash]));\n        case 30:\n          _context4.t2 = _context4.sent;\n          k = (0, _context4.t1)(_context4.t2, false);\n          kgX = (0, Helpers_1.bigIntMod)(k.multiply(gX), p);\n          generateAndCheckRandom = /*#__PURE__*/function () {\n            var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n              var randomSize, random, _a, A, _aForHash, _u;\n              return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                while (1) switch (_context3.prev = _context3.next) {\n                  case 0:\n                    randomSize = 256; // eslint-disable-next-line no-constant-condition\n                  case 1:\n                    if (!true) {\n                      _context3.next = 16;\n                      break;\n                    }\n                    random = (0, Helpers_1.generateRandomBytes)(randomSize);\n                    _a = (0, Helpers_1.readBigIntFromBuffer)(random, false);\n                    A = (0, Helpers_1.modExp)((0, big_integer_1.default)(g), _a, p);\n                    if (!isGoodModExpFirst(A, p)) {\n                      _context3.next = 14;\n                      break;\n                    }\n                    _aForHash = bigNumForHash(A);\n                    _context3.t0 = (0, Helpers_1.readBigIntFromBuffer);\n                    _context3.next = 10;\n                    return (0, Helpers_1.sha256)(buffer_1.Buffer.concat([_aForHash, bForHash]));\n                  case 10:\n                    _context3.t1 = _context3.sent;\n                    _u = (0, _context3.t0)(_context3.t1, false);\n                    if (!_u.greater((0, big_integer_1.default)(0))) {\n                      _context3.next = 14;\n                      break;\n                    }\n                    return _context3.abrupt(\"return\", {\n                      a: _a,\n                      aForHash: _aForHash,\n                      u: _u\n                    });\n                  case 14:\n                    _context3.next = 1;\n                    break;\n                  case 16:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }, _callee3);\n            }));\n            return function generateAndCheckRandom() {\n              return _ref.apply(this, arguments);\n            };\n          }();\n          _context4.next = 36;\n          return generateAndCheckRandom();\n        case 36:\n          _yield$generateAndChe = _context4.sent;\n          a = _yield$generateAndChe.a;\n          aForHash = _yield$generateAndChe.aForHash;\n          u = _yield$generateAndChe.u;\n          gB = (0, Helpers_1.bigIntMod)(B.subtract(kgX), p);\n          if (isGoodModExpFirst(gB, p)) {\n            _context4.next = 43;\n            break;\n          }\n          throw new Error(\"bad gB\");\n        case 43:\n          ux = u.multiply(x);\n          aUx = a.add(ux);\n          S = (0, Helpers_1.modExp)(gB, aUx, p);\n          _context4.next = 48;\n          return Promise.all([(0, Helpers_1.sha256)(bigNumForHash(S)), (0, Helpers_1.sha256)(pForHash), (0, Helpers_1.sha256)(gForHash), (0, Helpers_1.sha256)(algo.salt1), (0, Helpers_1.sha256)(algo.salt2)]);\n        case 48:\n          _yield$Promise$all = _context4.sent;\n          _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 5);\n          K = _yield$Promise$all2[0];\n          pSha = _yield$Promise$all2[1];\n          gSha = _yield$Promise$all2[2];\n          salt1Sha = _yield$Promise$all2[3];\n          salt2Sha = _yield$Promise$all2[4];\n          _context4.next = 57;\n          return (0, Helpers_1.sha256)(buffer_1.Buffer.concat([xor(pSha, gSha), salt1Sha, salt2Sha, aForHash, bForHash, K]));\n        case 57:\n          M1 = _context4.sent;\n          return _context4.abrupt(\"return\", new tl_1.Api.InputCheckPasswordSRP({\n            srpId: srpId,\n            A: buffer_1.Buffer.from(aForHash),\n            M1: M1\n          }));\n        case 59:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4, null, [[13, 17]]);\n  }));\n  return _computeCheck.apply(this, arguments);\n}\nexports.computeCheck = computeCheck;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","computeDigest","computeCheck","buffer_1","require","tl_1","Helpers_1","big_integer_1","CryptoFile_1","SIZE_FOR_HASH","checkPrimeAndGood","primeBytes","g","goodPrime","Buffer","from","equals","includes","Error","isGoodLarge","number","p","greater","default","subtract","numBytesForHash","concat","alloc","length","bigNumForHash","readBufferFromBigInt","isGoodModExpFirst","modexp","prime","diff","minDiffBitsCount","maxModExpSize","lesser","bitLength","toJSNumber","Math","floor","xor","a","b","min","i","pbkdf2sha512","password","salt","iterations","pbkdf2Sync","computeHash","algo","sha256","salt1","hash1","salt2","hash2","hash3","modExp","readBigIntFromBuffer","request","currentAlgo","Api","PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow","className","srp_B","srpId","pwHash","B","x","pForHash","gForHash","bForHash","gX","k","kgX","bigIntMod","multiply","generateAndCheckRandom","randomSize","random","generateRandomBytes","A","aForHash","u","gB","ux","aUx","add","S","Promise","all","K","pSha","gSha","salt1Sha","salt2Sha","M1","InputCheckPasswordSRP"],"sources":["C:/Users/Yakov/Desktop/projects/node-projects/node-js-key-monitor/sladrus.github.io/node_modules/telegram/Password.js"],"sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.computeDigest = exports.computeCheck = void 0;\r\nconst buffer_1 = require(\"buffer/\");\r\nconst tl_1 = require(\"./tl\");\r\nconst Helpers_1 = require(\"./Helpers\");\r\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\r\nconst CryptoFile_1 = __importDefault(require(\"./CryptoFile\"));\r\nconst SIZE_FOR_HASH = 256;\r\n/**\r\n *\r\n *\r\n * @param prime{BigInteger}\r\n * @param g{BigInteger}\r\n */\r\n/*\r\nWe don't support changing passwords yet\r\nfunction checkPrimeAndGoodCheck(prime, g) {\r\n    console.error('Unsupported function `checkPrimeAndGoodCheck` call. Arguments:', prime, g)\r\n\r\n    const goodPrimeBitsCount = 2048\r\n    if (prime < 0 || prime.bitLength() !== goodPrimeBitsCount) {\r\n        throw new Error(`bad prime count ${prime.bitLength()},expected ${goodPrimeBitsCount}`)\r\n    }\r\n    // TODO this is kinda slow\r\n    if (Factorizator.factorize(prime)[0] !== 1) {\r\n        throw new Error('give \"prime\" is not prime')\r\n    }\r\n    if (g.eq(bigInt(2))) {\r\n        if ((prime.remainder(bigInt(8))).neq(bigInt(7))) {\r\n            throw new Error(`bad g ${g}, mod8 ${prime % 8}`)\r\n        }\r\n    } else if (g.eq(bigInt(3))) {\r\n        if ((prime.remainder(bigInt(3))).neq(bigInt(2))) {\r\n            throw new Error(`bad g ${g}, mod3 ${prime % 3}`)\r\n        }\r\n        // eslint-disable-next-line no-empty\r\n    } else if (g.eq(bigInt(4))) {\r\n\r\n    } else if (g.eq(bigInt(5))) {\r\n        if (!([ bigInt(1), bigInt(4) ].includes(prime.remainder(bigInt(5))))) {\r\n            throw new Error(`bad g ${g}, mod8 ${prime % 5}`)\r\n        }\r\n    } else if (g.eq(bigInt(6))) {\r\n        if (!([ bigInt(19), bigInt(23) ].includes(prime.remainder(bigInt(24))))) {\r\n            throw new Error(`bad g ${g}, mod8 ${prime % 24}`)\r\n        }\r\n    } else if (g.eq(bigInt(7))) {\r\n        if (!([ bigInt(3), bigInt(5), bigInt(6) ].includes(prime.remainder(bigInt(7))))) {\r\n            throw new Error(`bad g ${g}, mod8 ${prime % 7}`)\r\n        }\r\n    } else {\r\n        throw new Error(`bad g ${g}`)\r\n    }\r\n    const primeSub1Div2 = (prime.subtract(bigInt(1))).divide(bigInt(2))\r\n    if (Factorizator.factorize(primeSub1Div2)[0] !== 1) {\r\n        throw new Error('(prime - 1) // 2 is not prime')\r\n    }\r\n}\r\n*/\r\n/**\r\n *\r\n * @param primeBytes{Buffer}\r\n * @param g{number}\r\n */\r\nfunction checkPrimeAndGood(primeBytes, g) {\r\n    const goodPrime = buffer_1.Buffer.from([\r\n        0xc7, 0x1c, 0xae, 0xb9, 0xc6, 0xb1, 0xc9, 0x04, 0x8e, 0x6c, 0x52, 0x2f,\r\n        0x70, 0xf1, 0x3f, 0x73, 0x98, 0x0d, 0x40, 0x23, 0x8e, 0x3e, 0x21, 0xc1,\r\n        0x49, 0x34, 0xd0, 0x37, 0x56, 0x3d, 0x93, 0x0f, 0x48, 0x19, 0x8a, 0x0a,\r\n        0xa7, 0xc1, 0x40, 0x58, 0x22, 0x94, 0x93, 0xd2, 0x25, 0x30, 0xf4, 0xdb,\r\n        0xfa, 0x33, 0x6f, 0x6e, 0x0a, 0xc9, 0x25, 0x13, 0x95, 0x43, 0xae, 0xd4,\r\n        0x4c, 0xce, 0x7c, 0x37, 0x20, 0xfd, 0x51, 0xf6, 0x94, 0x58, 0x70, 0x5a,\r\n        0xc6, 0x8c, 0xd4, 0xfe, 0x6b, 0x6b, 0x13, 0xab, 0xdc, 0x97, 0x46, 0x51,\r\n        0x29, 0x69, 0x32, 0x84, 0x54, 0xf1, 0x8f, 0xaf, 0x8c, 0x59, 0x5f, 0x64,\r\n        0x24, 0x77, 0xfe, 0x96, 0xbb, 0x2a, 0x94, 0x1d, 0x5b, 0xcd, 0x1d, 0x4a,\r\n        0xc8, 0xcc, 0x49, 0x88, 0x07, 0x08, 0xfa, 0x9b, 0x37, 0x8e, 0x3c, 0x4f,\r\n        0x3a, 0x90, 0x60, 0xbe, 0xe6, 0x7c, 0xf9, 0xa4, 0xa4, 0xa6, 0x95, 0x81,\r\n        0x10, 0x51, 0x90, 0x7e, 0x16, 0x27, 0x53, 0xb5, 0x6b, 0x0f, 0x6b, 0x41,\r\n        0x0d, 0xba, 0x74, 0xd8, 0xa8, 0x4b, 0x2a, 0x14, 0xb3, 0x14, 0x4e, 0x0e,\r\n        0xf1, 0x28, 0x47, 0x54, 0xfd, 0x17, 0xed, 0x95, 0x0d, 0x59, 0x65, 0xb4,\r\n        0xb9, 0xdd, 0x46, 0x58, 0x2d, 0xb1, 0x17, 0x8d, 0x16, 0x9c, 0x6b, 0xc4,\r\n        0x65, 0xb0, 0xd6, 0xff, 0x9c, 0xa3, 0x92, 0x8f, 0xef, 0x5b, 0x9a, 0xe4,\r\n        0xe4, 0x18, 0xfc, 0x15, 0xe8, 0x3e, 0xbe, 0xa0, 0xf8, 0x7f, 0xa9, 0xff,\r\n        0x5e, 0xed, 0x70, 0x05, 0x0d, 0xed, 0x28, 0x49, 0xf4, 0x7b, 0xf9, 0x59,\r\n        0xd9, 0x56, 0x85, 0x0c, 0xe9, 0x29, 0x85, 0x1f, 0x0d, 0x81, 0x15, 0xf6,\r\n        0x35, 0xb1, 0x05, 0xee, 0x2e, 0x4e, 0x15, 0xd0, 0x4b, 0x24, 0x54, 0xbf,\r\n        0x6f, 0x4f, 0xad, 0xf0, 0x34, 0xb1, 0x04, 0x03, 0x11, 0x9c, 0xd8, 0xe3,\r\n        0xb9, 0x2f, 0xcc, 0x5b,\r\n    ]);\r\n    if (goodPrime.equals(primeBytes)) {\r\n        if ([3, 4, 5, 7].includes(g)) {\r\n            return; // It's good\r\n        }\r\n    }\r\n    throw new Error(\"Changing passwords unsupported\");\r\n    //checkPrimeAndGoodCheck(readBigIntFromBuffer(primeBytes, false), g)\r\n}\r\n/**\r\n *\r\n * @param number{BigInteger}\r\n * @param p{BigInteger}\r\n * @returns {boolean}\r\n */\r\nfunction isGoodLarge(number, p) {\r\n    return number.greater((0, big_integer_1.default)(0)) && p.subtract(number).greater((0, big_integer_1.default)(0));\r\n}\r\n/**\r\n *\r\n * @param number {Buffer}\r\n * @returns {Buffer}\r\n */\r\nfunction numBytesForHash(number) {\r\n    return buffer_1.Buffer.concat([buffer_1.Buffer.alloc(SIZE_FOR_HASH - number.length), number]);\r\n}\r\n/**\r\n *\r\n * @param g {bigInt}\r\n * @returns {Buffer}\r\n */\r\nfunction bigNumForHash(g) {\r\n    return (0, Helpers_1.readBufferFromBigInt)(g, SIZE_FOR_HASH, false);\r\n}\r\n/**\r\n *\r\n * @param modexp {BigInteger}\r\n * @param prime {BigInteger}\r\n * @returns {Boolean}\r\n */\r\nfunction isGoodModExpFirst(modexp, prime) {\r\n    const diff = prime.subtract(modexp);\r\n    const minDiffBitsCount = 2048 - 64;\r\n    const maxModExpSize = 256;\r\n    return !(diff.lesser((0, big_integer_1.default)(0)) ||\r\n        diff.bitLength().toJSNumber() < minDiffBitsCount ||\r\n        modexp.bitLength().toJSNumber() < minDiffBitsCount ||\r\n        Math.floor((modexp.bitLength().toJSNumber() + 7) / 8) > maxModExpSize);\r\n}\r\nfunction xor(a, b) {\r\n    const length = Math.min(a.length, b.length);\r\n    for (let i = 0; i < length; i++) {\r\n        a[i] = a[i] ^ b[i];\r\n    }\r\n    return a;\r\n}\r\n/**\r\n *\r\n * @param password{Buffer}\r\n * @param salt{Buffer}\r\n * @param iterations{number}\r\n * @returns {*}\r\n */\r\nfunction pbkdf2sha512(password, salt, iterations) {\r\n    return CryptoFile_1.default.pbkdf2Sync(password, salt, iterations, 64, \"sha512\");\r\n}\r\n/**\r\n *\r\n * @param algo {constructors.PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow}\r\n * @param password\r\n * @returns {Buffer|*}\r\n */\r\nasync function computeHash(algo, password) {\r\n    const hash1 = await (0, Helpers_1.sha256)(buffer_1.Buffer.concat([algo.salt1, buffer_1.Buffer.from(password, \"utf-8\"), algo.salt1]));\r\n    const hash2 = await (0, Helpers_1.sha256)(buffer_1.Buffer.concat([algo.salt2, hash1, algo.salt2]));\r\n    const hash3 = await pbkdf2sha512(hash2, algo.salt1, 100000);\r\n    return (0, Helpers_1.sha256)(buffer_1.Buffer.concat([algo.salt2, hash3, algo.salt2]));\r\n}\r\n/**\r\n *\r\n * @param algo {constructors.PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow}\r\n * @param password\r\n */\r\nasync function computeDigest(algo, password) {\r\n    try {\r\n        checkPrimeAndGood(algo.p, algo.g);\r\n    }\r\n    catch (e) {\r\n        throw new Error(\"bad p/g in password\");\r\n    }\r\n    const value = (0, Helpers_1.modExp)((0, big_integer_1.default)(algo.g), (0, Helpers_1.readBigIntFromBuffer)(await computeHash(algo, password), false), (0, Helpers_1.readBigIntFromBuffer)(algo.p, false));\r\n    return bigNumForHash(value);\r\n}\r\nexports.computeDigest = computeDigest;\r\n/**\r\n *\r\n * @param request {constructors.account.Password}\r\n * @param password {string}\r\n */\r\nasync function computeCheck(request, password) {\r\n    const algo = request.currentAlgo;\r\n    if (!(algo instanceof\r\n        tl_1.Api.PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow)) {\r\n        throw new Error(`Unsupported password algorithm ${algo === null || algo === void 0 ? void 0 : algo.className}`);\r\n    }\r\n    const srp_B = request.srp_B;\r\n    const srpId = request.srpId;\r\n    if (!srp_B || !srpId) {\r\n        throw new Error(`Undefined srp_b  ${request}`);\r\n    }\r\n    const pwHash = await computeHash(algo, password);\r\n    const p = (0, Helpers_1.readBigIntFromBuffer)(algo.p, false);\r\n    const g = algo.g;\r\n    const B = (0, Helpers_1.readBigIntFromBuffer)(srp_B, false);\r\n    try {\r\n        checkPrimeAndGood(algo.p, g);\r\n    }\r\n    catch (e) {\r\n        throw new Error(\"bad /g in password\");\r\n    }\r\n    if (!isGoodLarge(B, p)) {\r\n        throw new Error(\"bad b in check\");\r\n    }\r\n    const x = (0, Helpers_1.readBigIntFromBuffer)(pwHash, false);\r\n    const pForHash = numBytesForHash(algo.p);\r\n    const gForHash = bigNumForHash((0, big_integer_1.default)(g));\r\n    const bForHash = numBytesForHash(srp_B);\r\n    const gX = (0, Helpers_1.modExp)((0, big_integer_1.default)(g), x, p);\r\n    const k = (0, Helpers_1.readBigIntFromBuffer)(await (0, Helpers_1.sha256)(buffer_1.Buffer.concat([pForHash, gForHash])), false);\r\n    const kgX = (0, Helpers_1.bigIntMod)(k.multiply(gX), p);\r\n    const generateAndCheckRandom = async () => {\r\n        const randomSize = 256;\r\n        // eslint-disable-next-line no-constant-condition\r\n        while (true) {\r\n            const random = (0, Helpers_1.generateRandomBytes)(randomSize);\r\n            const a = (0, Helpers_1.readBigIntFromBuffer)(random, false);\r\n            const A = (0, Helpers_1.modExp)((0, big_integer_1.default)(g), a, p);\r\n            if (isGoodModExpFirst(A, p)) {\r\n                const aForHash = bigNumForHash(A);\r\n                const u = (0, Helpers_1.readBigIntFromBuffer)(await (0, Helpers_1.sha256)(buffer_1.Buffer.concat([aForHash, bForHash])), false);\r\n                if (u.greater((0, big_integer_1.default)(0))) {\r\n                    return {\r\n                        a: a,\r\n                        aForHash: aForHash,\r\n                        u: u,\r\n                    };\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const { a, aForHash, u } = await generateAndCheckRandom();\r\n    const gB = (0, Helpers_1.bigIntMod)(B.subtract(kgX), p);\r\n    if (!isGoodModExpFirst(gB, p)) {\r\n        throw new Error(\"bad gB\");\r\n    }\r\n    const ux = u.multiply(x);\r\n    const aUx = a.add(ux);\r\n    const S = (0, Helpers_1.modExp)(gB, aUx, p);\r\n    const [K, pSha, gSha, salt1Sha, salt2Sha] = await Promise.all([\r\n        (0, Helpers_1.sha256)(bigNumForHash(S)),\r\n        (0, Helpers_1.sha256)(pForHash),\r\n        (0, Helpers_1.sha256)(gForHash),\r\n        (0, Helpers_1.sha256)(algo.salt1),\r\n        (0, Helpers_1.sha256)(algo.salt2),\r\n    ]);\r\n    const M1 = await (0, Helpers_1.sha256)(buffer_1.Buffer.concat([\r\n        xor(pSha, gSha),\r\n        salt1Sha,\r\n        salt2Sha,\r\n        aForHash,\r\n        bForHash,\r\n        K,\r\n    ]));\r\n    return new tl_1.Api.InputCheckPasswordSRP({\r\n        srpId: srpId,\r\n        A: buffer_1.Buffer.from(aForHash),\r\n        M1: M1,\r\n    });\r\n}\r\nexports.computeCheck = computeCheck;\r\n"],"mappings":"AAAA,YAAY;;AAAC;AAAA;AAAA;AACb,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAGF,OAAO,CAACG,YAAY,GAAG,KAAK,CAAC;AACrD,IAAMC,QAAQ,GAAGC,OAAO,CAAC,SAAS,CAAC;AACnC,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,IAAME,SAAS,GAAGF,OAAO,CAAC,WAAW,CAAC;AACtC,IAAMG,aAAa,GAAGb,eAAe,CAACU,OAAO,CAAC,aAAa,CAAC,CAAC;AAC7D,IAAMI,YAAY,GAAGd,eAAe,CAACU,OAAO,CAAC,cAAc,CAAC,CAAC;AAC7D,IAAMK,aAAa,GAAG,GAAG;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,iBAAiB,CAACC,UAAU,EAAEC,CAAC,EAAE;EACtC,IAAMC,SAAS,GAAGV,QAAQ,CAACW,MAAM,CAACC,IAAI,CAAC,CACnC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAA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"},"metadata":{},"sourceType":"script","externalDependencies":[]}