[{"C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\index.js":"1","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\App.js":"2","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\store\\KeysStore.js":"3","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\store\\ProjectStore.js":"4","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\store\\UserStore.js":"5","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\components\\telegram\\TelegramService.js":"6","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\components\\AppRouter.js":"7","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\components\\MonitorNav.js":"8","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\components\\NavBar.js":"9","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\http\\projectApi.js":"10","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\http\\keysApi.js":"11","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\http\\userApi.js":"12","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\components\\telegram\\handleGroupMessages.js":"13","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\http\\chatApi.js":"14","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\http\\accountApi.js":"15","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\components\\telegram\\handlePrivateMessages.js":"16","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\routes.js":"17","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\pages\\Auth.js":"18","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\utils\\consts.js":"19","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\http\\index.js":"20","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\pages\\Monitoring.js":"21","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\pages\\MonitoringRequests.js":"22","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\pages\\MonitoringDialogs.js":"23","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\components\\ChatList.js":"24","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\components\\modals\\monitoring\\DialogModal.js":"25","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\components\\modals\\monitoring\\CreateChat.js":"26","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\components\\ChatCard.js":"27","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\components\\modals\\CreateKeys.js":"28","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\components\\modals\\monitoring\\OpenModal.js":"29","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\components\\modals\\monitoring\\DeleteChat.js":"30"},{"size":700,"mtime":1674484902571,"results":"31","hashOfConfig":"32"},{"size":991,"mtime":1674484902541,"results":"33","hashOfConfig":"32"},{"size":980,"mtime":1674484902583,"results":"34","hashOfConfig":"32"},{"size":2321,"mtime":1674484902584,"results":"35","hashOfConfig":"32"},{"size":1577,"mtime":1674484902585,"results":"36","hashOfConfig":"32"},{"size":22596,"mtime":1674487203623,"results":"37","hashOfConfig":"32"},{"size":761,"mtime":1674484902543,"results":"38","hashOfConfig":"32"},{"size":951,"mtime":1674484902546,"results":"39","hashOfConfig":"32"},{"size":1621,"mtime":1674484902548,"results":"40","hashOfConfig":"32"},{"size":1266,"mtime":1674484902569,"results":"41","hashOfConfig":"32"},{"size":526,"mtime":1674484902568,"results":"42","hashOfConfig":"32"},{"size":1074,"mtime":1674484902570,"results":"43","hashOfConfig":"32"},{"size":1427,"mtime":1674484902562,"results":"44","hashOfConfig":"32"},{"size":1561,"mtime":1674484902566,"results":"45","hashOfConfig":"32"},{"size":686,"mtime":1674484902565,"results":"46","hashOfConfig":"32"},{"size":592,"mtime":1674484902563,"results":"47","hashOfConfig":"32"},{"size":768,"mtime":1674484902582,"results":"48","hashOfConfig":"32"},{"size":2950,"mtime":1674484902572,"results":"49","hashOfConfig":"32"},{"size":372,"mtime":1674484902587,"results":"50","hashOfConfig":"32"},{"size":1077,"mtime":1674484902567,"results":"51","hashOfConfig":"32"},{"size":1498,"mtime":1674484902574,"results":"52","hashOfConfig":"32"},{"size":4861,"mtime":1674484902576,"results":"53","hashOfConfig":"32"},{"size":3464,"mtime":1674484902575,"results":"54","hashOfConfig":"32"},{"size":464,"mtime":1674484902545,"results":"55","hashOfConfig":"32"},{"size":5309,"mtime":1674484902556,"results":"56","hashOfConfig":"32"},{"size":3176,"mtime":1674484902555,"results":"57","hashOfConfig":"32"},{"size":3485,"mtime":1674484902545,"results":"58","hashOfConfig":"32"},{"size":1928,"mtime":1674484902551,"results":"59","hashOfConfig":"32"},{"size":2067,"mtime":1674484902558,"results":"60","hashOfConfig":"32"},{"size":1553,"mtime":1674484902555,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hgl1mm",{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\index.js",[],[],"C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\App.js",["160"],[],"import { observer } from 'mobx-react-lite';\r\nimport { useContext, useEffect } from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Context } from '.';\r\nimport AppRouter from './components/AppRouter';\r\nimport MonitorNav from './components/MonitorNav';\r\nimport NavBar from './components/NavBar';\r\n\r\nconst App = observer(() => {\r\n  const { userStore } = useContext(Context);\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem('token')) {\r\n      userStore.checkAuth();\r\n    } else {\r\n      userStore.setIsLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <NavBar />\r\n      <MonitorNav />\r\n      {userStore.isLoading ? (\r\n        <center>\r\n          <Spinner animation=\"border\" role=\"status\">\r\n            <span className=\"visually-hidden\">Loading...</span>\r\n          </Spinner>\r\n        </center>\r\n      ) : (\r\n        <AppRouter />\r\n      )}\r\n    </BrowserRouter>\r\n  );\r\n});\r\n\r\nexport default App;\r\n","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\store\\KeysStore.js",[],[],"C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\store\\ProjectStore.js",[],[],"C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\store\\UserStore.js",[],[],"C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\components\\telegram\\TelegramService.js",[],[],"C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\components\\AppRouter.js",[],[],"C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\components\\MonitorNav.js",[],[],"C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\components\\NavBar.js",[],[],"C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\http\\projectApi.js",[],[],"C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\http\\keysApi.js",[],[],"C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\http\\userApi.js",[],[],"C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\components\\telegram\\handleGroupMessages.js",[],[],"C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\http\\chatApi.js",[],[],"C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\http\\accountApi.js",[],[],"C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\components\\telegram\\handlePrivateMessages.js",[],[],"C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\routes.js",[],[],"C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\pages\\Auth.js",[],[],"C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\utils\\consts.js",[],[],"C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\http\\index.js",[],[],"C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\pages\\Monitoring.js",["161"],[],"import { observer } from 'mobx-react-lite';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { Button, Container } from 'react-bootstrap';\r\nimport { Context } from '..';\r\nimport ChatList from '../components/ChatList';\r\nimport CreateChat from '../components/modals/monitoring/CreateChat';\r\nimport { getChats } from '../http/chatApi';\r\n\r\nconst Monitoring = observer(() => {\r\n  const { telegramService } = useContext(Context);\r\n\r\n  const [createShow, setCreateShow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    getChats().then((data) => {\r\n      if (!telegramService.chats.length) {\r\n        telegramService.chats = data;\r\n      }\r\n      telegramService.chats.map((chat) => {\r\n        if (!chat.active) {\r\n          return { ...chat, active: false };\r\n        }\r\n        return chat;\r\n      });\r\n    });\r\n  }, []);\r\n  return (\r\n    <>\r\n      <Container className=\"p-4 px-4 d-grid\">\r\n        <Button variant=\"primary\" size=\"lg\" onClick={() => setCreateShow(true)}>\r\n          Добавить чаты\r\n        </Button>\r\n        <CreateChat show={createShow} onHide={setCreateShow} />\r\n      </Container>\r\n      {telegramService.chats.length ? (\r\n        <Container className=\"d-flex flex-row flex-wrap align-content-center justify-content-start\">\r\n          <ChatList chats={telegramService.chats} />\r\n        </Container>\r\n      ) : (\r\n        <center>Добавьте чаты, чтобы начать</center>\r\n      )}\r\n    </>\r\n  );\r\n});\r\n\r\nexport default Monitoring;\r\n","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\pages\\MonitoringRequests.js",["162"],[],"import { observer } from 'mobx-react-lite';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport {\r\n  Card,\r\n  Container,\r\n  Dropdown,\r\n  DropdownButton,\r\n  ListGroup,\r\n} from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Context } from '..';\r\nimport DialogModal from '../components/modals/monitoring/DialogModal';\r\nimport { getRequests } from '../http/chatApi';\r\n\r\nconst MonitoringRequests = observer(() => {\r\n  const { telegramService } = useContext(Context);\r\n\r\n  const [openShow, setOpenShow] = useState(false);\r\n  const [selectedChat, setSelectedChat] = useState({});\r\n  const [sender, setSender] = useState({});\r\n\r\n  const getTime = (unix_timestamp) => {\r\n    // Create a new JavaScript Date object based on the timestamp\r\n    // multiplied by 1000 so that the argument is in milliseconds, not seconds.\r\n    var a = new Date(unix_timestamp * 1000);\r\n    var months = [\r\n      'Jan',\r\n      'Feb',\r\n      'Mar',\r\n      'Apr',\r\n      'May',\r\n      'Jun',\r\n      'Jul',\r\n      'Aug',\r\n      'Sep',\r\n      'Oct',\r\n      'Nov',\r\n      'Dec',\r\n    ];\r\n    var month = months[a.getMonth()];\r\n    var date = a.getDate();\r\n    // Hours part from the timestamp\r\n    var hours = a.getHours();\r\n    // Minutes part from the timestamp\r\n    var minutes = '0' + a.getMinutes();\r\n    // Seconds part from the timestamp\r\n\r\n    var formattedTime =\r\n      date + ' ' + month + ' ' + hours + ':' + minutes.substr(-2);\r\n    return formattedTime;\r\n  };\r\n\r\n  useEffect(() => {\r\n    getRequests().then((data) => {\r\n      telegramService.requests = data;\r\n    });\r\n  }, [telegramService.requests.length]);\r\n\r\n  return (\r\n    <Container className=\"p-4 px-4 d-grid\">\r\n      <DropdownButton className=\"pb-4\" id=\"dropdown-item-button\" title=\"Фильтр\">\r\n        <Dropdown.Item as=\"button\">По времени</Dropdown.Item>F\r\n        <Dropdown.Item as=\"button\">По чатам</Dropdown.Item>\r\n        <Dropdown.Item as=\"button\">Something else</Dropdown.Item>\r\n      </DropdownButton>\r\n      <Card>\r\n        <ListGroup variant=\"flush\">\r\n          <ListGroup.Item className=\"d-flex justify-content-between align-items-center text-center\">\r\n            <div className=\"m-1 \" style={{ width: '13rem' }}>\r\n              Время/Чат\r\n            </div>\r\n            <div className=\"m-1 \" style={{ width: '25rem' }}>\r\n              Сообщение\r\n            </div>\r\n            <div className=\"m-1\" style={{ width: '10rem' }}>\r\n              Юзернейм/Имя\r\n            </div>\r\n            <div className=\"m-1\" style={{ width: '5rem' }}></div>\r\n          </ListGroup.Item>\r\n        </ListGroup>\r\n        <ListGroup variant=\"flush\">\r\n          {telegramService.requests\r\n            .slice()\r\n            .reverse()\r\n            .map((request, index) => {\r\n              return (\r\n                <ListGroup.Item\r\n                  key={index}\r\n                  className=\"d-flex justify-content-between align-items-center text-center\"\r\n                >\r\n                  <div className=\"text-start\">\r\n                    <div className=\"text-nowrap m-1\">\r\n                      {getTime(request.date)}\r\n                    </div>\r\n                    <div\r\n                      className=\"m-1 text-start\"\r\n                      style={{ minWidth: '13rem' }}\r\n                    >\r\n                      {request.chat?.link}\r\n                    </div>\r\n                  </div>\r\n                  <div>\r\n                    <div className=\"m-1\" style={{ width: '25rem' }}>\r\n                      {request.text}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"m-1\" style={{ width: '10rem' }}>\r\n                    {request.username}\r\n                  </div>\r\n                  <div className=\"m-1\" style={{ width: '5rem' }}>\r\n                    <Link\r\n                      onClick={() => {\r\n                        const res = telegramService.chats.find(\r\n                          (chat) => chat._id === request.chat._id\r\n                        );\r\n                        console.log(res);\r\n\r\n                        setSender(\r\n                          res.senders.find(\r\n                            (obj) => obj?.senderId === request.sender\r\n                          )\r\n                        );\r\n\r\n                        setSelectedChat(res);\r\n                        setOpenShow(true);\r\n                      }}\r\n                    >\r\n                      Написать\r\n                    </Link>\r\n                  </div>\r\n                </ListGroup.Item>\r\n              );\r\n            })}\r\n        </ListGroup>\r\n        <DialogModal\r\n          show={openShow}\r\n          onHide={setOpenShow}\r\n          senderData={sender}\r\n          chat={selectedChat}\r\n        />\r\n      </Card>\r\n    </Container>\r\n  );\r\n});\r\n\r\nexport default MonitoringRequests;\r\n","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\pages\\MonitoringDialogs.js",["163","164"],[],"import { toJS } from 'mobx';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { Card, Container, ListGroup } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Context } from '..';\r\nimport DialogModal from '../components/modals/monitoring/DialogModal';\r\n\r\nconst MonitoringDialogs = observer(() => {\r\n  const { telegramService } = useContext(Context);\r\n\r\n  const [openShow, setOpenShow] = useState(false);\r\n  const [sender, setSender] = useState({});\r\n  const [selectedChat, setSelectedChat] = useState({});\r\n\r\n  useEffect(() => {\r\n    console.log(toJS(telegramService.senders));\r\n  }, [telegramService.update.length]);\r\n\r\n  return (\r\n    <Container className=\"p-4 px-4 d-grid\">\r\n      <Card>\r\n        <ListGroup variant=\"flush\">\r\n          <ListGroup.Item className=\"d-flex justify-content-between align-items-center text-center\">\r\n          <div className=\"m-1 \" style={{ width: '10rem' }}>\r\n              Аккаунт\r\n            </div>\r\n            <div className=\"m-1 \" style={{ width: '10rem' }}>\r\n              Юзер\r\n            </div>\r\n            <div className=\"m-1 flex-fill\">Последнее сообщение</div>\r\n            <div className=\"m-1\" style={{ width: '5rem' }}></div>\r\n          </ListGroup.Item>\r\n        </ListGroup>\r\n        <ListGroup variant=\"flush\">\r\n          {telegramService.chats.map((chat) => {\r\n            return chat.senders.map((sender, index) => {\r\n              if (sender.messages.length) {\r\n                return (\r\n                  <ListGroup.Item\r\n                    key={index}\r\n                    className=\"d-flex justify-content-between align-items-center text-center\"\r\n                  >\r\n                    <div className=\"m-1 \" style={{ width: '10rem' }}>\r\n                      {chat.me.username || chat.me.firstName}\r\n                    </div>\r\n                    <div className=\"m-1 \" style={{ width: '10rem' }}>\r\n                      {sender.username}\r\n                    </div>\r\n                    <div className=\"m-1\" style={{ width: '35rem' }}>\r\n                      {sender.messages[sender?.messages.length - 1].my ? (\r\n                        `Me: ${\r\n                          sender.messages[sender.messages.length - 1].message\r\n                        }`\r\n                      ) : (\r\n                        <b>\r\n                          {`${sender.username || sender.firstName}: ${\r\n                            sender.messages[sender.messages.length - 1].message\r\n                          }`}\r\n                        </b>\r\n                      )}\r\n                    </div>\r\n                    <div className=\"m-1\" style={{ width: '5rem' }}>\r\n                      <Link\r\n                        onClick={() => {\r\n                          setSender(sender);\r\n                          setSelectedChat(chat);\r\n                          setOpenShow(true);\r\n                        }}\r\n                      >\r\n                        Написать\r\n                      </Link>\r\n                    </div>\r\n                  </ListGroup.Item>\r\n                );\r\n              }\r\n            });\r\n          })}\r\n        </ListGroup>\r\n        <DialogModal\r\n          show={openShow}\r\n          onHide={setOpenShow}\r\n          senderData={sender}\r\n          chat={selectedChat}\r\n        />\r\n      </Card>\r\n    </Container>\r\n  );\r\n});\r\n\r\nexport default MonitoringDialogs;\r\n","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\components\\ChatList.js",["165"],[],"import React, { useContext, useEffect } from 'react';\r\nimport { Context } from '..';\r\nimport ChatCard from './ChatCard';\r\n\r\nconst ChatList = ({ chats }) => {\r\n\r\n  const { keysStore } = useContext(Context);\r\n\r\n  useEffect(() => {\r\n    keysStore.fetchKeys()\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {chats.map((chat, index) => {\r\n        return (\r\n            <ChatCard key={index} chat={chat}/>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatList;\r\n","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\components\\modals\\monitoring\\DialogModal.js",["166"],[],"import BigInt from 'big-integer';\r\nimport { toJS } from 'mobx';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { createRef, useContext, useEffect, useState } from 'react';\r\nimport { Button, Form, Modal } from 'react-bootstrap';\r\nimport { Context } from '../../..';\r\nimport { deleteOne } from '../../../http/accountApi';\r\nimport { addMessage } from '../../../http/chatApi';\r\n\r\nconst DialogModal = observer(({ show, onHide, senderData, chat }) => {\r\n  const { telegramService } = useContext(Context);\r\n  const [message, setMessage] = useState('');\r\n  const messagesEndRef = createRef();\r\n\r\n  const componentDidUpdate = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  const handleKeypress = async (e) => {\r\n    if (e.keyCode === 13) {\r\n      await sendMessage();\r\n      setMessage('');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    componentDidUpdate();\r\n  }, [senderData?.messages?.length]);\r\n\r\n  const sendMessage = async () => {\r\n    if (!message) return;\r\n    const tmpMessage = message;\r\n    setMessage('');\r\n    const { client } = chat;\r\n    // chat.senders.map((o) => {\r\n    //   if (o?.id?.value === senderData?.id?.value) {\r\n    //     return o.messages.push({ message: tmpMessage, my: true });\r\n    //   }\r\n    // });\r\n    // for (const req of chat?.requests) {\r\n    //   if (req.sender.id.value === sender.id.value) {\r\n    //     if (!req.sender?.messages) req.sender.messages = [];\r\n    //     req.sender.messages.push({ message: tmpMessage, my: true });\r\n    //   }\r\n    // }\r\n    const req = chat.requests.find((o) => o?.sender === senderData?.senderId);\r\n    console.log(chat);\r\n    for await (const mes of client.iterMessages(chat?.entity, {\r\n      limit: 1,\r\n      offsetDate: req.date,\r\n      // maxId: req.message.id + 1,\r\n      // minId: req.message.id - 1,\r\n    })) {\r\n      console.log(mes);\r\n    }\r\n    console.log(toJS(senderData));\r\n    try {\r\n      await client.sendMessage(\r\n        senderData.username.includes('@')\r\n          ? senderData.username\r\n          : BigInt(senderData.senderId),\r\n        {\r\n          message: tmpMessage,\r\n        }\r\n      );\r\n      const messages = await addMessage(senderData._id, { message: tmpMessage, my: true });\r\n      senderData.messages = messages\r\n    } catch (e) {\r\n      console.log(e);\r\n      if (e.errorMessage === 'PEER_FLOOD') {\r\n        chat.active = false;\r\n        await deleteOne(chat.account._id);\r\n        chat.account = null;\r\n        alert(`${e.errorMessage}: Много запросов/спамблок. Смена аккаунта`);\r\n        await telegramService.startMonitor(chat);\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <Modal size=\"xs\" show={show} onHide={() => onHide()} className=\"rounded-0\">\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Диалог c {senderData?.username}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body className=\"p-0 modal-content rounded-0 border-0\">\r\n        <div\r\n          style={{\r\n            height: '30rem',\r\n            backgroundImage: `url(\"https://svgur.com/i/jyv.svg\")`,\r\n          }}\r\n        >\r\n          <div className=\"d-flex h-100 flex-column justify-content-between overflow-auto\">\r\n            <div сlassName=\"d-flex flex-column\">\r\n              {senderData?.messages &&\r\n                senderData?.messages.map((o, index) => {\r\n                  return o.my ? (\r\n                    <div\r\n                      ref={messagesEndRef}\r\n                      key={index}\r\n                      className=\"d-flex p-2 text-wrap  justify-content-end\"\r\n                    >\r\n                      <div\r\n                        style={{ maxWidth: '75%', borderRadius: 15 }}\r\n                        className=\"d-flex square bg-dark  rounded-9 p-2 align-items-start\"\r\n                      >\r\n                        <span className=\"text-white m-2\">{o.message}</span>\r\n                      </div>\r\n                    </div>\r\n                  ) : (\r\n                    <div\r\n                      ref={messagesEndRef}\r\n                      key={index}\r\n                      className=\"d-flex p-2 text-wrap align-items-start justify-content-start\"\r\n                    >\r\n                      <div\r\n                        style={{ maxWidth: '75%', borderRadius: 15 }}\r\n                        className=\"d-flex square bg-secondary rounded-9 p-1\"\r\n                      >\r\n                        <span className=\"text-white m-2\">{o.message}</span>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n            </div>\r\n          </div>\r\n          <Form.Group className=\"d-flex\">\r\n            <Form.Control\r\n              className=\"rounded-0\"\r\n              onChange={(e) => setMessage(e.target.value)}\r\n              value={message}\r\n              placeholder=\"Введите сообщение\"\r\n              onKeyDown={handleKeypress}\r\n            />\r\n            <Button\r\n              className=\"rounded-0\"\r\n              variant=\"primary\"\r\n              type=\"submit\"\r\n              onClick={async () => {\r\n                await sendMessage();\r\n              }}\r\n            >\r\n              Отправить\r\n            </Button>\r\n          </Form.Group>\r\n        </div>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n});\r\n\r\nexport default DialogModal;\r\n","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\components\\modals\\monitoring\\CreateChat.js",["167"],[],"import { observer } from 'mobx-react-lite';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { Button, Form, Modal } from 'react-bootstrap';\r\nimport { Context } from '../../..';\r\nimport { createChats } from '../../../http/chatApi';\r\nimport CreateKeys from '../CreateKeys';\r\n\r\nconst CreateChat = observer(({ show, onHide }) => {\r\n  const { telegramService, keysStore } = useContext(Context);\r\n\r\n  const [uploadedChats, setUploadedChats] = useState([]);\r\n  const [showKeys, setShowKeys] = useState(false);\r\n  const [selectedKey, setSelectedKey] = useState({});\r\n  const { userStore } = useContext(Context);\r\n\r\n  const readFile = async (e) => {\r\n    e.preventDefault();\r\n    const reader = new FileReader();\r\n    reader.onload = async (e) => {\r\n      const text = e.target.result;\r\n      setUploadedChats(text.split('\\r\\n'));\r\n    };\r\n    reader.readAsText(e.target.files[0]);\r\n  };\r\n\r\n  const createChat = async () => {\r\n    const body = uploadedChats.map((chat) => ({\r\n      link: chat,\r\n      user: userStore.user.id,\r\n      keys: selectedKey,\r\n    }));\r\n    const resp = await createChats(body);\r\n    telegramService.chats = [...telegramService.chats, ...resp];\r\n    onHide();\r\n  };\r\n\r\n  useEffect(() => {\r\n    keysStore.fetchKeys();\r\n  }, [show]);\r\n\r\n  return (\r\n    <Modal\r\n      size=\"lg\"\r\n      show={show}\r\n      onHide={() => onHide()}\r\n      aria-labelledby=\"example-modal-sizes-title-lg\"\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"example-modal-sizes-title-lg\">\r\n          Добавить чаты\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Form.Group>\r\n          <Form.Label>Выберите набор ключей:</Form.Label>\r\n          <div className=\"d-flex mb-2\">\r\n            <Form.Select onChange={(e) => setSelectedKey(e.target.value)}>\r\n              <option>Выберите ключ</option>\r\n              {keysStore.keys.map((key, index) => (\r\n                <option\r\n                  key={index}\r\n                  value={key.id}\r\n                >{`${key.title} - ${key.list}`}</option>\r\n              ))}\r\n            </Form.Select>\r\n            <Button\r\n              className=\"ms-3\"\r\n              variant=\"primary\"\r\n              onClick={() => setShowKeys(true)}\r\n            >\r\n              Добавить\r\n            </Button>\r\n          </div>\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>Загрузите список чатов:</Form.Label>\r\n          <Form.Control type=\"file\" onChange={(e) => readFile(e)} />\r\n        </Form.Group>\r\n\r\n        <Form.Group className=\"d-grid pt-4 pb-3\">\r\n          <Button\r\n            variant=\"primary\"\r\n            size=\"lg\"\r\n            onClick={async () => createChat()}\r\n          >\r\n            Добавить\r\n          </Button>\r\n        </Form.Group>\r\n        <div className=\"d-grid\">\r\n          <Button variant=\"secondary\" size=\"lg\" onClick={() => onHide()}>\r\n            Закрыть\r\n          </Button>\r\n        </div>\r\n      </Modal.Body>\r\n      <CreateKeys show={showKeys} handleClose={() => setShowKeys(false)} />\r\n    </Modal>\r\n  );\r\n});\r\n\r\nexport default CreateChat;\r\n","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\components\\ChatCard.js",["168","169"],[],"import { toJS } from 'mobx';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { Card, Dropdown, NavDropdown } from 'react-bootstrap';\r\nimport { Context } from '..';\r\nimport DeleteChat from './modals/monitoring/DeleteChat';\r\nimport OpenModal from './modals/monitoring/OpenModal';\r\n\r\nconst ChatCard = observer(({ chat }) => {\r\n  const { telegramService, keysStore } = useContext(Context);\r\n  const [selectedChat, setSelectedChat] = useState(false);\r\n\r\n  const [deleteShow, setDeleteShow] = useState(false);\r\n  const [openShow, setOpenShow] = useState(false);\r\n\r\n  const [active, setActive] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (chat.active) {\r\n      setActive(true);\r\n    } else {\r\n      telegramService.startMonitor(chat);\r\n    }\r\n  }, [chat.active]);\r\n\r\n  const changeKeys = (o) => {\r\n    chat.keys = o;\r\n  };\r\n  return (\r\n    <div className=\"p-2 flex-fill\">\r\n      <Card\r\n        className=\"d-flex\"\r\n        style={\r\n          active\r\n            ? { minHeight: '8rem', backgroundColor: '#abf7b1' }\r\n            : { minHeight: '8rem', backgroundColor: '#ffcccb' }\r\n        }\r\n      >\r\n        <Card.Body className=\"d-flex flex-row justify-content-start align-content-start\">\r\n          <div>\r\n            <Card.Title className=\"text-nowrap fs-6 text mb-1\">\r\n              {chat.entity && `${chat.entity?.title}`}\r\n            </Card.Title>\r\n            <Card.Subtitle className=\"text-nowrap fs-6 text mb-2\">{`${chat.link}`}</Card.Subtitle>\r\n            <Card.Subtitle className=\"mb-2 text-muted\">\r\n              <NavDropdown\r\n                id=\"dropdown-item-button\"\r\n                title={`Ключ \"${chat.keys.title}\"`}\r\n              >\r\n                {keysStore.keys.map((o, index) => {\r\n                  return (\r\n                    <Dropdown.Item\r\n                      key={index}\r\n                      as=\"button\"\r\n                      onClick={() => changeKeys(o)}\r\n                    >\r\n                      {`${o.title} - ${o.list}`}\r\n                    </Dropdown.Item>\r\n                  );\r\n                })}\r\n              </NavDropdown>\r\n            </Card.Subtitle>\r\n            <div>\r\n              <Card.Link\r\n                style={{ color: 'red' }}\r\n                onClick={() => {\r\n                  setSelectedChat(chat);\r\n                  setDeleteShow(true);\r\n                }}\r\n              >\r\n                Удалить\r\n              </Card.Link>\r\n              <DeleteChat\r\n                show={deleteShow}\r\n                onHide={setDeleteShow}\r\n                chat={selectedChat}\r\n              />\r\n              <Card.Link\r\n                onClick={() => {\r\n                  setSelectedChat(chat);\r\n                  setOpenShow(true);\r\n                }}\r\n              >\r\n                Открыть\r\n              </Card.Link>\r\n              <OpenModal\r\n                show={openShow}\r\n                onHide={setOpenShow}\r\n                chat={selectedChat}\r\n                senders={telegramService.senders}\r\n              />\r\n            </div>\r\n          </div>\r\n          <Card.Text className=\"ps-3\">\r\n            {chat?.requests?.length\r\n              ? `${chat.requests[chat.requests.length - 1]?.username}: ${\r\n                  chat.requests[chat.requests.length - 1]?.text\r\n                }`\r\n              : ''}\r\n          </Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default ChatCard;\r\n","C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\components\\modals\\CreateKeys.js",[],[],"C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\components\\modals\\monitoring\\OpenModal.js",[],[],"C:\\Users\\Yakov\\Desktop\\projects\\node-projects\\node-js-key-monitor\\sladrus.github.io\\src\\components\\modals\\monitoring\\DeleteChat.js",[],[],{"ruleId":"170","severity":1,"message":"171","line":19,"column":6,"nodeType":"172","endLine":19,"endColumn":8,"suggestions":"173"},{"ruleId":"170","severity":1,"message":"174","line":26,"column":6,"nodeType":"172","endLine":26,"endColumn":8,"suggestions":"175"},{"ruleId":"170","severity":1,"message":"174","line":57,"column":6,"nodeType":"172","endLine":57,"endColumn":39,"suggestions":"176"},{"ruleId":"170","severity":1,"message":"177","line":18,"column":6,"nodeType":"172","endLine":18,"endColumn":37,"suggestions":"178"},{"ruleId":"179","severity":1,"message":"180","line":37,"column":53,"nodeType":"181","messageId":"182","endLine":37,"endColumn":55},{"ruleId":"170","severity":1,"message":"183","line":11,"column":6,"nodeType":"172","endLine":11,"endColumn":8,"suggestions":"184"},{"ruleId":"170","severity":1,"message":"185","line":28,"column":6,"nodeType":"172","endLine":28,"endColumn":36,"suggestions":"186"},{"ruleId":"170","severity":1,"message":"183","line":39,"column":6,"nodeType":"172","endLine":39,"endColumn":12,"suggestions":"187"},{"ruleId":"188","severity":1,"message":"189","line":1,"column":10,"nodeType":"190","messageId":"191","endLine":1,"endColumn":14},{"ruleId":"170","severity":1,"message":"192","line":24,"column":6,"nodeType":"172","endLine":24,"endColumn":19,"suggestions":"193"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userStore'. Either include it or remove the dependency array.","ArrayExpression",["194"],"React Hook useEffect has a missing dependency: 'telegramService'. Either include it or remove the dependency array.",["195"],["196"],"React Hook useEffect has a missing dependency: 'telegramService.senders'. Either include it or remove the dependency array.",["197"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'keysStore'. Either include it or remove the dependency array.",["198"],"React Hook useEffect has a missing dependency: 'componentDidUpdate'. Either include it or remove the dependency array.",["199"],["200"],"no-unused-vars","'toJS' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'chat' and 'telegramService'. Either include them or remove the dependency array.",["201"],{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},{"desc":"208","fix":"209"},{"desc":"210","fix":"211"},{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},{"desc":"216","fix":"217"},"Update the dependencies array to be: [userStore]",{"range":"218","text":"219"},"Update the dependencies array to be: [telegramService]",{"range":"220","text":"221"},"Update the dependencies array to be: [telegramService, telegramService.requests.length]",{"range":"222","text":"223"},"Update the dependencies array to be: [telegramService.senders, telegramService.update.length]",{"range":"224","text":"225"},"Update the dependencies array to be: [keysStore]",{"range":"226","text":"227"},"Update the dependencies array to be: [componentDidUpdate, senderData.messages.length]",{"range":"228","text":"229"},"Update the dependencies array to be: [keysStore, show]",{"range":"230","text":"231"},"Update the dependencies array to be: [chat, chat.active, telegramService]",{"range":"232","text":"233"},[598,600],"[userStore]",[833,835],"[telegramService]",[1596,1629],"[telegramService, telegramService.requests.length]",[679,710],"[telegramService.senders, telegramService.update.length]",[262,264],"[keysStore]",[905,935],"[componentDidUpdate, senderData.messages.length]",[1265,1271],"[keysStore, show]",[817,830],"[chat, chat.active, telegramService]"]